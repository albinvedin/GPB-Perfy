// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#ifndef PROTOBUF_INCLUDED_enum_2eproto
#define PROTOBUF_INCLUDED_enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enum_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_enum_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_enum_2eproto();
namespace vanilla {
class EnumRange;
class EnumRangeDefaultTypeInternal;
extern EnumRangeDefaultTypeInternal _EnumRange_default_instance_;
}  // namespace vanilla
namespace google {
namespace protobuf {
template<> ::vanilla::EnumRange* Arena::CreateMaybeMessage<::vanilla::EnumRange>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vanilla {

enum EnumRange_Sex {
  EnumRange_Sex_MALE = 0,
  EnumRange_Sex_FEMALE = 1,
  EnumRange_Sex_EnumRange_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  EnumRange_Sex_EnumRange_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool EnumRange_Sex_IsValid(int value);
const EnumRange_Sex EnumRange_Sex_Sex_MIN = EnumRange_Sex_MALE;
const EnumRange_Sex EnumRange_Sex_Sex_MAX = EnumRange_Sex_FEMALE;
const int EnumRange_Sex_Sex_ARRAYSIZE = EnumRange_Sex_Sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumRange_Sex_descriptor();
inline const ::std::string& EnumRange_Sex_Name(EnumRange_Sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumRange_Sex_descriptor(), value);
}
inline bool EnumRange_Sex_Parse(
    const ::std::string& name, EnumRange_Sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumRange_Sex>(
    EnumRange_Sex_descriptor(), name, value);
}
// ===================================================================

class EnumRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vanilla.EnumRange) */ {
 public:
  EnumRange();
  virtual ~EnumRange();

  EnumRange(const EnumRange& from);

  inline EnumRange& operator=(const EnumRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumRange(EnumRange&& from) noexcept
    : EnumRange() {
    *this = ::std::move(from);
  }

  inline EnumRange& operator=(EnumRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EnumRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumRange* internal_default_instance() {
    return reinterpret_cast<const EnumRange*>(
               &_EnumRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EnumRange* other);
  friend void swap(EnumRange& a, EnumRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumRange* New() const final {
    return CreateMaybeMessage<EnumRange>(nullptr);
  }

  EnumRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnumRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnumRange& from);
  void MergeFrom(const EnumRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EnumRange_Sex Sex;
  static const Sex MALE =
    EnumRange_Sex_MALE;
  static const Sex FEMALE =
    EnumRange_Sex_FEMALE;
  static inline bool Sex_IsValid(int value) {
    return EnumRange_Sex_IsValid(value);
  }
  static const Sex Sex_MIN =
    EnumRange_Sex_Sex_MIN;
  static const Sex Sex_MAX =
    EnumRange_Sex_Sex_MAX;
  static const int Sex_ARRAYSIZE =
    EnumRange_Sex_Sex_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sex_descriptor() {
    return EnumRange_Sex_descriptor();
  }
  static inline const ::std::string& Sex_Name(Sex value) {
    return EnumRange_Sex_Name(value);
  }
  static inline bool Sex_Parse(const ::std::string& name,
      Sex* value) {
    return EnumRange_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .vanilla.EnumRange.Sex content = 1;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  ::vanilla::EnumRange_Sex content(int index) const;
  void set_content(int index, ::vanilla::EnumRange_Sex value);
  void add_content(::vanilla::EnumRange_Sex value);
  const ::google::protobuf::RepeatedField<int>& content() const;
  ::google::protobuf::RepeatedField<int>* mutable_content();

  // @@protoc_insertion_point(class_scope:vanilla.EnumRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> content_;
  mutable std::atomic<int> _content_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnumRange

// repeated .vanilla.EnumRange.Sex content = 1;
inline int EnumRange::content_size() const {
  return content_.size();
}
inline void EnumRange::clear_content() {
  content_.Clear();
}
inline ::vanilla::EnumRange_Sex EnumRange::content(int index) const {
  // @@protoc_insertion_point(field_get:vanilla.EnumRange.content)
  return static_cast< ::vanilla::EnumRange_Sex >(content_.Get(index));
}
inline void EnumRange::set_content(int index, ::vanilla::EnumRange_Sex value) {
  content_.Set(index, value);
  // @@protoc_insertion_point(field_set:vanilla.EnumRange.content)
}
inline void EnumRange::add_content(::vanilla::EnumRange_Sex value) {
  content_.Add(value);
  // @@protoc_insertion_point(field_add:vanilla.EnumRange.content)
}
inline const ::google::protobuf::RepeatedField<int>&
EnumRange::content() const {
  // @@protoc_insertion_point(field_list:vanilla.EnumRange.content)
  return content_;
}
inline ::google::protobuf::RepeatedField<int>*
EnumRange::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:vanilla.EnumRange.content)
  return &content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vanilla

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vanilla::EnumRange_Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vanilla::EnumRange_Sex>() {
  return ::vanilla::EnumRange_Sex_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_enum_2eproto
