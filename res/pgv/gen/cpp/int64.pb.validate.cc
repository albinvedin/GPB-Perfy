// Code generated by protoc-gen-validate
// source: int64.proto
// DO NOT EDIT!!!

#include "int64.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::pgv::Int64RangeGreaterThan> validator___pgv__Int64RangeGreaterThan(static_cast<bool(*)(const ::pgv::Int64RangeGreaterThan&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::Int64RangeLessThan> validator___pgv__Int64RangeLessThan(static_cast<bool(*)(const ::pgv::Int64RangeLessThan&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::Int64RangeConst> validator___pgv__Int64RangeConst(static_cast<bool(*)(const ::pgv::Int64RangeConst&, pgv::ValidationMsg*)>(::pgv::Validate));




} // namespace validate
} // namespace pgv


namespace pgv {


// Validate checks the field values on ::pgv::Int64RangeGreaterThan with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::Int64RangeGreaterThan& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	

	
	
		if (item <= 100) {
			{
std::ostringstream msg("invalid ");
msg << "Int64RangeGreaterThanValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must be greater than \" 'd']";
*err = msg.str();
return false;
}
		}
	

	


		}
	

	return true;
}





// Validate checks the field values on ::pgv::Int64RangeLessThan with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::Int64RangeLessThan& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	

	
	
		
			if (item >= 100) {
				{
std::ostringstream msg("invalid ");
msg << "Int64RangeLessThanValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must be less than \" 'd']";
*err = msg.str();
return false;
}
			}
		
	

	


		}
	

	return true;
}





// Validate checks the field values on ::pgv::Int64RangeConst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::Int64RangeConst& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	
		if (item != 100) {
			{
std::ostringstream msg("invalid ");
msg << "Int64RangeConstValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must equal \" 'd']";
*err = msg.str();
return false;
}
		}
	

	
	

	


		}
	

	return true;
}






} // namespace

