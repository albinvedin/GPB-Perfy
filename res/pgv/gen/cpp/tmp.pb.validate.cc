// Code generated by protoc-gen-validate
// source: tmp.proto
// DO NOT EDIT!!!

#include "tmp.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::pgv::Parent> validator___pgv__Parent(static_cast<bool(*)(const ::pgv::Parent&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::Child> validator___pgv__Child(static_cast<bool(*)(const ::pgv::Child&, pgv::ValidationMsg*)>(::pgv::Validate));




} // namespace validate
} // namespace pgv


namespace pgv {


// Validate checks the field values on ::pgv::Parent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// return value is false and an error message is written to the input string argument.

	

	

	

	

	



bool Validate(const ::pgv::Parent& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.children().size(); i++) {
			const auto& item = m.children().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::Validator<::pgv::Child>::CheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "ParentValidationError" << "." << "Children";
msg << "[" << "i" << "]";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	

	return true;
}





// Validate checks the field values on ::pgv::Child with the rules defined in
// the proto definition for this message. If any rules are violated, the
// return value is false and an error message is written to the input string argument.

	

	

	

	

	


	

	

	

	

	


	

	

	

	

	
	
	



bool Validate(const ::pgv::Child& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	

	
	
		
			
				if (m.int64Range() < 10 || m.int64Range() > 20) {
					{
std::ostringstream msg("invalid ");
msg << "ChildValidationError" << "." << "Int64Range";
msg << ": " << "[\"value must be inside range [\" '\\n' \", \" '\\x14' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.doubleRange() < 10 || m.doubleRange() > 20) {
					{
std::ostringstream msg("invalid ");
msg << "ChildValidationError" << "." << "DoubleRange";
msg << ": " << "[\"value must be inside range [\" %!q(float64=10) \", \" %!q(float64=20) \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	
	

	

	

	

	

	

	

	

	
	throw pgv::UnimplementedException();
	
	

	return true;
}






} // namespace

