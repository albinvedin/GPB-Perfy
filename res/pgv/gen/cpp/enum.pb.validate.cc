// Code generated by protoc-gen-validate
// source: enum.proto
// DO NOT EDIT!!!

#include "enum.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::pgv::EnumRangeConst> validator___pgv__EnumRangeConst(static_cast<bool(*)(const ::pgv::EnumRangeConst&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::EnumRangeDefinedOnly> validator___pgv__EnumRangeDefinedOnly(static_cast<bool(*)(const ::pgv::EnumRangeDefinedOnly&, pgv::ValidationMsg*)>(::pgv::Validate));




} // namespace validate
} // namespace pgv


namespace pgv {


// Validate checks the field values on ::pgv::EnumRangeConst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::EnumRangeConst& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
		
		
	
		if (item != 0) {
			{
std::ostringstream msg("invalid ");
msg << "EnumRangeConstValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must equal \" '\\x00']";
*err = msg.str();
return false;
}
		}
	

		


		

		}
	

	return true;
}





// Validate checks the field values on ::pgv::EnumRangeDefinedOnly with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::EnumRangeDefinedOnly& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
		
		
	

		


		
			
				if (!::pgv::EnumRangeDefinedOnly_Sex_IsValid(item)) {
			
				{
std::ostringstream msg("invalid ");
msg << "EnumRangeDefinedOnlyValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must be one of the defined enum values\"]";
*err = msg.str();
return false;
}
			}
		

		}
	

	return true;
}






} // namespace

