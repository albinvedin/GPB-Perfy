// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "validate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace validate {
class FieldRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FieldRules>
     _instance;
  const ::validate::FloatRules* float__;
  const ::validate::DoubleRules* double__;
  const ::validate::Int32Rules* int32_;
  const ::validate::Int64Rules* int64_;
  const ::validate::UInt32Rules* uint32_;
  const ::validate::UInt64Rules* uint64_;
  const ::validate::SInt32Rules* sint32_;
  const ::validate::SInt64Rules* sint64_;
  const ::validate::Fixed32Rules* fixed32_;
  const ::validate::Fixed64Rules* fixed64_;
  const ::validate::SFixed32Rules* sfixed32_;
  const ::validate::SFixed64Rules* sfixed64_;
  const ::validate::BoolRules* bool__;
  const ::validate::StringRules* string_;
  const ::validate::BytesRules* bytes_;
  const ::validate::EnumRules* enum__;
  const ::validate::MessageRules* message_;
  const ::validate::RepeatedRules* repeated_;
  const ::validate::MapRules* map_;
  const ::validate::AnyRules* any_;
  const ::validate::DurationRules* duration_;
  const ::validate::TimestampRules* timestamp_;
} _FieldRules_default_instance_;
class FloatRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FloatRules>
     _instance;
} _FloatRules_default_instance_;
class DoubleRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoubleRules>
     _instance;
} _DoubleRules_default_instance_;
class Int32RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Int32Rules>
     _instance;
} _Int32Rules_default_instance_;
class Int64RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Int64Rules>
     _instance;
} _Int64Rules_default_instance_;
class UInt32RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UInt32Rules>
     _instance;
} _UInt32Rules_default_instance_;
class UInt64RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UInt64Rules>
     _instance;
} _UInt64Rules_default_instance_;
class SInt32RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SInt32Rules>
     _instance;
} _SInt32Rules_default_instance_;
class SInt64RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SInt64Rules>
     _instance;
} _SInt64Rules_default_instance_;
class Fixed32RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Fixed32Rules>
     _instance;
} _Fixed32Rules_default_instance_;
class Fixed64RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Fixed64Rules>
     _instance;
} _Fixed64Rules_default_instance_;
class SFixed32RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SFixed32Rules>
     _instance;
} _SFixed32Rules_default_instance_;
class SFixed64RulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SFixed64Rules>
     _instance;
} _SFixed64Rules_default_instance_;
class BoolRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BoolRules>
     _instance;
} _BoolRules_default_instance_;
class StringRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StringRules>
     _instance;
  bool email_;
  bool hostname_;
  bool ip_;
  bool ipv4_;
  bool ipv6_;
  bool uri_;
  bool uri_ref_;
} _StringRules_default_instance_;
class BytesRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BytesRules>
     _instance;
  bool ip_;
  bool ipv4_;
  bool ipv6_;
} _BytesRules_default_instance_;
class EnumRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EnumRules>
     _instance;
} _EnumRules_default_instance_;
class MessageRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MessageRules>
     _instance;
} _MessageRules_default_instance_;
class RepeatedRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RepeatedRules>
     _instance;
} _RepeatedRules_default_instance_;
class MapRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MapRules>
     _instance;
} _MapRules_default_instance_;
class AnyRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AnyRules>
     _instance;
} _AnyRules_default_instance_;
class DurationRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DurationRules>
     _instance;
} _DurationRules_default_instance_;
class TimestampRulesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimestampRules>
     _instance;
} _TimestampRules_default_instance_;

namespace protobuf_validate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[23];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldRules, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldRules, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(FieldRulesDefaultTypeInternal, float__),
  offsetof(FieldRulesDefaultTypeInternal, double__),
  offsetof(FieldRulesDefaultTypeInternal, int32_),
  offsetof(FieldRulesDefaultTypeInternal, int64_),
  offsetof(FieldRulesDefaultTypeInternal, uint32_),
  offsetof(FieldRulesDefaultTypeInternal, uint64_),
  offsetof(FieldRulesDefaultTypeInternal, sint32_),
  offsetof(FieldRulesDefaultTypeInternal, sint64_),
  offsetof(FieldRulesDefaultTypeInternal, fixed32_),
  offsetof(FieldRulesDefaultTypeInternal, fixed64_),
  offsetof(FieldRulesDefaultTypeInternal, sfixed32_),
  offsetof(FieldRulesDefaultTypeInternal, sfixed64_),
  offsetof(FieldRulesDefaultTypeInternal, bool__),
  offsetof(FieldRulesDefaultTypeInternal, string_),
  offsetof(FieldRulesDefaultTypeInternal, bytes_),
  offsetof(FieldRulesDefaultTypeInternal, enum__),
  offsetof(FieldRulesDefaultTypeInternal, message_),
  offsetof(FieldRulesDefaultTypeInternal, repeated_),
  offsetof(FieldRulesDefaultTypeInternal, map_),
  offsetof(FieldRulesDefaultTypeInternal, any_),
  offsetof(FieldRulesDefaultTypeInternal, duration_),
  offsetof(FieldRulesDefaultTypeInternal, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldRules, type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatRules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleRules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed32Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fixed64Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed32Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SFixed64Rules, not_in_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolRules, const__),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, min_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, max_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, len_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, min_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, max_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, contains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, not_in_),
  offsetof(StringRulesDefaultTypeInternal, email_),
  offsetof(StringRulesDefaultTypeInternal, hostname_),
  offsetof(StringRulesDefaultTypeInternal, ip_),
  offsetof(StringRulesDefaultTypeInternal, ipv4_),
  offsetof(StringRulesDefaultTypeInternal, ipv6_),
  offsetof(StringRulesDefaultTypeInternal, uri_),
  offsetof(StringRulesDefaultTypeInternal, uri_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringRules, well_known_),
  0,
  9,
  5,
  6,
  10,
  7,
  8,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, min_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, max_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, contains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, not_in_),
  offsetof(BytesRulesDefaultTypeInternal, ip_),
  offsetof(BytesRulesDefaultTypeInternal, ipv4_),
  offsetof(BytesRulesDefaultTypeInternal, ipv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesRules, well_known_),
  0,
  7,
  5,
  6,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumRules, defined_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumRules, not_in_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRules, skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRules, required_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedRules, min_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedRules, max_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedRules, unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedRules, items_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, min_pairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, max_pairs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, no_sparse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRules, values_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRules, required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyRules, not_in_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationRules, not_in_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, const__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, lte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, gte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, lt_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, gt_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampRules, within_),
  6,
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(FieldRules)},
  { 50, 62, sizeof(FloatRules)},
  { 69, 81, sizeof(DoubleRules)},
  { 88, 100, sizeof(Int32Rules)},
  { 107, 119, sizeof(Int64Rules)},
  { 126, 138, sizeof(UInt32Rules)},
  { 145, 157, sizeof(UInt64Rules)},
  { 164, 176, sizeof(SInt32Rules)},
  { 183, 195, sizeof(SInt64Rules)},
  { 202, 214, sizeof(Fixed32Rules)},
  { 221, 233, sizeof(Fixed64Rules)},
  { 240, 252, sizeof(SFixed32Rules)},
  { 259, 271, sizeof(SFixed64Rules)},
  { 278, 284, sizeof(BoolRules)},
  { 285, 311, sizeof(StringRules)},
  { 331, 350, sizeof(BytesRules)},
  { 363, 372, sizeof(EnumRules)},
  { 376, 383, sizeof(MessageRules)},
  { 385, 394, sizeof(RepeatedRules)},
  { 398, 408, sizeof(MapRules)},
  { 413, 421, sizeof(AnyRules)},
  { 424, 437, sizeof(DurationRules)},
  { 445, 459, sizeof(TimestampRules)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FloatRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoubleRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Int32Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Int64Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt32Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt64Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SInt32Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SInt64Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Fixed32Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Fixed64Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SFixed32Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SFixed64Rules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoolRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StringRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BytesRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnumRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RepeatedRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnyRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DurationRules_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimestampRules_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "validate.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _FieldRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FieldRules_default_instance_);_FloatRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FloatRules_default_instance_);_DoubleRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoubleRules_default_instance_);_Int32Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Int32Rules_default_instance_);_Int64Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Int64Rules_default_instance_);_UInt32Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UInt32Rules_default_instance_);_UInt64Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UInt64Rules_default_instance_);_SInt32Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SInt32Rules_default_instance_);_SInt64Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SInt64Rules_default_instance_);_Fixed32Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Fixed32Rules_default_instance_);_Fixed64Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Fixed64Rules_default_instance_);_SFixed32Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SFixed32Rules_default_instance_);_SFixed64Rules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SFixed64Rules_default_instance_);_BoolRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BoolRules_default_instance_);_StringRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StringRules_default_instance_);_BytesRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BytesRules_default_instance_);_EnumRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EnumRules_default_instance_);_MessageRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MessageRules_default_instance_);_RepeatedRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RepeatedRules_default_instance_);_MapRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MapRules_default_instance_);_AnyRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AnyRules_default_instance_);_DurationRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DurationRules_default_instance_);_TimestampRules_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimestampRules_default_instance_);::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::MessageOptions::internal_default_instance(),
    919191, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::OneofOptions::internal_default_instance(),
    919191, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::google::protobuf::FieldOptions::internal_default_instance(),
    919191, 11, false, false,
    ::validate::FieldRules::internal_default_instance());
  _FieldRules_default_instance_.float__ = const_cast< ::validate::FloatRules*>(
      ::validate::FloatRules::internal_default_instance());
  _FieldRules_default_instance_.double__ = const_cast< ::validate::DoubleRules*>(
      ::validate::DoubleRules::internal_default_instance());
  _FieldRules_default_instance_.int32_ = const_cast< ::validate::Int32Rules*>(
      ::validate::Int32Rules::internal_default_instance());
  _FieldRules_default_instance_.int64_ = const_cast< ::validate::Int64Rules*>(
      ::validate::Int64Rules::internal_default_instance());
  _FieldRules_default_instance_.uint32_ = const_cast< ::validate::UInt32Rules*>(
      ::validate::UInt32Rules::internal_default_instance());
  _FieldRules_default_instance_.uint64_ = const_cast< ::validate::UInt64Rules*>(
      ::validate::UInt64Rules::internal_default_instance());
  _FieldRules_default_instance_.sint32_ = const_cast< ::validate::SInt32Rules*>(
      ::validate::SInt32Rules::internal_default_instance());
  _FieldRules_default_instance_.sint64_ = const_cast< ::validate::SInt64Rules*>(
      ::validate::SInt64Rules::internal_default_instance());
  _FieldRules_default_instance_.fixed32_ = const_cast< ::validate::Fixed32Rules*>(
      ::validate::Fixed32Rules::internal_default_instance());
  _FieldRules_default_instance_.fixed64_ = const_cast< ::validate::Fixed64Rules*>(
      ::validate::Fixed64Rules::internal_default_instance());
  _FieldRules_default_instance_.sfixed32_ = const_cast< ::validate::SFixed32Rules*>(
      ::validate::SFixed32Rules::internal_default_instance());
  _FieldRules_default_instance_.sfixed64_ = const_cast< ::validate::SFixed64Rules*>(
      ::validate::SFixed64Rules::internal_default_instance());
  _FieldRules_default_instance_.bool__ = const_cast< ::validate::BoolRules*>(
      ::validate::BoolRules::internal_default_instance());
  _FieldRules_default_instance_.string_ = const_cast< ::validate::StringRules*>(
      ::validate::StringRules::internal_default_instance());
  _FieldRules_default_instance_.bytes_ = const_cast< ::validate::BytesRules*>(
      ::validate::BytesRules::internal_default_instance());
  _FieldRules_default_instance_.enum__ = const_cast< ::validate::EnumRules*>(
      ::validate::EnumRules::internal_default_instance());
  _FieldRules_default_instance_.message_ = const_cast< ::validate::MessageRules*>(
      ::validate::MessageRules::internal_default_instance());
  _FieldRules_default_instance_.repeated_ = const_cast< ::validate::RepeatedRules*>(
      ::validate::RepeatedRules::internal_default_instance());
  _FieldRules_default_instance_.map_ = const_cast< ::validate::MapRules*>(
      ::validate::MapRules::internal_default_instance());
  _FieldRules_default_instance_.any_ = const_cast< ::validate::AnyRules*>(
      ::validate::AnyRules::internal_default_instance());
  _FieldRules_default_instance_.duration_ = const_cast< ::validate::DurationRules*>(
      ::validate::DurationRules::internal_default_instance());
  _FieldRules_default_instance_.timestamp_ = const_cast< ::validate::TimestampRules*>(
      ::validate::TimestampRules::internal_default_instance());
  _StringRules_default_instance_.email_ = false;
  _StringRules_default_instance_.hostname_ = false;
  _StringRules_default_instance_.ip_ = false;
  _StringRules_default_instance_.ipv4_ = false;
  _StringRules_default_instance_.ipv6_ = false;
  _StringRules_default_instance_.uri_ = false;
  _StringRules_default_instance_.uri_ref_ = false;
  _BytesRules_default_instance_.ip_ = false;
  _BytesRules_default_instance_.ipv4_ = false;
  _BytesRules_default_instance_.ipv6_ = false;
  _RepeatedRules_default_instance_._instance.get_mutable()->items_ = const_cast< ::validate::FieldRules*>(
      ::validate::FieldRules::internal_default_instance());
  _MapRules_default_instance_._instance.get_mutable()->keys_ = const_cast< ::validate::FieldRules*>(
      ::validate::FieldRules::internal_default_instance());
  _MapRules_default_instance_._instance.get_mutable()->values_ = const_cast< ::validate::FieldRules*>(
      ::validate::FieldRules::internal_default_instance());
  _DurationRules_default_instance_._instance.get_mutable()->const__ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _DurationRules_default_instance_._instance.get_mutable()->lt_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _DurationRules_default_instance_._instance.get_mutable()->lte_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _DurationRules_default_instance_._instance.get_mutable()->gt_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _DurationRules_default_instance_._instance.get_mutable()->gte_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _TimestampRules_default_instance_._instance.get_mutable()->const__ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TimestampRules_default_instance_._instance.get_mutable()->lt_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TimestampRules_default_instance_._instance.get_mutable()->lte_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TimestampRules_default_instance_._instance.get_mutable()->gt_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TimestampRules_default_instance_._instance.get_mutable()->gte_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TimestampRules_default_instance_._instance.get_mutable()->within_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016validate.proto\022\010validate\032 google/proto"
      "buf/descriptor.proto\032\036google/protobuf/du"
      "ration.proto\032\037google/protobuf/timestamp."
      "proto\"\232\007\n\nFieldRules\022%\n\005float\030\001 \001(\0132\024.va"
      "lidate.FloatRulesH\000\022\'\n\006double\030\002 \001(\0132\025.va"
      "lidate.DoubleRulesH\000\022%\n\005int32\030\003 \001(\0132\024.va"
      "lidate.Int32RulesH\000\022%\n\005int64\030\004 \001(\0132\024.val"
      "idate.Int64RulesH\000\022\'\n\006uint32\030\005 \001(\0132\025.val"
      "idate.UInt32RulesH\000\022\'\n\006uint64\030\006 \001(\0132\025.va"
      "lidate.UInt64RulesH\000\022\'\n\006sint32\030\007 \001(\0132\025.v"
      "alidate.SInt32RulesH\000\022\'\n\006sint64\030\010 \001(\0132\025."
      "validate.SInt64RulesH\000\022)\n\007fixed32\030\t \001(\0132"
      "\026.validate.Fixed32RulesH\000\022)\n\007fixed64\030\n \001"
      "(\0132\026.validate.Fixed64RulesH\000\022+\n\010sfixed32"
      "\030\013 \001(\0132\027.validate.SFixed32RulesH\000\022+\n\010sfi"
      "xed64\030\014 \001(\0132\027.validate.SFixed64RulesH\000\022#"
      "\n\004bool\030\r \001(\0132\023.validate.BoolRulesH\000\022\'\n\006s"
      "tring\030\016 \001(\0132\025.validate.StringRulesH\000\022%\n\005"
      "bytes\030\017 \001(\0132\024.validate.BytesRulesH\000\022#\n\004e"
      "num\030\020 \001(\0132\023.validate.EnumRulesH\000\022)\n\007mess"
      "age\030\021 \001(\0132\026.validate.MessageRulesH\000\022+\n\010r"
      "epeated\030\022 \001(\0132\027.validate.RepeatedRulesH\000"
      "\022!\n\003map\030\023 \001(\0132\022.validate.MapRulesH\000\022!\n\003a"
      "ny\030\024 \001(\0132\022.validate.AnyRulesH\000\022+\n\010durati"
      "on\030\025 \001(\0132\027.validate.DurationRulesH\000\022-\n\tt"
      "imestamp\030\026 \001(\0132\030.validate.TimestampRules"
      "H\000B\006\n\004type\"i\n\nFloatRules\022\r\n\005const\030\001 \001(\002\022"
      "\n\n\002lt\030\002 \001(\002\022\013\n\003lte\030\003 \001(\002\022\n\n\002gt\030\004 \001(\002\022\013\n\003"
      "gte\030\005 \001(\002\022\n\n\002in\030\006 \003(\002\022\016\n\006not_in\030\007 \003(\002\"j\n"
      "\013DoubleRules\022\r\n\005const\030\001 \001(\001\022\n\n\002lt\030\002 \001(\001\022"
      "\013\n\003lte\030\003 \001(\001\022\n\n\002gt\030\004 \001(\001\022\013\n\003gte\030\005 \001(\001\022\n\n"
      "\002in\030\006 \003(\001\022\016\n\006not_in\030\007 \003(\001\"i\n\nInt32Rules\022"
      "\r\n\005const\030\001 \001(\005\022\n\n\002lt\030\002 \001(\005\022\013\n\003lte\030\003 \001(\005\022"
      "\n\n\002gt\030\004 \001(\005\022\013\n\003gte\030\005 \001(\005\022\n\n\002in\030\006 \003(\005\022\016\n\006"
      "not_in\030\007 \003(\005\"i\n\nInt64Rules\022\r\n\005const\030\001 \001("
      "\003\022\n\n\002lt\030\002 \001(\003\022\013\n\003lte\030\003 \001(\003\022\n\n\002gt\030\004 \001(\003\022\013"
      "\n\003gte\030\005 \001(\003\022\n\n\002in\030\006 \003(\003\022\016\n\006not_in\030\007 \003(\003\""
      "j\n\013UInt32Rules\022\r\n\005const\030\001 \001(\r\022\n\n\002lt\030\002 \001("
      "\r\022\013\n\003lte\030\003 \001(\r\022\n\n\002gt\030\004 \001(\r\022\013\n\003gte\030\005 \001(\r\022"
      "\n\n\002in\030\006 \003(\r\022\016\n\006not_in\030\007 \003(\r\"j\n\013UInt64Rul"
      "es\022\r\n\005const\030\001 \001(\004\022\n\n\002lt\030\002 \001(\004\022\013\n\003lte\030\003 \001"
      "(\004\022\n\n\002gt\030\004 \001(\004\022\013\n\003gte\030\005 \001(\004\022\n\n\002in\030\006 \003(\004\022"
      "\016\n\006not_in\030\007 \003(\004\"j\n\013SInt32Rules\022\r\n\005const\030"
      "\001 \001(\021\022\n\n\002lt\030\002 \001(\021\022\013\n\003lte\030\003 \001(\021\022\n\n\002gt\030\004 \001"
      "(\021\022\013\n\003gte\030\005 \001(\021\022\n\n\002in\030\006 \003(\021\022\016\n\006not_in\030\007 "
      "\003(\021\"j\n\013SInt64Rules\022\r\n\005const\030\001 \001(\022\022\n\n\002lt\030"
      "\002 \001(\022\022\013\n\003lte\030\003 \001(\022\022\n\n\002gt\030\004 \001(\022\022\013\n\003gte\030\005 "
      "\001(\022\022\n\n\002in\030\006 \003(\022\022\016\n\006not_in\030\007 \003(\022\"k\n\014Fixed"
      "32Rules\022\r\n\005const\030\001 \001(\007\022\n\n\002lt\030\002 \001(\007\022\013\n\003lt"
      "e\030\003 \001(\007\022\n\n\002gt\030\004 \001(\007\022\013\n\003gte\030\005 \001(\007\022\n\n\002in\030\006"
      " \003(\007\022\016\n\006not_in\030\007 \003(\007\"k\n\014Fixed64Rules\022\r\n\005"
      "const\030\001 \001(\006\022\n\n\002lt\030\002 \001(\006\022\013\n\003lte\030\003 \001(\006\022\n\n\002"
      "gt\030\004 \001(\006\022\013\n\003gte\030\005 \001(\006\022\n\n\002in\030\006 \003(\006\022\016\n\006not"
      "_in\030\007 \003(\006\"l\n\rSFixed32Rules\022\r\n\005const\030\001 \001("
      "\017\022\n\n\002lt\030\002 \001(\017\022\013\n\003lte\030\003 \001(\017\022\n\n\002gt\030\004 \001(\017\022\013"
      "\n\003gte\030\005 \001(\017\022\n\n\002in\030\006 \003(\017\022\016\n\006not_in\030\007 \003(\017\""
      "l\n\rSFixed64Rules\022\r\n\005const\030\001 \001(\020\022\n\n\002lt\030\002 "
      "\001(\020\022\013\n\003lte\030\003 \001(\020\022\n\n\002gt\030\004 \001(\020\022\013\n\003gte\030\005 \001("
      "\020\022\n\n\002in\030\006 \003(\020\022\016\n\006not_in\030\007 \003(\020\"\032\n\tBoolRul"
      "es\022\r\n\005const\030\001 \001(\010\"\346\002\n\013StringRules\022\r\n\005con"
      "st\030\001 \001(\t\022\013\n\003len\030\023 \001(\004\022\017\n\007min_len\030\002 \001(\004\022\017"
      "\n\007max_len\030\003 \001(\004\022\021\n\tlen_bytes\030\024 \001(\004\022\021\n\tmi"
      "n_bytes\030\004 \001(\004\022\021\n\tmax_bytes\030\005 \001(\004\022\017\n\007patt"
      "ern\030\006 \001(\t\022\016\n\006prefix\030\007 \001(\t\022\016\n\006suffix\030\010 \001("
      "\t\022\020\n\010contains\030\t \001(\t\022\n\n\002in\030\n \003(\t\022\016\n\006not_i"
      "n\030\013 \003(\t\022\017\n\005email\030\014 \001(\010H\000\022\022\n\010hostname\030\r \001"
      "(\010H\000\022\014\n\002ip\030\016 \001(\010H\000\022\016\n\004ipv4\030\017 \001(\010H\000\022\016\n\004ip"
      "v6\030\020 \001(\010H\000\022\r\n\003uri\030\021 \001(\010H\000\022\021\n\007uri_ref\030\022 \001"
      "(\010H\000B\014\n\nwell_known\"\345\001\n\nBytesRules\022\r\n\005con"
      "st\030\001 \001(\014\022\013\n\003len\030\r \001(\004\022\017\n\007min_len\030\002 \001(\004\022\017"
      "\n\007max_len\030\003 \001(\004\022\017\n\007pattern\030\004 \001(\t\022\016\n\006pref"
      "ix\030\005 \001(\014\022\016\n\006suffix\030\006 \001(\014\022\020\n\010contains\030\007 \001"
      "(\014\022\n\n\002in\030\010 \003(\014\022\016\n\006not_in\030\t \003(\014\022\014\n\002ip\030\n \001"
      "(\010H\000\022\016\n\004ipv4\030\013 \001(\010H\000\022\016\n\004ipv6\030\014 \001(\010H\000B\014\n\n"
      "well_known\"L\n\tEnumRules\022\r\n\005const\030\001 \001(\005\022\024"
      "\n\014defined_only\030\002 \001(\010\022\n\n\002in\030\003 \003(\005\022\016\n\006not_"
      "in\030\004 \003(\005\".\n\014MessageRules\022\014\n\004skip\030\001 \001(\010\022\020"
      "\n\010required\030\002 \001(\010\"j\n\rRepeatedRules\022\021\n\tmin"
      "_items\030\001 \001(\004\022\021\n\tmax_items\030\002 \001(\004\022\016\n\006uniqu"
      "e\030\003 \001(\010\022#\n\005items\030\004 \001(\0132\024.validate.FieldR"
      "ules\"\215\001\n\010MapRules\022\021\n\tmin_pairs\030\001 \001(\004\022\021\n\t"
      "max_pairs\030\002 \001(\004\022\021\n\tno_sparse\030\003 \001(\010\022\"\n\004ke"
      "ys\030\004 \001(\0132\024.validate.FieldRules\022$\n\006values"
      "\030\005 \001(\0132\024.validate.FieldRules\"8\n\010AnyRules"
      "\022\020\n\010required\030\001 \001(\010\022\n\n\002in\030\002 \003(\t\022\016\n\006not_in"
      "\030\003 \003(\t\"\273\002\n\rDurationRules\022\020\n\010required\030\001 \001"
      "(\010\022(\n\005const\030\002 \001(\0132\031.google.protobuf.Dura"
      "tion\022%\n\002lt\030\003 \001(\0132\031.google.protobuf.Durat"
      "ion\022&\n\003lte\030\004 \001(\0132\031.google.protobuf.Durat"
      "ion\022%\n\002gt\030\005 \001(\0132\031.google.protobuf.Durati"
      "on\022&\n\003gte\030\006 \001(\0132\031.google.protobuf.Durati"
      "on\022%\n\002in\030\007 \003(\0132\031.google.protobuf.Duratio"
      "n\022)\n\006not_in\030\010 \003(\0132\031.google.protobuf.Dura"
      "tion\"\272\002\n\016TimestampRules\022\020\n\010required\030\001 \001("
      "\010\022)\n\005const\030\002 \001(\0132\032.google.protobuf.Times"
      "tamp\022&\n\002lt\030\003 \001(\0132\032.google.protobuf.Times"
      "tamp\022\'\n\003lte\030\004 \001(\0132\032.google.protobuf.Time"
      "stamp\022&\n\002gt\030\005 \001(\0132\032.google.protobuf.Time"
      "stamp\022\'\n\003gte\030\006 \001(\0132\032.google.protobuf.Tim"
      "estamp\022\016\n\006lt_now\030\007 \001(\010\022\016\n\006gt_now\030\010 \001(\010\022)"
      "\n\006within\030\t \001(\0132\031.google.protobuf.Duratio"
      "n:3\n\010disabled\022\037.google.protobuf.MessageO"
      "ptions\030\227\2158 \001(\010:1\n\010required\022\035.google.prot"
      "obuf.OneofOptions\030\227\2158 \001(\010:D\n\005rules\022\035.goo"
      "gle.protobuf.FieldOptions\030\227\2158 \001(\0132\024.vali"
      "date.FieldRulesBP\n\032io.envoyproxy.pgv.val"
      "idateZ2github.com/envoyproxy/protoc-gen-"
      "validate/validate"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "validate.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_validate_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldRules::kFloatFieldNumber;
const int FieldRules::kDoubleFieldNumber;
const int FieldRules::kInt32FieldNumber;
const int FieldRules::kInt64FieldNumber;
const int FieldRules::kUint32FieldNumber;
const int FieldRules::kUint64FieldNumber;
const int FieldRules::kSint32FieldNumber;
const int FieldRules::kSint64FieldNumber;
const int FieldRules::kFixed32FieldNumber;
const int FieldRules::kFixed64FieldNumber;
const int FieldRules::kSfixed32FieldNumber;
const int FieldRules::kSfixed64FieldNumber;
const int FieldRules::kBoolFieldNumber;
const int FieldRules::kStringFieldNumber;
const int FieldRules::kBytesFieldNumber;
const int FieldRules::kEnumFieldNumber;
const int FieldRules::kMessageFieldNumber;
const int FieldRules::kRepeatedFieldNumber;
const int FieldRules::kMapFieldNumber;
const int FieldRules::kAnyFieldNumber;
const int FieldRules::kDurationFieldNumber;
const int FieldRules::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldRules::FieldRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.FieldRules)
}
FieldRules::FieldRules(const FieldRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kFloat: {
      mutable_float_()->::validate::FloatRules::MergeFrom(from.float_());
      break;
    }
    case kDouble: {
      mutable_double_()->::validate::DoubleRules::MergeFrom(from.double_());
      break;
    }
    case kInt32: {
      mutable_int32()->::validate::Int32Rules::MergeFrom(from.int32());
      break;
    }
    case kInt64: {
      mutable_int64()->::validate::Int64Rules::MergeFrom(from.int64());
      break;
    }
    case kUint32: {
      mutable_uint32()->::validate::UInt32Rules::MergeFrom(from.uint32());
      break;
    }
    case kUint64: {
      mutable_uint64()->::validate::UInt64Rules::MergeFrom(from.uint64());
      break;
    }
    case kSint32: {
      mutable_sint32()->::validate::SInt32Rules::MergeFrom(from.sint32());
      break;
    }
    case kSint64: {
      mutable_sint64()->::validate::SInt64Rules::MergeFrom(from.sint64());
      break;
    }
    case kFixed32: {
      mutable_fixed32()->::validate::Fixed32Rules::MergeFrom(from.fixed32());
      break;
    }
    case kFixed64: {
      mutable_fixed64()->::validate::Fixed64Rules::MergeFrom(from.fixed64());
      break;
    }
    case kSfixed32: {
      mutable_sfixed32()->::validate::SFixed32Rules::MergeFrom(from.sfixed32());
      break;
    }
    case kSfixed64: {
      mutable_sfixed64()->::validate::SFixed64Rules::MergeFrom(from.sfixed64());
      break;
    }
    case kBool: {
      mutable_bool_()->::validate::BoolRules::MergeFrom(from.bool_());
      break;
    }
    case kString: {
      mutable_string()->::validate::StringRules::MergeFrom(from.string());
      break;
    }
    case kBytes: {
      mutable_bytes()->::validate::BytesRules::MergeFrom(from.bytes());
      break;
    }
    case kEnum: {
      mutable_enum_()->::validate::EnumRules::MergeFrom(from.enum_());
      break;
    }
    case kMessage: {
      mutable_message()->::validate::MessageRules::MergeFrom(from.message());
      break;
    }
    case kRepeated: {
      mutable_repeated()->::validate::RepeatedRules::MergeFrom(from.repeated());
      break;
    }
    case kMap: {
      mutable_map()->::validate::MapRules::MergeFrom(from.map());
      break;
    }
    case kAny: {
      mutable_any()->::validate::AnyRules::MergeFrom(from.any());
      break;
    }
    case kDuration: {
      mutable_duration()->::validate::DurationRules::MergeFrom(from.duration());
      break;
    }
    case kTimestamp: {
      mutable_timestamp()->::validate::TimestampRules::MergeFrom(from.timestamp());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validate.FieldRules)
}

void FieldRules::SharedCtor() {
  _cached_size_ = 0;
  clear_has_type();
}

FieldRules::~FieldRules() {
  // @@protoc_insertion_point(destructor:validate.FieldRules)
  SharedDtor();
}

void FieldRules::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void FieldRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldRules& FieldRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldRules* FieldRules::New(::google::protobuf::Arena* arena) const {
  FieldRules* n = new FieldRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldRules::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:validate.FieldRules)
  switch (type_case()) {
    case kFloat: {
      delete type_.float__;
      break;
    }
    case kDouble: {
      delete type_.double__;
      break;
    }
    case kInt32: {
      delete type_.int32_;
      break;
    }
    case kInt64: {
      delete type_.int64_;
      break;
    }
    case kUint32: {
      delete type_.uint32_;
      break;
    }
    case kUint64: {
      delete type_.uint64_;
      break;
    }
    case kSint32: {
      delete type_.sint32_;
      break;
    }
    case kSint64: {
      delete type_.sint64_;
      break;
    }
    case kFixed32: {
      delete type_.fixed32_;
      break;
    }
    case kFixed64: {
      delete type_.fixed64_;
      break;
    }
    case kSfixed32: {
      delete type_.sfixed32_;
      break;
    }
    case kSfixed64: {
      delete type_.sfixed64_;
      break;
    }
    case kBool: {
      delete type_.bool__;
      break;
    }
    case kString: {
      delete type_.string_;
      break;
    }
    case kBytes: {
      delete type_.bytes_;
      break;
    }
    case kEnum: {
      delete type_.enum__;
      break;
    }
    case kMessage: {
      delete type_.message_;
      break;
    }
    case kRepeated: {
      delete type_.repeated_;
      break;
    }
    case kMap: {
      delete type_.map_;
      break;
    }
    case kAny: {
      delete type_.any_;
      break;
    }
    case kDuration: {
      delete type_.duration_;
      break;
    }
    case kTimestamp: {
      delete type_.timestamp_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void FieldRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.FieldRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FieldRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.FieldRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .validate.FloatRules float = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.DoubleRules double = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.Int32Rules int32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.Int64Rules int64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.UInt32Rules uint32 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.UInt64Rules uint64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.SInt32Rules sint32 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sint32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.SInt64Rules sint64 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sint64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.Fixed32Rules fixed32 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.Fixed64Rules fixed64 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.SFixed32Rules sfixed32 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sfixed32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.SFixed64Rules sfixed64 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sfixed64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.BoolRules bool = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bool_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.StringRules string = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.BytesRules bytes = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.EnumRules enum = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enum_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.MessageRules message = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.RepeatedRules repeated = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.MapRules map = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.AnyRules any = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.DurationRules duration = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.TimestampRules timestamp = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.FieldRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.FieldRules)
  return false;
#undef DO_
}

void FieldRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.FieldRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kFloat:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *type_.float__, output);
      break;
    case kDouble:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *type_.double__, output);
      break;
    case kInt32:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *type_.int32_, output);
      break;
    case kInt64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *type_.int64_, output);
      break;
    case kUint32:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *type_.uint32_, output);
      break;
    case kUint64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *type_.uint64_, output);
      break;
    case kSint32:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *type_.sint32_, output);
      break;
    case kSint64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *type_.sint64_, output);
      break;
    case kFixed32:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *type_.fixed32_, output);
      break;
    case kFixed64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *type_.fixed64_, output);
      break;
    case kSfixed32:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *type_.sfixed32_, output);
      break;
    case kSfixed64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *type_.sfixed64_, output);
      break;
    case kBool:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *type_.bool__, output);
      break;
    case kString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, *type_.string_, output);
      break;
    case kBytes:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, *type_.bytes_, output);
      break;
    case kEnum:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, *type_.enum__, output);
      break;
    case kMessage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, *type_.message_, output);
      break;
    case kRepeated:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, *type_.repeated_, output);
      break;
    case kMap:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, *type_.map_, output);
      break;
    case kAny:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *type_.any_, output);
      break;
    case kDuration:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, *type_.duration_, output);
      break;
    case kTimestamp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, *type_.timestamp_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.FieldRules)
}

::google::protobuf::uint8* FieldRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.FieldRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kFloat:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *type_.float__, deterministic, target);
      break;
    case kDouble:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *type_.double__, deterministic, target);
      break;
    case kInt32:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *type_.int32_, deterministic, target);
      break;
    case kInt64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *type_.int64_, deterministic, target);
      break;
    case kUint32:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *type_.uint32_, deterministic, target);
      break;
    case kUint64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *type_.uint64_, deterministic, target);
      break;
    case kSint32:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *type_.sint32_, deterministic, target);
      break;
    case kSint64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *type_.sint64_, deterministic, target);
      break;
    case kFixed32:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *type_.fixed32_, deterministic, target);
      break;
    case kFixed64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *type_.fixed64_, deterministic, target);
      break;
    case kSfixed32:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *type_.sfixed32_, deterministic, target);
      break;
    case kSfixed64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *type_.sfixed64_, deterministic, target);
      break;
    case kBool:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *type_.bool__, deterministic, target);
      break;
    case kString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          14, *type_.string_, deterministic, target);
      break;
    case kBytes:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          15, *type_.bytes_, deterministic, target);
      break;
    case kEnum:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          16, *type_.enum__, deterministic, target);
      break;
    case kMessage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          17, *type_.message_, deterministic, target);
      break;
    case kRepeated:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          18, *type_.repeated_, deterministic, target);
      break;
    case kMap:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          19, *type_.map_, deterministic, target);
      break;
    case kAny:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          20, *type_.any_, deterministic, target);
      break;
    case kDuration:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          21, *type_.duration_, deterministic, target);
      break;
    case kTimestamp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          22, *type_.timestamp_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.FieldRules)
  return target;
}

size_t FieldRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.FieldRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (type_case()) {
    // optional .validate.FloatRules float = 1;
    case kFloat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.float__);
      break;
    }
    // optional .validate.DoubleRules double = 2;
    case kDouble: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.double__);
      break;
    }
    // optional .validate.Int32Rules int32 = 3;
    case kInt32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.int32_);
      break;
    }
    // optional .validate.Int64Rules int64 = 4;
    case kInt64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.int64_);
      break;
    }
    // optional .validate.UInt32Rules uint32 = 5;
    case kUint32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.uint32_);
      break;
    }
    // optional .validate.UInt64Rules uint64 = 6;
    case kUint64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.uint64_);
      break;
    }
    // optional .validate.SInt32Rules sint32 = 7;
    case kSint32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.sint32_);
      break;
    }
    // optional .validate.SInt64Rules sint64 = 8;
    case kSint64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.sint64_);
      break;
    }
    // optional .validate.Fixed32Rules fixed32 = 9;
    case kFixed32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.fixed32_);
      break;
    }
    // optional .validate.Fixed64Rules fixed64 = 10;
    case kFixed64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.fixed64_);
      break;
    }
    // optional .validate.SFixed32Rules sfixed32 = 11;
    case kSfixed32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.sfixed32_);
      break;
    }
    // optional .validate.SFixed64Rules sfixed64 = 12;
    case kSfixed64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.sfixed64_);
      break;
    }
    // optional .validate.BoolRules bool = 13;
    case kBool: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.bool__);
      break;
    }
    // optional .validate.StringRules string = 14;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.string_);
      break;
    }
    // optional .validate.BytesRules bytes = 15;
    case kBytes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.bytes_);
      break;
    }
    // optional .validate.EnumRules enum = 16;
    case kEnum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.enum__);
      break;
    }
    // optional .validate.MessageRules message = 17;
    case kMessage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.message_);
      break;
    }
    // optional .validate.RepeatedRules repeated = 18;
    case kRepeated: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.repeated_);
      break;
    }
    // optional .validate.MapRules map = 19;
    case kMap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.map_);
      break;
    }
    // optional .validate.AnyRules any = 20;
    case kAny: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.any_);
      break;
    }
    // optional .validate.DurationRules duration = 21;
    case kDuration: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.duration_);
      break;
    }
    // optional .validate.TimestampRules timestamp = 22;
    case kTimestamp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.timestamp_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.FieldRules)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.FieldRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.FieldRules)
    MergeFrom(*source);
  }
}

void FieldRules::MergeFrom(const FieldRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.FieldRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kFloat: {
      mutable_float_()->::validate::FloatRules::MergeFrom(from.float_());
      break;
    }
    case kDouble: {
      mutable_double_()->::validate::DoubleRules::MergeFrom(from.double_());
      break;
    }
    case kInt32: {
      mutable_int32()->::validate::Int32Rules::MergeFrom(from.int32());
      break;
    }
    case kInt64: {
      mutable_int64()->::validate::Int64Rules::MergeFrom(from.int64());
      break;
    }
    case kUint32: {
      mutable_uint32()->::validate::UInt32Rules::MergeFrom(from.uint32());
      break;
    }
    case kUint64: {
      mutable_uint64()->::validate::UInt64Rules::MergeFrom(from.uint64());
      break;
    }
    case kSint32: {
      mutable_sint32()->::validate::SInt32Rules::MergeFrom(from.sint32());
      break;
    }
    case kSint64: {
      mutable_sint64()->::validate::SInt64Rules::MergeFrom(from.sint64());
      break;
    }
    case kFixed32: {
      mutable_fixed32()->::validate::Fixed32Rules::MergeFrom(from.fixed32());
      break;
    }
    case kFixed64: {
      mutable_fixed64()->::validate::Fixed64Rules::MergeFrom(from.fixed64());
      break;
    }
    case kSfixed32: {
      mutable_sfixed32()->::validate::SFixed32Rules::MergeFrom(from.sfixed32());
      break;
    }
    case kSfixed64: {
      mutable_sfixed64()->::validate::SFixed64Rules::MergeFrom(from.sfixed64());
      break;
    }
    case kBool: {
      mutable_bool_()->::validate::BoolRules::MergeFrom(from.bool_());
      break;
    }
    case kString: {
      mutable_string()->::validate::StringRules::MergeFrom(from.string());
      break;
    }
    case kBytes: {
      mutable_bytes()->::validate::BytesRules::MergeFrom(from.bytes());
      break;
    }
    case kEnum: {
      mutable_enum_()->::validate::EnumRules::MergeFrom(from.enum_());
      break;
    }
    case kMessage: {
      mutable_message()->::validate::MessageRules::MergeFrom(from.message());
      break;
    }
    case kRepeated: {
      mutable_repeated()->::validate::RepeatedRules::MergeFrom(from.repeated());
      break;
    }
    case kMap: {
      mutable_map()->::validate::MapRules::MergeFrom(from.map());
      break;
    }
    case kAny: {
      mutable_any()->::validate::AnyRules::MergeFrom(from.any());
      break;
    }
    case kDuration: {
      mutable_duration()->::validate::DurationRules::MergeFrom(from.duration());
      break;
    }
    case kTimestamp: {
      mutable_timestamp()->::validate::TimestampRules::MergeFrom(from.timestamp());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void FieldRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.FieldRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldRules::CopyFrom(const FieldRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.FieldRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldRules::IsInitialized() const {
  return true;
}

void FieldRules::Swap(FieldRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldRules::InternalSwap(FieldRules* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldRules

// optional .validate.FloatRules float = 1;
bool FieldRules::has_float_() const {
  return type_case() == kFloat;
}
void FieldRules::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
void FieldRules::clear_float_() {
  if (has_float_()) {
    delete type_.float__;
    clear_has_type();
  }
}
 const ::validate::FloatRules& FieldRules::float_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.float)
  return has_float_()
      ? *type_.float__
      : ::validate::FloatRules::default_instance();
}
::validate::FloatRules* FieldRules::mutable_float_() {
  if (!has_float_()) {
    clear_type();
    set_has_float_();
    type_.float__ = new ::validate::FloatRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.float)
  return type_.float__;
}
::validate::FloatRules* FieldRules::release_float_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.float)
  if (has_float_()) {
    clear_has_type();
    ::validate::FloatRules* temp = type_.float__;
    type_.float__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_float_(::validate::FloatRules* float_) {
  clear_type();
  if (float_) {
    set_has_float_();
    type_.float__ = float_;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.float)
}

// optional .validate.DoubleRules double = 2;
bool FieldRules::has_double_() const {
  return type_case() == kDouble;
}
void FieldRules::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
void FieldRules::clear_double_() {
  if (has_double_()) {
    delete type_.double__;
    clear_has_type();
  }
}
 const ::validate::DoubleRules& FieldRules::double_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.double)
  return has_double_()
      ? *type_.double__
      : ::validate::DoubleRules::default_instance();
}
::validate::DoubleRules* FieldRules::mutable_double_() {
  if (!has_double_()) {
    clear_type();
    set_has_double_();
    type_.double__ = new ::validate::DoubleRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.double)
  return type_.double__;
}
::validate::DoubleRules* FieldRules::release_double_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.double)
  if (has_double_()) {
    clear_has_type();
    ::validate::DoubleRules* temp = type_.double__;
    type_.double__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_double_(::validate::DoubleRules* double_) {
  clear_type();
  if (double_) {
    set_has_double_();
    type_.double__ = double_;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.double)
}

// optional .validate.Int32Rules int32 = 3;
bool FieldRules::has_int32() const {
  return type_case() == kInt32;
}
void FieldRules::set_has_int32() {
  _oneof_case_[0] = kInt32;
}
void FieldRules::clear_int32() {
  if (has_int32()) {
    delete type_.int32_;
    clear_has_type();
  }
}
 const ::validate::Int32Rules& FieldRules::int32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.int32)
  return has_int32()
      ? *type_.int32_
      : ::validate::Int32Rules::default_instance();
}
::validate::Int32Rules* FieldRules::mutable_int32() {
  if (!has_int32()) {
    clear_type();
    set_has_int32();
    type_.int32_ = new ::validate::Int32Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.int32)
  return type_.int32_;
}
::validate::Int32Rules* FieldRules::release_int32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.int32)
  if (has_int32()) {
    clear_has_type();
    ::validate::Int32Rules* temp = type_.int32_;
    type_.int32_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_int32(::validate::Int32Rules* int32) {
  clear_type();
  if (int32) {
    set_has_int32();
    type_.int32_ = int32;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.int32)
}

// optional .validate.Int64Rules int64 = 4;
bool FieldRules::has_int64() const {
  return type_case() == kInt64;
}
void FieldRules::set_has_int64() {
  _oneof_case_[0] = kInt64;
}
void FieldRules::clear_int64() {
  if (has_int64()) {
    delete type_.int64_;
    clear_has_type();
  }
}
 const ::validate::Int64Rules& FieldRules::int64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.int64)
  return has_int64()
      ? *type_.int64_
      : ::validate::Int64Rules::default_instance();
}
::validate::Int64Rules* FieldRules::mutable_int64() {
  if (!has_int64()) {
    clear_type();
    set_has_int64();
    type_.int64_ = new ::validate::Int64Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.int64)
  return type_.int64_;
}
::validate::Int64Rules* FieldRules::release_int64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.int64)
  if (has_int64()) {
    clear_has_type();
    ::validate::Int64Rules* temp = type_.int64_;
    type_.int64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_int64(::validate::Int64Rules* int64) {
  clear_type();
  if (int64) {
    set_has_int64();
    type_.int64_ = int64;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.int64)
}

// optional .validate.UInt32Rules uint32 = 5;
bool FieldRules::has_uint32() const {
  return type_case() == kUint32;
}
void FieldRules::set_has_uint32() {
  _oneof_case_[0] = kUint32;
}
void FieldRules::clear_uint32() {
  if (has_uint32()) {
    delete type_.uint32_;
    clear_has_type();
  }
}
 const ::validate::UInt32Rules& FieldRules::uint32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.uint32)
  return has_uint32()
      ? *type_.uint32_
      : ::validate::UInt32Rules::default_instance();
}
::validate::UInt32Rules* FieldRules::mutable_uint32() {
  if (!has_uint32()) {
    clear_type();
    set_has_uint32();
    type_.uint32_ = new ::validate::UInt32Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.uint32)
  return type_.uint32_;
}
::validate::UInt32Rules* FieldRules::release_uint32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.uint32)
  if (has_uint32()) {
    clear_has_type();
    ::validate::UInt32Rules* temp = type_.uint32_;
    type_.uint32_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_uint32(::validate::UInt32Rules* uint32) {
  clear_type();
  if (uint32) {
    set_has_uint32();
    type_.uint32_ = uint32;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.uint32)
}

// optional .validate.UInt64Rules uint64 = 6;
bool FieldRules::has_uint64() const {
  return type_case() == kUint64;
}
void FieldRules::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
void FieldRules::clear_uint64() {
  if (has_uint64()) {
    delete type_.uint64_;
    clear_has_type();
  }
}
 const ::validate::UInt64Rules& FieldRules::uint64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.uint64)
  return has_uint64()
      ? *type_.uint64_
      : ::validate::UInt64Rules::default_instance();
}
::validate::UInt64Rules* FieldRules::mutable_uint64() {
  if (!has_uint64()) {
    clear_type();
    set_has_uint64();
    type_.uint64_ = new ::validate::UInt64Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.uint64)
  return type_.uint64_;
}
::validate::UInt64Rules* FieldRules::release_uint64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.uint64)
  if (has_uint64()) {
    clear_has_type();
    ::validate::UInt64Rules* temp = type_.uint64_;
    type_.uint64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_uint64(::validate::UInt64Rules* uint64) {
  clear_type();
  if (uint64) {
    set_has_uint64();
    type_.uint64_ = uint64;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.uint64)
}

// optional .validate.SInt32Rules sint32 = 7;
bool FieldRules::has_sint32() const {
  return type_case() == kSint32;
}
void FieldRules::set_has_sint32() {
  _oneof_case_[0] = kSint32;
}
void FieldRules::clear_sint32() {
  if (has_sint32()) {
    delete type_.sint32_;
    clear_has_type();
  }
}
 const ::validate::SInt32Rules& FieldRules::sint32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sint32)
  return has_sint32()
      ? *type_.sint32_
      : ::validate::SInt32Rules::default_instance();
}
::validate::SInt32Rules* FieldRules::mutable_sint32() {
  if (!has_sint32()) {
    clear_type();
    set_has_sint32();
    type_.sint32_ = new ::validate::SInt32Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sint32)
  return type_.sint32_;
}
::validate::SInt32Rules* FieldRules::release_sint32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sint32)
  if (has_sint32()) {
    clear_has_type();
    ::validate::SInt32Rules* temp = type_.sint32_;
    type_.sint32_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_sint32(::validate::SInt32Rules* sint32) {
  clear_type();
  if (sint32) {
    set_has_sint32();
    type_.sint32_ = sint32;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.sint32)
}

// optional .validate.SInt64Rules sint64 = 8;
bool FieldRules::has_sint64() const {
  return type_case() == kSint64;
}
void FieldRules::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
void FieldRules::clear_sint64() {
  if (has_sint64()) {
    delete type_.sint64_;
    clear_has_type();
  }
}
 const ::validate::SInt64Rules& FieldRules::sint64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sint64)
  return has_sint64()
      ? *type_.sint64_
      : ::validate::SInt64Rules::default_instance();
}
::validate::SInt64Rules* FieldRules::mutable_sint64() {
  if (!has_sint64()) {
    clear_type();
    set_has_sint64();
    type_.sint64_ = new ::validate::SInt64Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sint64)
  return type_.sint64_;
}
::validate::SInt64Rules* FieldRules::release_sint64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sint64)
  if (has_sint64()) {
    clear_has_type();
    ::validate::SInt64Rules* temp = type_.sint64_;
    type_.sint64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_sint64(::validate::SInt64Rules* sint64) {
  clear_type();
  if (sint64) {
    set_has_sint64();
    type_.sint64_ = sint64;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.sint64)
}

// optional .validate.Fixed32Rules fixed32 = 9;
bool FieldRules::has_fixed32() const {
  return type_case() == kFixed32;
}
void FieldRules::set_has_fixed32() {
  _oneof_case_[0] = kFixed32;
}
void FieldRules::clear_fixed32() {
  if (has_fixed32()) {
    delete type_.fixed32_;
    clear_has_type();
  }
}
 const ::validate::Fixed32Rules& FieldRules::fixed32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.fixed32)
  return has_fixed32()
      ? *type_.fixed32_
      : ::validate::Fixed32Rules::default_instance();
}
::validate::Fixed32Rules* FieldRules::mutable_fixed32() {
  if (!has_fixed32()) {
    clear_type();
    set_has_fixed32();
    type_.fixed32_ = new ::validate::Fixed32Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.fixed32)
  return type_.fixed32_;
}
::validate::Fixed32Rules* FieldRules::release_fixed32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.fixed32)
  if (has_fixed32()) {
    clear_has_type();
    ::validate::Fixed32Rules* temp = type_.fixed32_;
    type_.fixed32_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_fixed32(::validate::Fixed32Rules* fixed32) {
  clear_type();
  if (fixed32) {
    set_has_fixed32();
    type_.fixed32_ = fixed32;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.fixed32)
}

// optional .validate.Fixed64Rules fixed64 = 10;
bool FieldRules::has_fixed64() const {
  return type_case() == kFixed64;
}
void FieldRules::set_has_fixed64() {
  _oneof_case_[0] = kFixed64;
}
void FieldRules::clear_fixed64() {
  if (has_fixed64()) {
    delete type_.fixed64_;
    clear_has_type();
  }
}
 const ::validate::Fixed64Rules& FieldRules::fixed64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.fixed64)
  return has_fixed64()
      ? *type_.fixed64_
      : ::validate::Fixed64Rules::default_instance();
}
::validate::Fixed64Rules* FieldRules::mutable_fixed64() {
  if (!has_fixed64()) {
    clear_type();
    set_has_fixed64();
    type_.fixed64_ = new ::validate::Fixed64Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.fixed64)
  return type_.fixed64_;
}
::validate::Fixed64Rules* FieldRules::release_fixed64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.fixed64)
  if (has_fixed64()) {
    clear_has_type();
    ::validate::Fixed64Rules* temp = type_.fixed64_;
    type_.fixed64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_fixed64(::validate::Fixed64Rules* fixed64) {
  clear_type();
  if (fixed64) {
    set_has_fixed64();
    type_.fixed64_ = fixed64;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.fixed64)
}

// optional .validate.SFixed32Rules sfixed32 = 11;
bool FieldRules::has_sfixed32() const {
  return type_case() == kSfixed32;
}
void FieldRules::set_has_sfixed32() {
  _oneof_case_[0] = kSfixed32;
}
void FieldRules::clear_sfixed32() {
  if (has_sfixed32()) {
    delete type_.sfixed32_;
    clear_has_type();
  }
}
 const ::validate::SFixed32Rules& FieldRules::sfixed32() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sfixed32)
  return has_sfixed32()
      ? *type_.sfixed32_
      : ::validate::SFixed32Rules::default_instance();
}
::validate::SFixed32Rules* FieldRules::mutable_sfixed32() {
  if (!has_sfixed32()) {
    clear_type();
    set_has_sfixed32();
    type_.sfixed32_ = new ::validate::SFixed32Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sfixed32)
  return type_.sfixed32_;
}
::validate::SFixed32Rules* FieldRules::release_sfixed32() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sfixed32)
  if (has_sfixed32()) {
    clear_has_type();
    ::validate::SFixed32Rules* temp = type_.sfixed32_;
    type_.sfixed32_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_sfixed32(::validate::SFixed32Rules* sfixed32) {
  clear_type();
  if (sfixed32) {
    set_has_sfixed32();
    type_.sfixed32_ = sfixed32;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.sfixed32)
}

// optional .validate.SFixed64Rules sfixed64 = 12;
bool FieldRules::has_sfixed64() const {
  return type_case() == kSfixed64;
}
void FieldRules::set_has_sfixed64() {
  _oneof_case_[0] = kSfixed64;
}
void FieldRules::clear_sfixed64() {
  if (has_sfixed64()) {
    delete type_.sfixed64_;
    clear_has_type();
  }
}
 const ::validate::SFixed64Rules& FieldRules::sfixed64() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.sfixed64)
  return has_sfixed64()
      ? *type_.sfixed64_
      : ::validate::SFixed64Rules::default_instance();
}
::validate::SFixed64Rules* FieldRules::mutable_sfixed64() {
  if (!has_sfixed64()) {
    clear_type();
    set_has_sfixed64();
    type_.sfixed64_ = new ::validate::SFixed64Rules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.sfixed64)
  return type_.sfixed64_;
}
::validate::SFixed64Rules* FieldRules::release_sfixed64() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.sfixed64)
  if (has_sfixed64()) {
    clear_has_type();
    ::validate::SFixed64Rules* temp = type_.sfixed64_;
    type_.sfixed64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_sfixed64(::validate::SFixed64Rules* sfixed64) {
  clear_type();
  if (sfixed64) {
    set_has_sfixed64();
    type_.sfixed64_ = sfixed64;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.sfixed64)
}

// optional .validate.BoolRules bool = 13;
bool FieldRules::has_bool_() const {
  return type_case() == kBool;
}
void FieldRules::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
void FieldRules::clear_bool_() {
  if (has_bool_()) {
    delete type_.bool__;
    clear_has_type();
  }
}
 const ::validate::BoolRules& FieldRules::bool_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.bool)
  return has_bool_()
      ? *type_.bool__
      : ::validate::BoolRules::default_instance();
}
::validate::BoolRules* FieldRules::mutable_bool_() {
  if (!has_bool_()) {
    clear_type();
    set_has_bool_();
    type_.bool__ = new ::validate::BoolRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.bool)
  return type_.bool__;
}
::validate::BoolRules* FieldRules::release_bool_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.bool)
  if (has_bool_()) {
    clear_has_type();
    ::validate::BoolRules* temp = type_.bool__;
    type_.bool__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_bool_(::validate::BoolRules* bool_) {
  clear_type();
  if (bool_) {
    set_has_bool_();
    type_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.bool)
}

// optional .validate.StringRules string = 14;
bool FieldRules::has_string() const {
  return type_case() == kString;
}
void FieldRules::set_has_string() {
  _oneof_case_[0] = kString;
}
void FieldRules::clear_string() {
  if (has_string()) {
    delete type_.string_;
    clear_has_type();
  }
}
 const ::validate::StringRules& FieldRules::string() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.string)
  return has_string()
      ? *type_.string_
      : ::validate::StringRules::default_instance();
}
::validate::StringRules* FieldRules::mutable_string() {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_ = new ::validate::StringRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.string)
  return type_.string_;
}
::validate::StringRules* FieldRules::release_string() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.string)
  if (has_string()) {
    clear_has_type();
    ::validate::StringRules* temp = type_.string_;
    type_.string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_string(::validate::StringRules* string) {
  clear_type();
  if (string) {
    set_has_string();
    type_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.string)
}

// optional .validate.BytesRules bytes = 15;
bool FieldRules::has_bytes() const {
  return type_case() == kBytes;
}
void FieldRules::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
void FieldRules::clear_bytes() {
  if (has_bytes()) {
    delete type_.bytes_;
    clear_has_type();
  }
}
 const ::validate::BytesRules& FieldRules::bytes() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.bytes)
  return has_bytes()
      ? *type_.bytes_
      : ::validate::BytesRules::default_instance();
}
::validate::BytesRules* FieldRules::mutable_bytes() {
  if (!has_bytes()) {
    clear_type();
    set_has_bytes();
    type_.bytes_ = new ::validate::BytesRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.bytes)
  return type_.bytes_;
}
::validate::BytesRules* FieldRules::release_bytes() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.bytes)
  if (has_bytes()) {
    clear_has_type();
    ::validate::BytesRules* temp = type_.bytes_;
    type_.bytes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_bytes(::validate::BytesRules* bytes) {
  clear_type();
  if (bytes) {
    set_has_bytes();
    type_.bytes_ = bytes;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.bytes)
}

// optional .validate.EnumRules enum = 16;
bool FieldRules::has_enum_() const {
  return type_case() == kEnum;
}
void FieldRules::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
void FieldRules::clear_enum_() {
  if (has_enum_()) {
    delete type_.enum__;
    clear_has_type();
  }
}
 const ::validate::EnumRules& FieldRules::enum_() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.enum)
  return has_enum_()
      ? *type_.enum__
      : ::validate::EnumRules::default_instance();
}
::validate::EnumRules* FieldRules::mutable_enum_() {
  if (!has_enum_()) {
    clear_type();
    set_has_enum_();
    type_.enum__ = new ::validate::EnumRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.enum)
  return type_.enum__;
}
::validate::EnumRules* FieldRules::release_enum_() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.enum)
  if (has_enum_()) {
    clear_has_type();
    ::validate::EnumRules* temp = type_.enum__;
    type_.enum__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_enum_(::validate::EnumRules* enum_) {
  clear_type();
  if (enum_) {
    set_has_enum_();
    type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.enum)
}

// optional .validate.MessageRules message = 17;
bool FieldRules::has_message() const {
  return type_case() == kMessage;
}
void FieldRules::set_has_message() {
  _oneof_case_[0] = kMessage;
}
void FieldRules::clear_message() {
  if (has_message()) {
    delete type_.message_;
    clear_has_type();
  }
}
 const ::validate::MessageRules& FieldRules::message() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.message)
  return has_message()
      ? *type_.message_
      : ::validate::MessageRules::default_instance();
}
::validate::MessageRules* FieldRules::mutable_message() {
  if (!has_message()) {
    clear_type();
    set_has_message();
    type_.message_ = new ::validate::MessageRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.message)
  return type_.message_;
}
::validate::MessageRules* FieldRules::release_message() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.message)
  if (has_message()) {
    clear_has_type();
    ::validate::MessageRules* temp = type_.message_;
    type_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_message(::validate::MessageRules* message) {
  clear_type();
  if (message) {
    set_has_message();
    type_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.message)
}

// optional .validate.RepeatedRules repeated = 18;
bool FieldRules::has_repeated() const {
  return type_case() == kRepeated;
}
void FieldRules::set_has_repeated() {
  _oneof_case_[0] = kRepeated;
}
void FieldRules::clear_repeated() {
  if (has_repeated()) {
    delete type_.repeated_;
    clear_has_type();
  }
}
 const ::validate::RepeatedRules& FieldRules::repeated() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.repeated)
  return has_repeated()
      ? *type_.repeated_
      : ::validate::RepeatedRules::default_instance();
}
::validate::RepeatedRules* FieldRules::mutable_repeated() {
  if (!has_repeated()) {
    clear_type();
    set_has_repeated();
    type_.repeated_ = new ::validate::RepeatedRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.repeated)
  return type_.repeated_;
}
::validate::RepeatedRules* FieldRules::release_repeated() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.repeated)
  if (has_repeated()) {
    clear_has_type();
    ::validate::RepeatedRules* temp = type_.repeated_;
    type_.repeated_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_repeated(::validate::RepeatedRules* repeated) {
  clear_type();
  if (repeated) {
    set_has_repeated();
    type_.repeated_ = repeated;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.repeated)
}

// optional .validate.MapRules map = 19;
bool FieldRules::has_map() const {
  return type_case() == kMap;
}
void FieldRules::set_has_map() {
  _oneof_case_[0] = kMap;
}
void FieldRules::clear_map() {
  if (has_map()) {
    delete type_.map_;
    clear_has_type();
  }
}
 const ::validate::MapRules& FieldRules::map() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.map)
  return has_map()
      ? *type_.map_
      : ::validate::MapRules::default_instance();
}
::validate::MapRules* FieldRules::mutable_map() {
  if (!has_map()) {
    clear_type();
    set_has_map();
    type_.map_ = new ::validate::MapRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.map)
  return type_.map_;
}
::validate::MapRules* FieldRules::release_map() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.map)
  if (has_map()) {
    clear_has_type();
    ::validate::MapRules* temp = type_.map_;
    type_.map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_map(::validate::MapRules* map) {
  clear_type();
  if (map) {
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.map)
}

// optional .validate.AnyRules any = 20;
bool FieldRules::has_any() const {
  return type_case() == kAny;
}
void FieldRules::set_has_any() {
  _oneof_case_[0] = kAny;
}
void FieldRules::clear_any() {
  if (has_any()) {
    delete type_.any_;
    clear_has_type();
  }
}
 const ::validate::AnyRules& FieldRules::any() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.any)
  return has_any()
      ? *type_.any_
      : ::validate::AnyRules::default_instance();
}
::validate::AnyRules* FieldRules::mutable_any() {
  if (!has_any()) {
    clear_type();
    set_has_any();
    type_.any_ = new ::validate::AnyRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.any)
  return type_.any_;
}
::validate::AnyRules* FieldRules::release_any() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.any)
  if (has_any()) {
    clear_has_type();
    ::validate::AnyRules* temp = type_.any_;
    type_.any_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_any(::validate::AnyRules* any) {
  clear_type();
  if (any) {
    set_has_any();
    type_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.any)
}

// optional .validate.DurationRules duration = 21;
bool FieldRules::has_duration() const {
  return type_case() == kDuration;
}
void FieldRules::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
void FieldRules::clear_duration() {
  if (has_duration()) {
    delete type_.duration_;
    clear_has_type();
  }
}
 const ::validate::DurationRules& FieldRules::duration() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.duration)
  return has_duration()
      ? *type_.duration_
      : ::validate::DurationRules::default_instance();
}
::validate::DurationRules* FieldRules::mutable_duration() {
  if (!has_duration()) {
    clear_type();
    set_has_duration();
    type_.duration_ = new ::validate::DurationRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.duration)
  return type_.duration_;
}
::validate::DurationRules* FieldRules::release_duration() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.duration)
  if (has_duration()) {
    clear_has_type();
    ::validate::DurationRules* temp = type_.duration_;
    type_.duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_duration(::validate::DurationRules* duration) {
  clear_type();
  if (duration) {
    set_has_duration();
    type_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.duration)
}

// optional .validate.TimestampRules timestamp = 22;
bool FieldRules::has_timestamp() const {
  return type_case() == kTimestamp;
}
void FieldRules::set_has_timestamp() {
  _oneof_case_[0] = kTimestamp;
}
void FieldRules::clear_timestamp() {
  if (has_timestamp()) {
    delete type_.timestamp_;
    clear_has_type();
  }
}
 const ::validate::TimestampRules& FieldRules::timestamp() const {
  // @@protoc_insertion_point(field_get:validate.FieldRules.timestamp)
  return has_timestamp()
      ? *type_.timestamp_
      : ::validate::TimestampRules::default_instance();
}
::validate::TimestampRules* FieldRules::mutable_timestamp() {
  if (!has_timestamp()) {
    clear_type();
    set_has_timestamp();
    type_.timestamp_ = new ::validate::TimestampRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.FieldRules.timestamp)
  return type_.timestamp_;
}
::validate::TimestampRules* FieldRules::release_timestamp() {
  // @@protoc_insertion_point(field_release:validate.FieldRules.timestamp)
  if (has_timestamp()) {
    clear_has_type();
    ::validate::TimestampRules* temp = type_.timestamp_;
    type_.timestamp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldRules::set_allocated_timestamp(::validate::TimestampRules* timestamp) {
  clear_type();
  if (timestamp) {
    set_has_timestamp();
    type_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:validate.FieldRules.timestamp)
}

bool FieldRules::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void FieldRules::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
FieldRules::TypeCase FieldRules::type_case() const {
  return FieldRules::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatRules::kConstFieldNumber;
const int FloatRules::kLtFieldNumber;
const int FloatRules::kLteFieldNumber;
const int FloatRules::kGtFieldNumber;
const int FloatRules::kGteFieldNumber;
const int FloatRules::kInFieldNumber;
const int FloatRules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatRules::FloatRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.FloatRules)
}
FloatRules::FloatRules(const FloatRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.FloatRules)
}

void FloatRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

FloatRules::~FloatRules() {
  // @@protoc_insertion_point(destructor:validate.FloatRules)
  SharedDtor();
}

void FloatRules::SharedDtor() {
}

void FloatRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatRules& FloatRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

FloatRules* FloatRules::New(::google::protobuf::Arena* arena) const {
  FloatRules* n = new FloatRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.FloatRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FloatRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.FloatRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.FloatRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.FloatRules)
  return false;
#undef DO_
}

void FloatRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.FloatRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->const_(), output);
  }

  // optional float lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lt(), output);
  }

  // optional float lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lte(), output);
  }

  // optional float gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gt(), output);
  }

  // optional float gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gte(), output);
  }

  // repeated float in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->in(i), output);
  }

  // repeated float not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.FloatRules)
}

::google::protobuf::uint8* FloatRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.FloatRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->const_(), target);
  }

  // optional float lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lt(), target);
  }

  // optional float lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lte(), target);
  }

  // optional float gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gt(), target);
  }

  // optional float gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gte(), target);
  }

  // repeated float in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->in_, target);

  // repeated float not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.FloatRules)
  return target;
}

size_t FloatRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.FloatRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated float not_in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional float const = 1;
    if (has_const_()) {
      total_size += 1 + 4;
    }

    // optional float lt = 2;
    if (has_lt()) {
      total_size += 1 + 4;
    }

    // optional float lte = 3;
    if (has_lte()) {
      total_size += 1 + 4;
    }

    // optional float gt = 4;
    if (has_gt()) {
      total_size += 1 + 4;
    }

    // optional float gte = 5;
    if (has_gte()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.FloatRules)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.FloatRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.FloatRules)
    MergeFrom(*source);
  }
}

void FloatRules::MergeFrom(const FloatRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.FloatRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FloatRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.FloatRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatRules::CopyFrom(const FloatRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.FloatRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatRules::IsInitialized() const {
  return true;
}

void FloatRules::Swap(FloatRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatRules::InternalSwap(FloatRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatRules

// optional float const = 1;
bool FloatRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FloatRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void FloatRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void FloatRules::clear_const_() {
  const__ = 0;
  clear_has_const_();
}
float FloatRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.const)
  return const__;
}
void FloatRules::set_const_(float value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.FloatRules.const)
}

// optional float lt = 2;
bool FloatRules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FloatRules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void FloatRules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void FloatRules::clear_lt() {
  lt_ = 0;
  clear_has_lt();
}
float FloatRules::lt() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.lt)
  return lt_;
}
void FloatRules::set_lt(float value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.FloatRules.lt)
}

// optional float lte = 3;
bool FloatRules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FloatRules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void FloatRules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void FloatRules::clear_lte() {
  lte_ = 0;
  clear_has_lte();
}
float FloatRules::lte() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.lte)
  return lte_;
}
void FloatRules::set_lte(float value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.FloatRules.lte)
}

// optional float gt = 4;
bool FloatRules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FloatRules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void FloatRules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void FloatRules::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
float FloatRules::gt() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.gt)
  return gt_;
}
void FloatRules::set_gt(float value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.FloatRules.gt)
}

// optional float gte = 5;
bool FloatRules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FloatRules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void FloatRules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void FloatRules::clear_gte() {
  gte_ = 0;
  clear_has_gte();
}
float FloatRules::gte() const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.gte)
  return gte_;
}
void FloatRules::set_gte(float value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.FloatRules.gte)
}

// repeated float in = 6;
int FloatRules::in_size() const {
  return in_.size();
}
void FloatRules::clear_in() {
  in_.Clear();
}
float FloatRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.in)
  return in_.Get(index);
}
void FloatRules::set_in(int index, float value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.in)
}
void FloatRules::add_in(float value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.FloatRules.in)
}
const ::google::protobuf::RepeatedField< float >&
FloatRules::in() const {
  // @@protoc_insertion_point(field_list:validate.FloatRules.in)
  return in_;
}
::google::protobuf::RepeatedField< float >*
FloatRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.FloatRules.in)
  return &in_;
}

// repeated float not_in = 7;
int FloatRules::not_in_size() const {
  return not_in_.size();
}
void FloatRules::clear_not_in() {
  not_in_.Clear();
}
float FloatRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.FloatRules.not_in)
  return not_in_.Get(index);
}
void FloatRules::set_not_in(int index, float value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.FloatRules.not_in)
}
void FloatRules::add_not_in(float value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.FloatRules.not_in)
}
const ::google::protobuf::RepeatedField< float >&
FloatRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.FloatRules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< float >*
FloatRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.FloatRules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleRules::kConstFieldNumber;
const int DoubleRules::kLtFieldNumber;
const int DoubleRules::kLteFieldNumber;
const int DoubleRules::kGtFieldNumber;
const int DoubleRules::kGteFieldNumber;
const int DoubleRules::kInFieldNumber;
const int DoubleRules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleRules::DoubleRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.DoubleRules)
}
DoubleRules::DoubleRules(const DoubleRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.DoubleRules)
}

void DoubleRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

DoubleRules::~DoubleRules() {
  // @@protoc_insertion_point(destructor:validate.DoubleRules)
  SharedDtor();
}

void DoubleRules::SharedDtor() {
}

void DoubleRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleRules& DoubleRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoubleRules* DoubleRules::New(::google::protobuf::Arena* arena) const {
  DoubleRules* n = new DoubleRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.DoubleRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DoubleRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.DoubleRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.DoubleRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.DoubleRules)
  return false;
#undef DO_
}

void DoubleRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.DoubleRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->const_(), output);
  }

  // optional double lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lt(), output);
  }

  // optional double lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lte(), output);
  }

  // optional double gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gt(), output);
  }

  // optional double gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gte(), output);
  }

  // repeated double in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->in(i), output);
  }

  // repeated double not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.DoubleRules)
}

::google::protobuf::uint8* DoubleRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.DoubleRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->const_(), target);
  }

  // optional double lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lt(), target);
  }

  // optional double lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lte(), target);
  }

  // optional double gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gt(), target);
  }

  // optional double gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gte(), target);
  }

  // repeated double in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(6, this->in_, target);

  // repeated double not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.DoubleRules)
  return target;
}

size_t DoubleRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.DoubleRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated double not_in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional double const = 1;
    if (has_const_()) {
      total_size += 1 + 8;
    }

    // optional double lt = 2;
    if (has_lt()) {
      total_size += 1 + 8;
    }

    // optional double lte = 3;
    if (has_lte()) {
      total_size += 1 + 8;
    }

    // optional double gt = 4;
    if (has_gt()) {
      total_size += 1 + 8;
    }

    // optional double gte = 5;
    if (has_gte()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.DoubleRules)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.DoubleRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.DoubleRules)
    MergeFrom(*source);
  }
}

void DoubleRules::MergeFrom(const DoubleRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.DoubleRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DoubleRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.DoubleRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleRules::CopyFrom(const DoubleRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.DoubleRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleRules::IsInitialized() const {
  return true;
}

void DoubleRules::Swap(DoubleRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleRules::InternalSwap(DoubleRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleRules

// optional double const = 1;
bool DoubleRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DoubleRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void DoubleRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void DoubleRules::clear_const_() {
  const__ = 0;
  clear_has_const_();
}
double DoubleRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.const)
  return const__;
}
void DoubleRules::set_const_(double value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.DoubleRules.const)
}

// optional double lt = 2;
bool DoubleRules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DoubleRules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void DoubleRules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void DoubleRules::clear_lt() {
  lt_ = 0;
  clear_has_lt();
}
double DoubleRules::lt() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.lt)
  return lt_;
}
void DoubleRules::set_lt(double value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.DoubleRules.lt)
}

// optional double lte = 3;
bool DoubleRules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DoubleRules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void DoubleRules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void DoubleRules::clear_lte() {
  lte_ = 0;
  clear_has_lte();
}
double DoubleRules::lte() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.lte)
  return lte_;
}
void DoubleRules::set_lte(double value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.DoubleRules.lte)
}

// optional double gt = 4;
bool DoubleRules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DoubleRules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void DoubleRules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void DoubleRules::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
double DoubleRules::gt() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.gt)
  return gt_;
}
void DoubleRules::set_gt(double value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.DoubleRules.gt)
}

// optional double gte = 5;
bool DoubleRules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DoubleRules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void DoubleRules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void DoubleRules::clear_gte() {
  gte_ = 0;
  clear_has_gte();
}
double DoubleRules::gte() const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.gte)
  return gte_;
}
void DoubleRules::set_gte(double value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.DoubleRules.gte)
}

// repeated double in = 6;
int DoubleRules::in_size() const {
  return in_.size();
}
void DoubleRules::clear_in() {
  in_.Clear();
}
double DoubleRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.in)
  return in_.Get(index);
}
void DoubleRules::set_in(int index, double value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.in)
}
void DoubleRules::add_in(double value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.DoubleRules.in)
}
const ::google::protobuf::RepeatedField< double >&
DoubleRules::in() const {
  // @@protoc_insertion_point(field_list:validate.DoubleRules.in)
  return in_;
}
::google::protobuf::RepeatedField< double >*
DoubleRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DoubleRules.in)
  return &in_;
}

// repeated double not_in = 7;
int DoubleRules::not_in_size() const {
  return not_in_.size();
}
void DoubleRules::clear_not_in() {
  not_in_.Clear();
}
double DoubleRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DoubleRules.not_in)
  return not_in_.Get(index);
}
void DoubleRules::set_not_in(int index, double value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.DoubleRules.not_in)
}
void DoubleRules::add_not_in(double value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.DoubleRules.not_in)
}
const ::google::protobuf::RepeatedField< double >&
DoubleRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.DoubleRules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< double >*
DoubleRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DoubleRules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int32Rules::kConstFieldNumber;
const int Int32Rules::kLtFieldNumber;
const int Int32Rules::kLteFieldNumber;
const int Int32Rules::kGtFieldNumber;
const int Int32Rules::kGteFieldNumber;
const int Int32Rules::kInFieldNumber;
const int Int32Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int32Rules::Int32Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.Int32Rules)
}
Int32Rules::Int32Rules(const Int32Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.Int32Rules)
}

void Int32Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

Int32Rules::~Int32Rules() {
  // @@protoc_insertion_point(destructor:validate.Int32Rules)
  SharedDtor();
}

void Int32Rules::SharedDtor() {
}

void Int32Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int32Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int32Rules& Int32Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Int32Rules* Int32Rules::New(::google::protobuf::Arena* arena) const {
  Int32Rules* n = new Int32Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int32Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.Int32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Int32Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.Int32Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.Int32Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.Int32Rules)
  return false;
#undef DO_
}

void Int32Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.Int32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->const_(), output);
  }

  // optional int32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lt(), output);
  }

  // optional int32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lte(), output);
  }

  // optional int32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gt(), output);
  }

  // optional int32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gte(), output);
  }

  // repeated int32 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->in(i), output);
  }

  // repeated int32 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.Int32Rules)
}

::google::protobuf::uint8* Int32Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.Int32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->const_(), target);
  }

  // optional int32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lt(), target);
  }

  // optional int32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lte(), target);
  }

  // optional int32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gt(), target);
  }

  // optional int32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gte(), target);
  }

  // repeated int32 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->in_, target);

  // repeated int32 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.Int32Rules)
  return target;
}

size_t Int32Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.Int32Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated int32 not_in = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->const_());
    }

    // optional int32 lt = 2;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lt());
    }

    // optional int32 lte = 3;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lte());
    }

    // optional int32 gt = 4;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gt());
    }

    // optional int32 gte = 5;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gte());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int32Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.Int32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const Int32Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int32Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.Int32Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.Int32Rules)
    MergeFrom(*source);
  }
}

void Int32Rules::MergeFrom(const Int32Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.Int32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Int32Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.Int32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32Rules::CopyFrom(const Int32Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.Int32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Rules::IsInitialized() const {
  return true;
}

void Int32Rules::Swap(Int32Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int32Rules::InternalSwap(Int32Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int32Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int32Rules

// optional int32 const = 1;
bool Int32Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Int32Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void Int32Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Int32Rules::clear_const_() {
  const__ = 0;
  clear_has_const_();
}
::google::protobuf::int32 Int32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.const)
  return const__;
}
void Int32Rules::set_const_(::google::protobuf::int32 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.Int32Rules.const)
}

// optional int32 lt = 2;
bool Int32Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Int32Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void Int32Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Int32Rules::clear_lt() {
  lt_ = 0;
  clear_has_lt();
}
::google::protobuf::int32 Int32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.lt)
  return lt_;
}
void Int32Rules::set_lt(::google::protobuf::int32 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.Int32Rules.lt)
}

// optional int32 lte = 3;
bool Int32Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Int32Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void Int32Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Int32Rules::clear_lte() {
  lte_ = 0;
  clear_has_lte();
}
::google::protobuf::int32 Int32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.lte)
  return lte_;
}
void Int32Rules::set_lte(::google::protobuf::int32 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.Int32Rules.lte)
}

// optional int32 gt = 4;
bool Int32Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Int32Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void Int32Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void Int32Rules::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
::google::protobuf::int32 Int32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.gt)
  return gt_;
}
void Int32Rules::set_gt(::google::protobuf::int32 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.Int32Rules.gt)
}

// optional int32 gte = 5;
bool Int32Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Int32Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void Int32Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void Int32Rules::clear_gte() {
  gte_ = 0;
  clear_has_gte();
}
::google::protobuf::int32 Int32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.gte)
  return gte_;
}
void Int32Rules::set_gte(::google::protobuf::int32 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.Int32Rules.gte)
}

// repeated int32 in = 6;
int Int32Rules::in_size() const {
  return in_.size();
}
void Int32Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::int32 Int32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.in)
  return in_.Get(index);
}
void Int32Rules::set_in(int index, ::google::protobuf::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.in)
}
void Int32Rules::add_in(::google::protobuf::int32 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Int32Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Int32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Int32Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Int32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int32Rules.in)
  return &in_;
}

// repeated int32 not_in = 7;
int Int32Rules::not_in_size() const {
  return not_in_.size();
}
void Int32Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int32 Int32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int32Rules.not_in)
  return not_in_.Get(index);
}
void Int32Rules::set_not_in(int index, ::google::protobuf::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int32Rules.not_in)
}
void Int32Rules::add_not_in(::google::protobuf::int32 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Int32Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Int32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Int32Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Int32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int32Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64Rules::kConstFieldNumber;
const int Int64Rules::kLtFieldNumber;
const int Int64Rules::kLteFieldNumber;
const int Int64Rules::kGtFieldNumber;
const int Int64Rules::kGteFieldNumber;
const int Int64Rules::kInFieldNumber;
const int Int64Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64Rules::Int64Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.Int64Rules)
}
Int64Rules::Int64Rules(const Int64Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.Int64Rules)
}

void Int64Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

Int64Rules::~Int64Rules() {
  // @@protoc_insertion_point(destructor:validate.Int64Rules)
  SharedDtor();
}

void Int64Rules::SharedDtor() {
}

void Int64Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int64Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int64Rules& Int64Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Int64Rules* Int64Rules::New(::google::protobuf::Arena* arena) const {
  Int64Rules* n = new Int64Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int64Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.Int64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Int64Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.Int64Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.Int64Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.Int64Rules)
  return false;
#undef DO_
}

void Int64Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.Int64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->const_(), output);
  }

  // optional int64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lt(), output);
  }

  // optional int64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lte(), output);
  }

  // optional int64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gt(), output);
  }

  // optional int64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gte(), output);
  }

  // repeated int64 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->in(i), output);
  }

  // repeated int64 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.Int64Rules)
}

::google::protobuf::uint8* Int64Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.Int64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->const_(), target);
  }

  // optional int64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lt(), target);
  }

  // optional int64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lte(), target);
  }

  // optional int64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gt(), target);
  }

  // optional int64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gte(), target);
  }

  // repeated int64 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->in_, target);

  // repeated int64 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.Int64Rules)
  return target;
}

size_t Int64Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.Int64Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated int64 not_in = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->const_());
    }

    // optional int64 lt = 2;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lt());
    }

    // optional int64 lte = 3;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lte());
    }

    // optional int64 gt = 4;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gt());
    }

    // optional int64 gte = 5;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gte());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int64Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.Int64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.Int64Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.Int64Rules)
    MergeFrom(*source);
  }
}

void Int64Rules::MergeFrom(const Int64Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.Int64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Int64Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.Int64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Rules::CopyFrom(const Int64Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.Int64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Rules::IsInitialized() const {
  return true;
}

void Int64Rules::Swap(Int64Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64Rules::InternalSwap(Int64Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int64Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int64Rules

// optional int64 const = 1;
bool Int64Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Int64Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void Int64Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Int64Rules::clear_const_() {
  const__ = GOOGLE_LONGLONG(0);
  clear_has_const_();
}
::google::protobuf::int64 Int64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.const)
  return const__;
}
void Int64Rules::set_const_(::google::protobuf::int64 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.Int64Rules.const)
}

// optional int64 lt = 2;
bool Int64Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Int64Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void Int64Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Int64Rules::clear_lt() {
  lt_ = GOOGLE_LONGLONG(0);
  clear_has_lt();
}
::google::protobuf::int64 Int64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.lt)
  return lt_;
}
void Int64Rules::set_lt(::google::protobuf::int64 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.Int64Rules.lt)
}

// optional int64 lte = 3;
bool Int64Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Int64Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void Int64Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Int64Rules::clear_lte() {
  lte_ = GOOGLE_LONGLONG(0);
  clear_has_lte();
}
::google::protobuf::int64 Int64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.lte)
  return lte_;
}
void Int64Rules::set_lte(::google::protobuf::int64 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.Int64Rules.lte)
}

// optional int64 gt = 4;
bool Int64Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Int64Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void Int64Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void Int64Rules::clear_gt() {
  gt_ = GOOGLE_LONGLONG(0);
  clear_has_gt();
}
::google::protobuf::int64 Int64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.gt)
  return gt_;
}
void Int64Rules::set_gt(::google::protobuf::int64 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.Int64Rules.gt)
}

// optional int64 gte = 5;
bool Int64Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Int64Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void Int64Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void Int64Rules::clear_gte() {
  gte_ = GOOGLE_LONGLONG(0);
  clear_has_gte();
}
::google::protobuf::int64 Int64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.gte)
  return gte_;
}
void Int64Rules::set_gte(::google::protobuf::int64 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.Int64Rules.gte)
}

// repeated int64 in = 6;
int Int64Rules::in_size() const {
  return in_.size();
}
void Int64Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::int64 Int64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.in)
  return in_.Get(index);
}
void Int64Rules::set_in(int index, ::google::protobuf::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.in)
}
void Int64Rules::add_in(::google::protobuf::int64 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Int64Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Int64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Int64Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Int64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int64Rules.in)
  return &in_;
}

// repeated int64 not_in = 7;
int Int64Rules::not_in_size() const {
  return not_in_.size();
}
void Int64Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int64 Int64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Int64Rules.not_in)
  return not_in_.Get(index);
}
void Int64Rules::set_not_in(int index, ::google::protobuf::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Int64Rules.not_in)
}
void Int64Rules::add_not_in(::google::protobuf::int64 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Int64Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Int64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Int64Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Int64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Int64Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt32Rules::kConstFieldNumber;
const int UInt32Rules::kLtFieldNumber;
const int UInt32Rules::kLteFieldNumber;
const int UInt32Rules::kGtFieldNumber;
const int UInt32Rules::kGteFieldNumber;
const int UInt32Rules::kInFieldNumber;
const int UInt32Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt32Rules::UInt32Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.UInt32Rules)
}
UInt32Rules::UInt32Rules(const UInt32Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.UInt32Rules)
}

void UInt32Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

UInt32Rules::~UInt32Rules() {
  // @@protoc_insertion_point(destructor:validate.UInt32Rules)
  SharedDtor();
}

void UInt32Rules::SharedDtor() {
}

void UInt32Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt32Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt32Rules& UInt32Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt32Rules* UInt32Rules::New(::google::protobuf::Arena* arena) const {
  UInt32Rules* n = new UInt32Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt32Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.UInt32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UInt32Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.UInt32Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.UInt32Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.UInt32Rules)
  return false;
#undef DO_
}

void UInt32Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.UInt32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->const_(), output);
  }

  // optional uint32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lt(), output);
  }

  // optional uint32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lte(), output);
  }

  // optional uint32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gt(), output);
  }

  // optional uint32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gte(), output);
  }

  // repeated uint32 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->in(i), output);
  }

  // repeated uint32 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.UInt32Rules)
}

::google::protobuf::uint8* UInt32Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.UInt32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->const_(), target);
  }

  // optional uint32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lt(), target);
  }

  // optional uint32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lte(), target);
  }

  // optional uint32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gt(), target);
  }

  // optional uint32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gte(), target);
  }

  // repeated uint32 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->in_, target);

  // repeated uint32 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.UInt32Rules)
  return target;
}

size_t UInt32Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.UInt32Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated uint32 not_in = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->const_());
    }

    // optional uint32 lt = 2;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lt());
    }

    // optional uint32 lte = 3;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lte());
    }

    // optional uint32 gt = 4;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gt());
    }

    // optional uint32 gte = 5;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gte());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt32Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.UInt32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt32Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt32Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.UInt32Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.UInt32Rules)
    MergeFrom(*source);
  }
}

void UInt32Rules::MergeFrom(const UInt32Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.UInt32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UInt32Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.UInt32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32Rules::CopyFrom(const UInt32Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.UInt32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32Rules::IsInitialized() const {
  return true;
}

void UInt32Rules::Swap(UInt32Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt32Rules::InternalSwap(UInt32Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt32Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt32Rules

// optional uint32 const = 1;
bool UInt32Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UInt32Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void UInt32Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void UInt32Rules::clear_const_() {
  const__ = 0u;
  clear_has_const_();
}
::google::protobuf::uint32 UInt32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.const)
  return const__;
}
void UInt32Rules::set_const_(::google::protobuf::uint32 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.const)
}

// optional uint32 lt = 2;
bool UInt32Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UInt32Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void UInt32Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void UInt32Rules::clear_lt() {
  lt_ = 0u;
  clear_has_lt();
}
::google::protobuf::uint32 UInt32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.lt)
  return lt_;
}
void UInt32Rules::set_lt(::google::protobuf::uint32 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.lt)
}

// optional uint32 lte = 3;
bool UInt32Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UInt32Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void UInt32Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void UInt32Rules::clear_lte() {
  lte_ = 0u;
  clear_has_lte();
}
::google::protobuf::uint32 UInt32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.lte)
  return lte_;
}
void UInt32Rules::set_lte(::google::protobuf::uint32 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.lte)
}

// optional uint32 gt = 4;
bool UInt32Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UInt32Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void UInt32Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void UInt32Rules::clear_gt() {
  gt_ = 0u;
  clear_has_gt();
}
::google::protobuf::uint32 UInt32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.gt)
  return gt_;
}
void UInt32Rules::set_gt(::google::protobuf::uint32 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.gt)
}

// optional uint32 gte = 5;
bool UInt32Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UInt32Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void UInt32Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void UInt32Rules::clear_gte() {
  gte_ = 0u;
  clear_has_gte();
}
::google::protobuf::uint32 UInt32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.gte)
  return gte_;
}
void UInt32Rules::set_gte(::google::protobuf::uint32 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.gte)
}

// repeated uint32 in = 6;
int UInt32Rules::in_size() const {
  return in_.size();
}
void UInt32Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::uint32 UInt32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.in)
  return in_.Get(index);
}
void UInt32Rules::set_in(int index, ::google::protobuf::uint32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.in)
}
void UInt32Rules::add_in(::google::protobuf::uint32 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.UInt32Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UInt32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.UInt32Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UInt32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt32Rules.in)
  return &in_;
}

// repeated uint32 not_in = 7;
int UInt32Rules::not_in_size() const {
  return not_in_.size();
}
void UInt32Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::uint32 UInt32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt32Rules.not_in)
  return not_in_.Get(index);
}
void UInt32Rules::set_not_in(int index, ::google::protobuf::uint32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt32Rules.not_in)
}
void UInt32Rules::add_not_in(::google::protobuf::uint32 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.UInt32Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UInt32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.UInt32Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UInt32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt32Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Rules::kConstFieldNumber;
const int UInt64Rules::kLtFieldNumber;
const int UInt64Rules::kLteFieldNumber;
const int UInt64Rules::kGtFieldNumber;
const int UInt64Rules::kGteFieldNumber;
const int UInt64Rules::kInFieldNumber;
const int UInt64Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Rules::UInt64Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.UInt64Rules)
}
UInt64Rules::UInt64Rules(const UInt64Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.UInt64Rules)
}

void UInt64Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

UInt64Rules::~UInt64Rules() {
  // @@protoc_insertion_point(destructor:validate.UInt64Rules)
  SharedDtor();
}

void UInt64Rules::SharedDtor() {
}

void UInt64Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt64Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt64Rules& UInt64Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt64Rules* UInt64Rules::New(::google::protobuf::Arena* arena) const {
  UInt64Rules* n = new UInt64Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt64Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.UInt64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UInt64Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.UInt64Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.UInt64Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.UInt64Rules)
  return false;
#undef DO_
}

void UInt64Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.UInt64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->const_(), output);
  }

  // optional uint64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lt(), output);
  }

  // optional uint64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lte(), output);
  }

  // optional uint64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gt(), output);
  }

  // optional uint64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gte(), output);
  }

  // repeated uint64 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->in(i), output);
  }

  // repeated uint64 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.UInt64Rules)
}

::google::protobuf::uint8* UInt64Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.UInt64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->const_(), target);
  }

  // optional uint64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lt(), target);
  }

  // optional uint64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lte(), target);
  }

  // optional uint64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gt(), target);
  }

  // optional uint64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gte(), target);
  }

  // repeated uint64 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->in_, target);

  // repeated uint64 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.UInt64Rules)
  return target;
}

size_t UInt64Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.UInt64Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated uint64 not_in = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->const_());
    }

    // optional uint64 lt = 2;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lt());
    }

    // optional uint64 lte = 3;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lte());
    }

    // optional uint64 gt = 4;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gt());
    }

    // optional uint64 gte = 5;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gte());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt64Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.UInt64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.UInt64Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.UInt64Rules)
    MergeFrom(*source);
  }
}

void UInt64Rules::MergeFrom(const UInt64Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.UInt64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UInt64Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.UInt64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Rules::CopyFrom(const UInt64Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.UInt64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Rules::IsInitialized() const {
  return true;
}

void UInt64Rules::Swap(UInt64Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Rules::InternalSwap(UInt64Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt64Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt64Rules

// optional uint64 const = 1;
bool UInt64Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UInt64Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void UInt64Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void UInt64Rules::clear_const_() {
  const__ = GOOGLE_ULONGLONG(0);
  clear_has_const_();
}
::google::protobuf::uint64 UInt64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.const)
  return const__;
}
void UInt64Rules::set_const_(::google::protobuf::uint64 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.const)
}

// optional uint64 lt = 2;
bool UInt64Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UInt64Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void UInt64Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void UInt64Rules::clear_lt() {
  lt_ = GOOGLE_ULONGLONG(0);
  clear_has_lt();
}
::google::protobuf::uint64 UInt64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.lt)
  return lt_;
}
void UInt64Rules::set_lt(::google::protobuf::uint64 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.lt)
}

// optional uint64 lte = 3;
bool UInt64Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UInt64Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void UInt64Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void UInt64Rules::clear_lte() {
  lte_ = GOOGLE_ULONGLONG(0);
  clear_has_lte();
}
::google::protobuf::uint64 UInt64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.lte)
  return lte_;
}
void UInt64Rules::set_lte(::google::protobuf::uint64 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.lte)
}

// optional uint64 gt = 4;
bool UInt64Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UInt64Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void UInt64Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void UInt64Rules::clear_gt() {
  gt_ = GOOGLE_ULONGLONG(0);
  clear_has_gt();
}
::google::protobuf::uint64 UInt64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.gt)
  return gt_;
}
void UInt64Rules::set_gt(::google::protobuf::uint64 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.gt)
}

// optional uint64 gte = 5;
bool UInt64Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UInt64Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void UInt64Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void UInt64Rules::clear_gte() {
  gte_ = GOOGLE_ULONGLONG(0);
  clear_has_gte();
}
::google::protobuf::uint64 UInt64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.gte)
  return gte_;
}
void UInt64Rules::set_gte(::google::protobuf::uint64 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.gte)
}

// repeated uint64 in = 6;
int UInt64Rules::in_size() const {
  return in_.size();
}
void UInt64Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::uint64 UInt64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.in)
  return in_.Get(index);
}
void UInt64Rules::set_in(int index, ::google::protobuf::uint64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.in)
}
void UInt64Rules::add_in(::google::protobuf::uint64 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.UInt64Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UInt64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.UInt64Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UInt64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt64Rules.in)
  return &in_;
}

// repeated uint64 not_in = 7;
int UInt64Rules::not_in_size() const {
  return not_in_.size();
}
void UInt64Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::uint64 UInt64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.UInt64Rules.not_in)
  return not_in_.Get(index);
}
void UInt64Rules::set_not_in(int index, ::google::protobuf::uint64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.UInt64Rules.not_in)
}
void UInt64Rules::add_not_in(::google::protobuf::uint64 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.UInt64Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UInt64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.UInt64Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UInt64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.UInt64Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt32Rules::kConstFieldNumber;
const int SInt32Rules::kLtFieldNumber;
const int SInt32Rules::kLteFieldNumber;
const int SInt32Rules::kGtFieldNumber;
const int SInt32Rules::kGteFieldNumber;
const int SInt32Rules::kInFieldNumber;
const int SInt32Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt32Rules::SInt32Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.SInt32Rules)
}
SInt32Rules::SInt32Rules(const SInt32Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.SInt32Rules)
}

void SInt32Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

SInt32Rules::~SInt32Rules() {
  // @@protoc_insertion_point(destructor:validate.SInt32Rules)
  SharedDtor();
}

void SInt32Rules::SharedDtor() {
}

void SInt32Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt32Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SInt32Rules& SInt32Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

SInt32Rules* SInt32Rules::New(::google::protobuf::Arena* arena) const {
  SInt32Rules* n = new SInt32Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt32Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.SInt32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SInt32Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.SInt32Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 48u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 56u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.SInt32Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.SInt32Rules)
  return false;
#undef DO_
}

void SInt32Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.SInt32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->const_(), output);
  }

  // optional sint32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->lt(), output);
  }

  // optional sint32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->lte(), output);
  }

  // optional sint32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->gt(), output);
  }

  // optional sint32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->gte(), output);
  }

  // repeated sint32 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      6, this->in(i), output);
  }

  // repeated sint32 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.SInt32Rules)
}

::google::protobuf::uint8* SInt32Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.SInt32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->const_(), target);
  }

  // optional sint32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->lt(), target);
  }

  // optional sint32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->lte(), target);
  }

  // optional sint32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->gt(), target);
  }

  // optional sint32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->gte(), target);
  }

  // repeated sint32 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(6, this->in_, target);

  // repeated sint32 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.SInt32Rules)
  return target;
}

size_t SInt32Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.SInt32Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated sint32 not_in = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional sint32 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->const_());
    }

    // optional sint32 lt = 2;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lt());
    }

    // optional sint32 lte = 3;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lte());
    }

    // optional sint32 gt = 4;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gt());
    }

    // optional sint32 gte = 5;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gte());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt32Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.SInt32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const SInt32Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt32Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.SInt32Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.SInt32Rules)
    MergeFrom(*source);
  }
}

void SInt32Rules::MergeFrom(const SInt32Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.SInt32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SInt32Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.SInt32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt32Rules::CopyFrom(const SInt32Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.SInt32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt32Rules::IsInitialized() const {
  return true;
}

void SInt32Rules::Swap(SInt32Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt32Rules::InternalSwap(SInt32Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt32Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt32Rules

// optional sint32 const = 1;
bool SInt32Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SInt32Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void SInt32Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void SInt32Rules::clear_const_() {
  const__ = 0;
  clear_has_const_();
}
::google::protobuf::int32 SInt32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.const)
  return const__;
}
void SInt32Rules::set_const_(::google::protobuf::int32 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.const)
}

// optional sint32 lt = 2;
bool SInt32Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SInt32Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void SInt32Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SInt32Rules::clear_lt() {
  lt_ = 0;
  clear_has_lt();
}
::google::protobuf::int32 SInt32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.lt)
  return lt_;
}
void SInt32Rules::set_lt(::google::protobuf::int32 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.lt)
}

// optional sint32 lte = 3;
bool SInt32Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SInt32Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void SInt32Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void SInt32Rules::clear_lte() {
  lte_ = 0;
  clear_has_lte();
}
::google::protobuf::int32 SInt32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.lte)
  return lte_;
}
void SInt32Rules::set_lte(::google::protobuf::int32 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.lte)
}

// optional sint32 gt = 4;
bool SInt32Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SInt32Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void SInt32Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void SInt32Rules::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
::google::protobuf::int32 SInt32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.gt)
  return gt_;
}
void SInt32Rules::set_gt(::google::protobuf::int32 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.gt)
}

// optional sint32 gte = 5;
bool SInt32Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SInt32Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void SInt32Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void SInt32Rules::clear_gte() {
  gte_ = 0;
  clear_has_gte();
}
::google::protobuf::int32 SInt32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.gte)
  return gte_;
}
void SInt32Rules::set_gte(::google::protobuf::int32 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.gte)
}

// repeated sint32 in = 6;
int SInt32Rules::in_size() const {
  return in_.size();
}
void SInt32Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::int32 SInt32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.in)
  return in_.Get(index);
}
void SInt32Rules::set_in(int index, ::google::protobuf::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.in)
}
void SInt32Rules::add_in(::google::protobuf::int32 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SInt32Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SInt32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SInt32Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SInt32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt32Rules.in)
  return &in_;
}

// repeated sint32 not_in = 7;
int SInt32Rules::not_in_size() const {
  return not_in_.size();
}
void SInt32Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int32 SInt32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt32Rules.not_in)
  return not_in_.Get(index);
}
void SInt32Rules::set_not_in(int index, ::google::protobuf::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt32Rules.not_in)
}
void SInt32Rules::add_not_in(::google::protobuf::int32 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SInt32Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SInt32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SInt32Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SInt32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt32Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt64Rules::kConstFieldNumber;
const int SInt64Rules::kLtFieldNumber;
const int SInt64Rules::kLteFieldNumber;
const int SInt64Rules::kGtFieldNumber;
const int SInt64Rules::kGteFieldNumber;
const int SInt64Rules::kInFieldNumber;
const int SInt64Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt64Rules::SInt64Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.SInt64Rules)
}
SInt64Rules::SInt64Rules(const SInt64Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.SInt64Rules)
}

void SInt64Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

SInt64Rules::~SInt64Rules() {
  // @@protoc_insertion_point(destructor:validate.SInt64Rules)
  SharedDtor();
}

void SInt64Rules::SharedDtor() {
}

void SInt64Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt64Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SInt64Rules& SInt64Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

SInt64Rules* SInt64Rules::New(::google::protobuf::Arena* arena) const {
  SInt64Rules* n = new SInt64Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt64Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.SInt64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SInt64Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.SInt64Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 48u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 56u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.SInt64Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.SInt64Rules)
  return false;
#undef DO_
}

void SInt64Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.SInt64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->const_(), output);
  }

  // optional sint64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->lt(), output);
  }

  // optional sint64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->lte(), output);
  }

  // optional sint64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->gt(), output);
  }

  // optional sint64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->gte(), output);
  }

  // repeated sint64 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      6, this->in(i), output);
  }

  // repeated sint64 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.SInt64Rules)
}

::google::protobuf::uint8* SInt64Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.SInt64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->const_(), target);
  }

  // optional sint64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->lt(), target);
  }

  // optional sint64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->lte(), target);
  }

  // optional sint64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->gt(), target);
  }

  // optional sint64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->gte(), target);
  }

  // repeated sint64 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(6, this->in_, target);

  // repeated sint64 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.SInt64Rules)
  return target;
}

size_t SInt64Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.SInt64Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint64 in = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated sint64 not_in = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional sint64 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->const_());
    }

    // optional sint64 lt = 2;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lt());
    }

    // optional sint64 lte = 3;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lte());
    }

    // optional sint64 gt = 4;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->gt());
    }

    // optional sint64 gte = 5;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->gte());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt64Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.SInt64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const SInt64Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt64Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.SInt64Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.SInt64Rules)
    MergeFrom(*source);
  }
}

void SInt64Rules::MergeFrom(const SInt64Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.SInt64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SInt64Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.SInt64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt64Rules::CopyFrom(const SInt64Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.SInt64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt64Rules::IsInitialized() const {
  return true;
}

void SInt64Rules::Swap(SInt64Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt64Rules::InternalSwap(SInt64Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt64Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt64Rules

// optional sint64 const = 1;
bool SInt64Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SInt64Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void SInt64Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void SInt64Rules::clear_const_() {
  const__ = GOOGLE_LONGLONG(0);
  clear_has_const_();
}
::google::protobuf::int64 SInt64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.const)
  return const__;
}
void SInt64Rules::set_const_(::google::protobuf::int64 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.const)
}

// optional sint64 lt = 2;
bool SInt64Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SInt64Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void SInt64Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SInt64Rules::clear_lt() {
  lt_ = GOOGLE_LONGLONG(0);
  clear_has_lt();
}
::google::protobuf::int64 SInt64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.lt)
  return lt_;
}
void SInt64Rules::set_lt(::google::protobuf::int64 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.lt)
}

// optional sint64 lte = 3;
bool SInt64Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SInt64Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void SInt64Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void SInt64Rules::clear_lte() {
  lte_ = GOOGLE_LONGLONG(0);
  clear_has_lte();
}
::google::protobuf::int64 SInt64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.lte)
  return lte_;
}
void SInt64Rules::set_lte(::google::protobuf::int64 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.lte)
}

// optional sint64 gt = 4;
bool SInt64Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SInt64Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void SInt64Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void SInt64Rules::clear_gt() {
  gt_ = GOOGLE_LONGLONG(0);
  clear_has_gt();
}
::google::protobuf::int64 SInt64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.gt)
  return gt_;
}
void SInt64Rules::set_gt(::google::protobuf::int64 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.gt)
}

// optional sint64 gte = 5;
bool SInt64Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SInt64Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void SInt64Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void SInt64Rules::clear_gte() {
  gte_ = GOOGLE_LONGLONG(0);
  clear_has_gte();
}
::google::protobuf::int64 SInt64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.gte)
  return gte_;
}
void SInt64Rules::set_gte(::google::protobuf::int64 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.gte)
}

// repeated sint64 in = 6;
int SInt64Rules::in_size() const {
  return in_.size();
}
void SInt64Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::int64 SInt64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.in)
  return in_.Get(index);
}
void SInt64Rules::set_in(int index, ::google::protobuf::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.in)
}
void SInt64Rules::add_in(::google::protobuf::int64 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SInt64Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SInt64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SInt64Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SInt64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt64Rules.in)
  return &in_;
}

// repeated sint64 not_in = 7;
int SInt64Rules::not_in_size() const {
  return not_in_.size();
}
void SInt64Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int64 SInt64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SInt64Rules.not_in)
  return not_in_.Get(index);
}
void SInt64Rules::set_not_in(int index, ::google::protobuf::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SInt64Rules.not_in)
}
void SInt64Rules::add_not_in(::google::protobuf::int64 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SInt64Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SInt64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SInt64Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SInt64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SInt64Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fixed32Rules::kConstFieldNumber;
const int Fixed32Rules::kLtFieldNumber;
const int Fixed32Rules::kLteFieldNumber;
const int Fixed32Rules::kGtFieldNumber;
const int Fixed32Rules::kGteFieldNumber;
const int Fixed32Rules::kInFieldNumber;
const int Fixed32Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fixed32Rules::Fixed32Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.Fixed32Rules)
}
Fixed32Rules::Fixed32Rules(const Fixed32Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.Fixed32Rules)
}

void Fixed32Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

Fixed32Rules::~Fixed32Rules() {
  // @@protoc_insertion_point(destructor:validate.Fixed32Rules)
  SharedDtor();
}

void Fixed32Rules::SharedDtor() {
}

void Fixed32Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fixed32Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fixed32Rules& Fixed32Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fixed32Rules* Fixed32Rules::New(::google::protobuf::Arena* arena) const {
  Fixed32Rules* n = new Fixed32Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fixed32Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.Fixed32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fixed32Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.Fixed32Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 53u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.Fixed32Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.Fixed32Rules)
  return false;
#undef DO_
}

void Fixed32Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.Fixed32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->const_(), output);
  }

  // optional fixed32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->lt(), output);
  }

  // optional fixed32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->lte(), output);
  }

  // optional fixed32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->gt(), output);
  }

  // optional fixed32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->gte(), output);
  }

  // repeated fixed32 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      6, this->in(i), output);
  }

  // repeated fixed32 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.Fixed32Rules)
}

::google::protobuf::uint8* Fixed32Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.Fixed32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->const_(), target);
  }

  // optional fixed32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->lt(), target);
  }

  // optional fixed32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->lte(), target);
  }

  // optional fixed32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->gt(), target);
  }

  // optional fixed32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->gte(), target);
  }

  // repeated fixed32 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(6, this->in_, target);

  // repeated fixed32 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.Fixed32Rules)
  return target;
}

size_t Fixed32Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.Fixed32Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated fixed32 not_in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed32 const = 1;
    if (has_const_()) {
      total_size += 1 + 4;
    }

    // optional fixed32 lt = 2;
    if (has_lt()) {
      total_size += 1 + 4;
    }

    // optional fixed32 lte = 3;
    if (has_lte()) {
      total_size += 1 + 4;
    }

    // optional fixed32 gt = 4;
    if (has_gt()) {
      total_size += 1 + 4;
    }

    // optional fixed32 gte = 5;
    if (has_gte()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fixed32Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.Fixed32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const Fixed32Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fixed32Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.Fixed32Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.Fixed32Rules)
    MergeFrom(*source);
  }
}

void Fixed32Rules::MergeFrom(const Fixed32Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.Fixed32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fixed32Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.Fixed32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fixed32Rules::CopyFrom(const Fixed32Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.Fixed32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fixed32Rules::IsInitialized() const {
  return true;
}

void Fixed32Rules::Swap(Fixed32Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fixed32Rules::InternalSwap(Fixed32Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fixed32Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fixed32Rules

// optional fixed32 const = 1;
bool Fixed32Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fixed32Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void Fixed32Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fixed32Rules::clear_const_() {
  const__ = 0u;
  clear_has_const_();
}
::google::protobuf::uint32 Fixed32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.const)
  return const__;
}
void Fixed32Rules::set_const_(::google::protobuf::uint32 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.const)
}

// optional fixed32 lt = 2;
bool Fixed32Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fixed32Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void Fixed32Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fixed32Rules::clear_lt() {
  lt_ = 0u;
  clear_has_lt();
}
::google::protobuf::uint32 Fixed32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.lt)
  return lt_;
}
void Fixed32Rules::set_lt(::google::protobuf::uint32 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.lt)
}

// optional fixed32 lte = 3;
bool Fixed32Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fixed32Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void Fixed32Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fixed32Rules::clear_lte() {
  lte_ = 0u;
  clear_has_lte();
}
::google::protobuf::uint32 Fixed32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.lte)
  return lte_;
}
void Fixed32Rules::set_lte(::google::protobuf::uint32 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.lte)
}

// optional fixed32 gt = 4;
bool Fixed32Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fixed32Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void Fixed32Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fixed32Rules::clear_gt() {
  gt_ = 0u;
  clear_has_gt();
}
::google::protobuf::uint32 Fixed32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.gt)
  return gt_;
}
void Fixed32Rules::set_gt(::google::protobuf::uint32 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.gt)
}

// optional fixed32 gte = 5;
bool Fixed32Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Fixed32Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void Fixed32Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void Fixed32Rules::clear_gte() {
  gte_ = 0u;
  clear_has_gte();
}
::google::protobuf::uint32 Fixed32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.gte)
  return gte_;
}
void Fixed32Rules::set_gte(::google::protobuf::uint32 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.gte)
}

// repeated fixed32 in = 6;
int Fixed32Rules::in_size() const {
  return in_.size();
}
void Fixed32Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::uint32 Fixed32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.in)
  return in_.Get(index);
}
void Fixed32Rules::set_in(int index, ::google::protobuf::uint32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.in)
}
void Fixed32Rules::add_in(::google::protobuf::uint32 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Fixed32Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Fixed32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed32Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Fixed32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed32Rules.in)
  return &in_;
}

// repeated fixed32 not_in = 7;
int Fixed32Rules::not_in_size() const {
  return not_in_.size();
}
void Fixed32Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::uint32 Fixed32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed32Rules.not_in)
  return not_in_.Get(index);
}
void Fixed32Rules::set_not_in(int index, ::google::protobuf::uint32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed32Rules.not_in)
}
void Fixed32Rules::add_not_in(::google::protobuf::uint32 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Fixed32Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Fixed32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed32Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Fixed32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed32Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fixed64Rules::kConstFieldNumber;
const int Fixed64Rules::kLtFieldNumber;
const int Fixed64Rules::kLteFieldNumber;
const int Fixed64Rules::kGtFieldNumber;
const int Fixed64Rules::kGteFieldNumber;
const int Fixed64Rules::kInFieldNumber;
const int Fixed64Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fixed64Rules::Fixed64Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.Fixed64Rules)
}
Fixed64Rules::Fixed64Rules(const Fixed64Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.Fixed64Rules)
}

void Fixed64Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

Fixed64Rules::~Fixed64Rules() {
  // @@protoc_insertion_point(destructor:validate.Fixed64Rules)
  SharedDtor();
}

void Fixed64Rules::SharedDtor() {
}

void Fixed64Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fixed64Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fixed64Rules& Fixed64Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fixed64Rules* Fixed64Rules::New(::google::protobuf::Arena* arena) const {
  Fixed64Rules* n = new Fixed64Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fixed64Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.Fixed64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fixed64Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.Fixed64Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 49u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 57u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.Fixed64Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.Fixed64Rules)
  return false;
#undef DO_
}

void Fixed64Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.Fixed64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->const_(), output);
  }

  // optional fixed64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lt(), output);
  }

  // optional fixed64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->lte(), output);
  }

  // optional fixed64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gt(), output);
  }

  // optional fixed64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->gte(), output);
  }

  // repeated fixed64 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      6, this->in(i), output);
  }

  // repeated fixed64 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.Fixed64Rules)
}

::google::protobuf::uint8* Fixed64Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.Fixed64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->const_(), target);
  }

  // optional fixed64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lt(), target);
  }

  // optional fixed64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->lte(), target);
  }

  // optional fixed64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gt(), target);
  }

  // optional fixed64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->gte(), target);
  }

  // repeated fixed64 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(6, this->in_, target);

  // repeated fixed64 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.Fixed64Rules)
  return target;
}

size_t Fixed64Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.Fixed64Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed64 in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated fixed64 not_in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 const = 1;
    if (has_const_()) {
      total_size += 1 + 8;
    }

    // optional fixed64 lt = 2;
    if (has_lt()) {
      total_size += 1 + 8;
    }

    // optional fixed64 lte = 3;
    if (has_lte()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gt = 4;
    if (has_gt()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gte = 5;
    if (has_gte()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fixed64Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.Fixed64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const Fixed64Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fixed64Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.Fixed64Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.Fixed64Rules)
    MergeFrom(*source);
  }
}

void Fixed64Rules::MergeFrom(const Fixed64Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.Fixed64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fixed64Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.Fixed64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fixed64Rules::CopyFrom(const Fixed64Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.Fixed64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fixed64Rules::IsInitialized() const {
  return true;
}

void Fixed64Rules::Swap(Fixed64Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fixed64Rules::InternalSwap(Fixed64Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fixed64Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fixed64Rules

// optional fixed64 const = 1;
bool Fixed64Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fixed64Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void Fixed64Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fixed64Rules::clear_const_() {
  const__ = GOOGLE_ULONGLONG(0);
  clear_has_const_();
}
::google::protobuf::uint64 Fixed64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.const)
  return const__;
}
void Fixed64Rules::set_const_(::google::protobuf::uint64 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.const)
}

// optional fixed64 lt = 2;
bool Fixed64Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Fixed64Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void Fixed64Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Fixed64Rules::clear_lt() {
  lt_ = GOOGLE_ULONGLONG(0);
  clear_has_lt();
}
::google::protobuf::uint64 Fixed64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.lt)
  return lt_;
}
void Fixed64Rules::set_lt(::google::protobuf::uint64 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.lt)
}

// optional fixed64 lte = 3;
bool Fixed64Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fixed64Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void Fixed64Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fixed64Rules::clear_lte() {
  lte_ = GOOGLE_ULONGLONG(0);
  clear_has_lte();
}
::google::protobuf::uint64 Fixed64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.lte)
  return lte_;
}
void Fixed64Rules::set_lte(::google::protobuf::uint64 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.lte)
}

// optional fixed64 gt = 4;
bool Fixed64Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Fixed64Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void Fixed64Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void Fixed64Rules::clear_gt() {
  gt_ = GOOGLE_ULONGLONG(0);
  clear_has_gt();
}
::google::protobuf::uint64 Fixed64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.gt)
  return gt_;
}
void Fixed64Rules::set_gt(::google::protobuf::uint64 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.gt)
}

// optional fixed64 gte = 5;
bool Fixed64Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Fixed64Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void Fixed64Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void Fixed64Rules::clear_gte() {
  gte_ = GOOGLE_ULONGLONG(0);
  clear_has_gte();
}
::google::protobuf::uint64 Fixed64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.gte)
  return gte_;
}
void Fixed64Rules::set_gte(::google::protobuf::uint64 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.gte)
}

// repeated fixed64 in = 6;
int Fixed64Rules::in_size() const {
  return in_.size();
}
void Fixed64Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::uint64 Fixed64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.in)
  return in_.Get(index);
}
void Fixed64Rules::set_in(int index, ::google::protobuf::uint64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.in)
}
void Fixed64Rules::add_in(::google::protobuf::uint64 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Fixed64Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Fixed64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed64Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Fixed64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed64Rules.in)
  return &in_;
}

// repeated fixed64 not_in = 7;
int Fixed64Rules::not_in_size() const {
  return not_in_.size();
}
void Fixed64Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::uint64 Fixed64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.Fixed64Rules.not_in)
  return not_in_.Get(index);
}
void Fixed64Rules::set_not_in(int index, ::google::protobuf::uint64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.Fixed64Rules.not_in)
}
void Fixed64Rules::add_not_in(::google::protobuf::uint64 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.Fixed64Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Fixed64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.Fixed64Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Fixed64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.Fixed64Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SFixed32Rules::kConstFieldNumber;
const int SFixed32Rules::kLtFieldNumber;
const int SFixed32Rules::kLteFieldNumber;
const int SFixed32Rules::kGtFieldNumber;
const int SFixed32Rules::kGteFieldNumber;
const int SFixed32Rules::kInFieldNumber;
const int SFixed32Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SFixed32Rules::SFixed32Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.SFixed32Rules)
}
SFixed32Rules::SFixed32Rules(const SFixed32Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.SFixed32Rules)
}

void SFixed32Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

SFixed32Rules::~SFixed32Rules() {
  // @@protoc_insertion_point(destructor:validate.SFixed32Rules)
  SharedDtor();
}

void SFixed32Rules::SharedDtor() {
}

void SFixed32Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SFixed32Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SFixed32Rules& SFixed32Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

SFixed32Rules* SFixed32Rules::New(::google::protobuf::Arena* arena) const {
  SFixed32Rules* n = new SFixed32Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SFixed32Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.SFixed32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SFixed32Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.SFixed32Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 53u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 61u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.SFixed32Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.SFixed32Rules)
  return false;
#undef DO_
}

void SFixed32Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.SFixed32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->const_(), output);
  }

  // optional sfixed32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->lt(), output);
  }

  // optional sfixed32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->lte(), output);
  }

  // optional sfixed32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->gt(), output);
  }

  // optional sfixed32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->gte(), output);
  }

  // repeated sfixed32 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      6, this->in(i), output);
  }

  // repeated sfixed32 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.SFixed32Rules)
}

::google::protobuf::uint8* SFixed32Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.SFixed32Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->const_(), target);
  }

  // optional sfixed32 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->lt(), target);
  }

  // optional sfixed32 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->lte(), target);
  }

  // optional sfixed32 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->gt(), target);
  }

  // optional sfixed32 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->gte(), target);
  }

  // repeated sfixed32 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSFixed32ToArray(6, this->in_, target);

  // repeated sfixed32 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSFixed32ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.SFixed32Rules)
  return target;
}

size_t SFixed32Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.SFixed32Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sfixed32 in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated sfixed32 not_in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional sfixed32 const = 1;
    if (has_const_()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 lt = 2;
    if (has_lt()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 lte = 3;
    if (has_lte()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 gt = 4;
    if (has_gt()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 gte = 5;
    if (has_gte()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SFixed32Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.SFixed32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const SFixed32Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SFixed32Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.SFixed32Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.SFixed32Rules)
    MergeFrom(*source);
  }
}

void SFixed32Rules::MergeFrom(const SFixed32Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.SFixed32Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SFixed32Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.SFixed32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFixed32Rules::CopyFrom(const SFixed32Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.SFixed32Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFixed32Rules::IsInitialized() const {
  return true;
}

void SFixed32Rules::Swap(SFixed32Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SFixed32Rules::InternalSwap(SFixed32Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SFixed32Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SFixed32Rules

// optional sfixed32 const = 1;
bool SFixed32Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SFixed32Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void SFixed32Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void SFixed32Rules::clear_const_() {
  const__ = 0;
  clear_has_const_();
}
::google::protobuf::int32 SFixed32Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.const)
  return const__;
}
void SFixed32Rules::set_const_(::google::protobuf::int32 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.const)
}

// optional sfixed32 lt = 2;
bool SFixed32Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SFixed32Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void SFixed32Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SFixed32Rules::clear_lt() {
  lt_ = 0;
  clear_has_lt();
}
::google::protobuf::int32 SFixed32Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.lt)
  return lt_;
}
void SFixed32Rules::set_lt(::google::protobuf::int32 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.lt)
}

// optional sfixed32 lte = 3;
bool SFixed32Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SFixed32Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void SFixed32Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void SFixed32Rules::clear_lte() {
  lte_ = 0;
  clear_has_lte();
}
::google::protobuf::int32 SFixed32Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.lte)
  return lte_;
}
void SFixed32Rules::set_lte(::google::protobuf::int32 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.lte)
}

// optional sfixed32 gt = 4;
bool SFixed32Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SFixed32Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void SFixed32Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void SFixed32Rules::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
::google::protobuf::int32 SFixed32Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.gt)
  return gt_;
}
void SFixed32Rules::set_gt(::google::protobuf::int32 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.gt)
}

// optional sfixed32 gte = 5;
bool SFixed32Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SFixed32Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void SFixed32Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void SFixed32Rules::clear_gte() {
  gte_ = 0;
  clear_has_gte();
}
::google::protobuf::int32 SFixed32Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.gte)
  return gte_;
}
void SFixed32Rules::set_gte(::google::protobuf::int32 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.gte)
}

// repeated sfixed32 in = 6;
int SFixed32Rules::in_size() const {
  return in_.size();
}
void SFixed32Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::int32 SFixed32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.in)
  return in_.Get(index);
}
void SFixed32Rules::set_in(int index, ::google::protobuf::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.in)
}
void SFixed32Rules::add_in(::google::protobuf::int32 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SFixed32Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SFixed32Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed32Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SFixed32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed32Rules.in)
  return &in_;
}

// repeated sfixed32 not_in = 7;
int SFixed32Rules::not_in_size() const {
  return not_in_.size();
}
void SFixed32Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int32 SFixed32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed32Rules.not_in)
  return not_in_.Get(index);
}
void SFixed32Rules::set_not_in(int index, ::google::protobuf::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed32Rules.not_in)
}
void SFixed32Rules::add_not_in(::google::protobuf::int32 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SFixed32Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SFixed32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed32Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SFixed32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed32Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SFixed64Rules::kConstFieldNumber;
const int SFixed64Rules::kLtFieldNumber;
const int SFixed64Rules::kLteFieldNumber;
const int SFixed64Rules::kGtFieldNumber;
const int SFixed64Rules::kGteFieldNumber;
const int SFixed64Rules::kInFieldNumber;
const int SFixed64Rules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SFixed64Rules::SFixed64Rules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.SFixed64Rules)
}
SFixed64Rules::SFixed64Rules(const SFixed64Rules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&gte_) -
    reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  // @@protoc_insertion_point(copy_constructor:validate.SFixed64Rules)
}

void SFixed64Rules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gte_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gte_));
}

SFixed64Rules::~SFixed64Rules() {
  // @@protoc_insertion_point(destructor:validate.SFixed64Rules)
  SharedDtor();
}

void SFixed64Rules::SharedDtor() {
}

void SFixed64Rules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SFixed64Rules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SFixed64Rules& SFixed64Rules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

SFixed64Rules* SFixed64Rules::New(::google::protobuf::Arena* arena) const {
  SFixed64Rules* n = new SFixed64Rules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SFixed64Rules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.SFixed64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gte_) -
        reinterpret_cast<char*>(&const__)) + sizeof(gte_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SFixed64Rules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.SFixed64Rules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 lt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 lte = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &lte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 gt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 gte = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &gte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed64 in = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 1, 49u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed64 not_in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 1, 57u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.SFixed64Rules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.SFixed64Rules)
  return false;
#undef DO_
}

void SFixed64Rules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.SFixed64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->const_(), output);
  }

  // optional sfixed64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->lt(), output);
  }

  // optional sfixed64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->lte(), output);
  }

  // optional sfixed64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->gt(), output);
  }

  // optional sfixed64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->gte(), output);
  }

  // repeated sfixed64 in = 6;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      6, this->in(i), output);
  }

  // repeated sfixed64 not_in = 7;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      7, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.SFixed64Rules)
}

::google::protobuf::uint8* SFixed64Rules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.SFixed64Rules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->const_(), target);
  }

  // optional sfixed64 lt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->lt(), target);
  }

  // optional sfixed64 lte = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->lte(), target);
  }

  // optional sfixed64 gt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->gt(), target);
  }

  // optional sfixed64 gte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->gte(), target);
  }

  // repeated sfixed64 in = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSFixed64ToArray(6, this->in_, target);

  // repeated sfixed64 not_in = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSFixed64ToArray(7, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.SFixed64Rules)
  return target;
}

size_t SFixed64Rules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.SFixed64Rules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sfixed64 in = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated sfixed64 not_in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional sfixed64 const = 1;
    if (has_const_()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 lt = 2;
    if (has_lt()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 lte = 3;
    if (has_lte()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 gt = 4;
    if (has_gt()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 gte = 5;
    if (has_gte()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SFixed64Rules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.SFixed64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  const SFixed64Rules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SFixed64Rules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.SFixed64Rules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.SFixed64Rules)
    MergeFrom(*source);
  }
}

void SFixed64Rules::MergeFrom(const SFixed64Rules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.SFixed64Rules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      lt_ = from.lt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lte_ = from.lte_;
    }
    if (cached_has_bits & 0x00000008u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000010u) {
      gte_ = from.gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SFixed64Rules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.SFixed64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFixed64Rules::CopyFrom(const SFixed64Rules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.SFixed64Rules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFixed64Rules::IsInitialized() const {
  return true;
}

void SFixed64Rules::Swap(SFixed64Rules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SFixed64Rules::InternalSwap(SFixed64Rules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SFixed64Rules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SFixed64Rules

// optional sfixed64 const = 1;
bool SFixed64Rules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SFixed64Rules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void SFixed64Rules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void SFixed64Rules::clear_const_() {
  const__ = GOOGLE_LONGLONG(0);
  clear_has_const_();
}
::google::protobuf::int64 SFixed64Rules::const_() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.const)
  return const__;
}
void SFixed64Rules::set_const_(::google::protobuf::int64 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.const)
}

// optional sfixed64 lt = 2;
bool SFixed64Rules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SFixed64Rules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void SFixed64Rules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void SFixed64Rules::clear_lt() {
  lt_ = GOOGLE_LONGLONG(0);
  clear_has_lt();
}
::google::protobuf::int64 SFixed64Rules::lt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.lt)
  return lt_;
}
void SFixed64Rules::set_lt(::google::protobuf::int64 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.lt)
}

// optional sfixed64 lte = 3;
bool SFixed64Rules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SFixed64Rules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void SFixed64Rules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void SFixed64Rules::clear_lte() {
  lte_ = GOOGLE_LONGLONG(0);
  clear_has_lte();
}
::google::protobuf::int64 SFixed64Rules::lte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.lte)
  return lte_;
}
void SFixed64Rules::set_lte(::google::protobuf::int64 value) {
  set_has_lte();
  lte_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.lte)
}

// optional sfixed64 gt = 4;
bool SFixed64Rules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SFixed64Rules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void SFixed64Rules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void SFixed64Rules::clear_gt() {
  gt_ = GOOGLE_LONGLONG(0);
  clear_has_gt();
}
::google::protobuf::int64 SFixed64Rules::gt() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.gt)
  return gt_;
}
void SFixed64Rules::set_gt(::google::protobuf::int64 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.gt)
}

// optional sfixed64 gte = 5;
bool SFixed64Rules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SFixed64Rules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void SFixed64Rules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void SFixed64Rules::clear_gte() {
  gte_ = GOOGLE_LONGLONG(0);
  clear_has_gte();
}
::google::protobuf::int64 SFixed64Rules::gte() const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.gte)
  return gte_;
}
void SFixed64Rules::set_gte(::google::protobuf::int64 value) {
  set_has_gte();
  gte_ = value;
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.gte)
}

// repeated sfixed64 in = 6;
int SFixed64Rules::in_size() const {
  return in_.size();
}
void SFixed64Rules::clear_in() {
  in_.Clear();
}
::google::protobuf::int64 SFixed64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.in)
  return in_.Get(index);
}
void SFixed64Rules::set_in(int index, ::google::protobuf::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.in)
}
void SFixed64Rules::add_in(::google::protobuf::int64 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SFixed64Rules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SFixed64Rules::in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed64Rules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SFixed64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed64Rules.in)
  return &in_;
}

// repeated sfixed64 not_in = 7;
int SFixed64Rules::not_in_size() const {
  return not_in_.size();
}
void SFixed64Rules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int64 SFixed64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.SFixed64Rules.not_in)
  return not_in_.Get(index);
}
void SFixed64Rules::set_not_in(int index, ::google::protobuf::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.SFixed64Rules.not_in)
}
void SFixed64Rules::add_not_in(::google::protobuf::int64 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.SFixed64Rules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SFixed64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.SFixed64Rules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SFixed64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.SFixed64Rules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolRules::kConstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolRules::BoolRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.BoolRules)
}
BoolRules::BoolRules(const BoolRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const__ = from.const__;
  // @@protoc_insertion_point(copy_constructor:validate.BoolRules)
}

void BoolRules::SharedCtor() {
  _cached_size_ = 0;
  const__ = false;
}

BoolRules::~BoolRules() {
  // @@protoc_insertion_point(destructor:validate.BoolRules)
  SharedDtor();
}

void BoolRules::SharedDtor() {
}

void BoolRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoolRules& BoolRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoolRules* BoolRules::New(::google::protobuf::Arena* arena) const {
  BoolRules* n = new BoolRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.BoolRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  const__ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoolRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.BoolRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.BoolRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.BoolRules)
  return false;
#undef DO_
}

void BoolRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.BoolRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->const_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.BoolRules)
}

::google::protobuf::uint8* BoolRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.BoolRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->const_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.BoolRules)
  return target;
}

size_t BoolRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.BoolRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool const = 1;
  if (has_const_()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.BoolRules)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.BoolRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.BoolRules)
    MergeFrom(*source);
  }
}

void BoolRules::MergeFrom(const BoolRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.BoolRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_const_()) {
    set_const_(from.const_());
  }
}

void BoolRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.BoolRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolRules::CopyFrom(const BoolRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.BoolRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolRules::IsInitialized() const {
  return true;
}

void BoolRules::Swap(BoolRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolRules::InternalSwap(BoolRules* other) {
  using std::swap;
  swap(const__, other->const__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolRules

// optional bool const = 1;
bool BoolRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoolRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void BoolRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoolRules::clear_const_() {
  const__ = false;
  clear_has_const_();
}
bool BoolRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.BoolRules.const)
  return const__;
}
void BoolRules::set_const_(bool value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.BoolRules.const)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringRules::kConstFieldNumber;
const int StringRules::kLenFieldNumber;
const int StringRules::kMinLenFieldNumber;
const int StringRules::kMaxLenFieldNumber;
const int StringRules::kLenBytesFieldNumber;
const int StringRules::kMinBytesFieldNumber;
const int StringRules::kMaxBytesFieldNumber;
const int StringRules::kPatternFieldNumber;
const int StringRules::kPrefixFieldNumber;
const int StringRules::kSuffixFieldNumber;
const int StringRules::kContainsFieldNumber;
const int StringRules::kInFieldNumber;
const int StringRules::kNotInFieldNumber;
const int StringRules::kEmailFieldNumber;
const int StringRules::kHostnameFieldNumber;
const int StringRules::kIpFieldNumber;
const int StringRules::kIpv4FieldNumber;
const int StringRules::kIpv6FieldNumber;
const int StringRules::kUriFieldNumber;
const int StringRules::kUriRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringRules::StringRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.StringRules)
}
StringRules::StringRules(const StringRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_const_()) {
    const__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.const__);
  }
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suffix()) {
    suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  contains_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contains()) {
    contains_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contains_);
  }
  ::memcpy(&min_len_, &from.min_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_bytes_) -
    reinterpret_cast<char*>(&min_len_)) + sizeof(len_bytes_));
  clear_has_well_known();
  switch (from.well_known_case()) {
    case kEmail: {
      set_email(from.email());
      break;
    }
    case kHostname: {
      set_hostname(from.hostname());
      break;
    }
    case kIp: {
      set_ip(from.ip());
      break;
    }
    case kIpv4: {
      set_ipv4(from.ipv4());
      break;
    }
    case kIpv6: {
      set_ipv6(from.ipv6());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kUriRef: {
      set_uri_ref(from.uri_ref());
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validate.StringRules)
}

void StringRules::SharedCtor() {
  _cached_size_ = 0;
  const__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contains_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_bytes_) -
      reinterpret_cast<char*>(&min_len_)) + sizeof(len_bytes_));
  clear_has_well_known();
}

StringRules::~StringRules() {
  // @@protoc_insertion_point(destructor:validate.StringRules)
  SharedDtor();
}

void StringRules::SharedDtor() {
  const__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contains_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_well_known()) {
    clear_well_known();
  }
}

void StringRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringRules& StringRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringRules* StringRules::New(::google::protobuf::Arena* arena) const {
  StringRules* n = new StringRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringRules::clear_well_known() {
// @@protoc_insertion_point(one_of_clear_start:validate.StringRules)
  switch (well_known_case()) {
    case kEmail: {
      // No need to clear
      break;
    }
    case kHostname: {
      // No need to clear
      break;
    }
    case kIp: {
      // No need to clear
      break;
    }
    case kIpv4: {
      // No need to clear
      break;
    }
    case kIpv6: {
      // No need to clear
      break;
    }
    case kUri: {
      // No need to clear
      break;
    }
    case kUriRef: {
      // No need to clear
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}


void StringRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.StringRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!const__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*const__.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pattern_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prefix_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!suffix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*suffix_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!contains_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contains_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&min_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_bytes_) -
        reinterpret_cast<char*>(&min_len_)) + sizeof(min_bytes_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&max_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&len_bytes_) -
        reinterpret_cast<char*>(&max_bytes_)) + sizeof(len_bytes_));
  }
  clear_well_known();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.StringRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_const_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->const_().data(), static_cast<int>(this->const_().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.const");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_max_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pattern = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.pattern");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prefix = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suffix = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suffix().data(), static_cast<int>(this->suffix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.suffix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contains = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contains()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contains().data(), static_cast<int>(this->contains().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.contains");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string in = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in(this->in_size() - 1).data(),
            static_cast<int>(this->in(this->in_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string not_in = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_in(this->not_in_size() - 1).data(),
            static_cast<int>(this->not_in(this->not_in_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.StringRules.not_in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool email = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.email_)));
          set_has_email();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hostname = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.hostname_)));
          set_has_hostname();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ip = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ipv4 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.ipv4_)));
          set_has_ipv4();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ipv6 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.ipv6_)));
          set_has_ipv6();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool uri = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.uri_)));
          set_has_uri();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool uri_ref = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.uri_ref_)));
          set_has_uri_ref();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 len = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 len_bytes = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_len_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.StringRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.StringRules)
  return false;
#undef DO_
}

void StringRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.StringRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->const_().data(), static_cast<int>(this->const_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.const");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->const_(), output);
  }

  // optional uint64 min_len = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_len(), output);
  }

  // optional uint64 max_len = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_len(), output);
  }

  // optional uint64 min_bytes = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->min_bytes(), output);
  }

  // optional uint64 max_bytes = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_bytes(), output);
  }

  // optional string pattern = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pattern(), output);
  }

  // optional string prefix = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->prefix(), output);
  }

  // optional string suffix = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->suffix(), output);
  }

  // optional string contains = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contains().data(), static_cast<int>(this->contains().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.contains");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->contains(), output);
  }

  // repeated string in = 10;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), static_cast<int>(this->in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->in(i), output);
  }

  // repeated string not_in = 11;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_in(i).data(), static_cast<int>(this->not_in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.not_in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->not_in(i), output);
  }

  switch (well_known_case()) {
    case kEmail:
      ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->email(), output);
      break;
    case kHostname:
      ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->hostname(), output);
      break;
    case kIp:
      ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ip(), output);
      break;
    case kIpv4:
      ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ipv4(), output);
      break;
    case kIpv6:
      ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->ipv6(), output);
      break;
    case kUri:
      ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->uri(), output);
      break;
    case kUriRef:
      ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->uri_ref(), output);
      break;
    default: ;
  }
  // optional uint64 len = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->len(), output);
  }

  // optional uint64 len_bytes = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->len_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.StringRules)
}

::google::protobuf::uint8* StringRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.StringRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->const_().data(), static_cast<int>(this->const_().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.const");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->const_(), target);
  }

  // optional uint64 min_len = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_len(), target);
  }

  // optional uint64 max_len = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_len(), target);
  }

  // optional uint64 min_bytes = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->min_bytes(), target);
  }

  // optional uint64 max_bytes = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_bytes(), target);
  }

  // optional string pattern = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pattern(), target);
  }

  // optional string prefix = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->prefix(), target);
  }

  // optional string suffix = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->suffix(), target);
  }

  // optional string contains = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contains().data(), static_cast<int>(this->contains().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.contains");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->contains(), target);
  }

  // repeated string in = 10;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), static_cast<int>(this->in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->in(i), target);
  }

  // repeated string not_in = 11;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_in(i).data(), static_cast<int>(this->not_in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.StringRules.not_in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->not_in(i), target);
  }

  switch (well_known_case()) {
    case kEmail:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->email(), target);
      break;
    case kHostname:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->hostname(), target);
      break;
    case kIp:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ip(), target);
      break;
    case kIpv4:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ipv4(), target);
      break;
    case kIpv6:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->ipv6(), target);
      break;
    case kUri:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->uri(), target);
      break;
    case kUriRef:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->uri_ref(), target);
      break;
    default: ;
  }
  // optional uint64 len = 19;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->len(), target);
  }

  // optional uint64 len_bytes = 20;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->len_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.StringRules)
  return target;
}

size_t StringRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.StringRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string in = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0, n = this->in_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in(i));
  }

  // repeated string not_in = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_in_size());
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_in(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->const_());
    }

    // optional string pattern = 6;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string prefix = 7;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional string suffix = 8;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string contains = 9;
    if (has_contains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contains());
    }

    // optional uint64 min_len = 2;
    if (has_min_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_len());
    }

    // optional uint64 max_len = 3;
    if (has_max_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_len());
    }

    // optional uint64 min_bytes = 4;
    if (has_min_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_bytes());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint64 max_bytes = 5;
    if (has_max_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_bytes());
    }

    // optional uint64 len = 19;
    if (has_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->len());
    }

    // optional uint64 len_bytes = 20;
    if (has_len_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->len_bytes());
    }

  }
  switch (well_known_case()) {
    // optional bool email = 12;
    case kEmail: {
      total_size += 1 + 1;
      break;
    }
    // optional bool hostname = 13;
    case kHostname: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ip = 14;
    case kIp: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ipv4 = 15;
    case kIpv4: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ipv6 = 16;
    case kIpv6: {
      total_size += 2 + 1;
      break;
    }
    // optional bool uri = 17;
    case kUri: {
      total_size += 2 + 1;
      break;
    }
    // optional bool uri_ref = 18;
    case kUriRef: {
      total_size += 2 + 1;
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.StringRules)
  GOOGLE_DCHECK_NE(&from, this);
  const StringRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.StringRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.StringRules)
    MergeFrom(*source);
  }
}

void StringRules::MergeFrom(const StringRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.StringRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_const_();
      const__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.const__);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pattern();
      pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_contains();
      contains_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contains_);
    }
    if (cached_has_bits & 0x00000020u) {
      min_len_ = from.min_len_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_len_ = from.max_len_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_bytes_ = from.min_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      max_bytes_ = from.max_bytes_;
    }
    if (cached_has_bits & 0x00000200u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000400u) {
      len_bytes_ = from.len_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.well_known_case()) {
    case kEmail: {
      set_email(from.email());
      break;
    }
    case kHostname: {
      set_hostname(from.hostname());
      break;
    }
    case kIp: {
      set_ip(from.ip());
      break;
    }
    case kIpv4: {
      set_ipv4(from.ipv4());
      break;
    }
    case kIpv6: {
      set_ipv6(from.ipv6());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kUriRef: {
      set_uri_ref(from.uri_ref());
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
}

void StringRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.StringRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringRules::CopyFrom(const StringRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.StringRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringRules::IsInitialized() const {
  return true;
}

void StringRules::Swap(StringRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringRules::InternalSwap(StringRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  const__.Swap(&other->const__);
  pattern_.Swap(&other->pattern_);
  prefix_.Swap(&other->prefix_);
  suffix_.Swap(&other->suffix_);
  contains_.Swap(&other->contains_);
  swap(min_len_, other->min_len_);
  swap(max_len_, other->max_len_);
  swap(min_bytes_, other->min_bytes_);
  swap(max_bytes_, other->max_bytes_);
  swap(len_, other->len_);
  swap(len_bytes_, other->len_bytes_);
  swap(well_known_, other->well_known_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringRules

// optional string const = 1;
bool StringRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StringRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void StringRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void StringRules::clear_const_() {
  const__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_const_();
}
const ::std::string& StringRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.const)
  return const__.GetNoArena();
}
void StringRules::set_const_(const ::std::string& value) {
  set_has_const_();
  const__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.StringRules.const)
}
#if LANG_CXX11
void StringRules::set_const_(::std::string&& value) {
  set_has_const_();
  const__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.StringRules.const)
}
#endif
void StringRules::set_const_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_const_();
  const__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.StringRules.const)
}
void StringRules::set_const_(const char* value, size_t size) {
  set_has_const_();
  const__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.const)
}
::std::string* StringRules::mutable_const_() {
  set_has_const_();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.const)
  return const__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringRules::release_const_() {
  // @@protoc_insertion_point(field_release:validate.StringRules.const)
  clear_has_const_();
  return const__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringRules::set_allocated_const_(::std::string* const_) {
  if (const_ != NULL) {
    set_has_const_();
  } else {
    clear_has_const_();
  }
  const__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), const_);
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.const)
}

// optional uint64 len = 19;
bool StringRules::has_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StringRules::set_has_len() {
  _has_bits_[0] |= 0x00000200u;
}
void StringRules::clear_has_len() {
  _has_bits_[0] &= ~0x00000200u;
}
void StringRules::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
  clear_has_len();
}
::google::protobuf::uint64 StringRules::len() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.len)
  return len_;
}
void StringRules::set_len(::google::protobuf::uint64 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.len)
}

// optional uint64 min_len = 2;
bool StringRules::has_min_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StringRules::set_has_min_len() {
  _has_bits_[0] |= 0x00000020u;
}
void StringRules::clear_has_min_len() {
  _has_bits_[0] &= ~0x00000020u;
}
void StringRules::clear_min_len() {
  min_len_ = GOOGLE_ULONGLONG(0);
  clear_has_min_len();
}
::google::protobuf::uint64 StringRules::min_len() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.min_len)
  return min_len_;
}
void StringRules::set_min_len(::google::protobuf::uint64 value) {
  set_has_min_len();
  min_len_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.min_len)
}

// optional uint64 max_len = 3;
bool StringRules::has_max_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StringRules::set_has_max_len() {
  _has_bits_[0] |= 0x00000040u;
}
void StringRules::clear_has_max_len() {
  _has_bits_[0] &= ~0x00000040u;
}
void StringRules::clear_max_len() {
  max_len_ = GOOGLE_ULONGLONG(0);
  clear_has_max_len();
}
::google::protobuf::uint64 StringRules::max_len() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.max_len)
  return max_len_;
}
void StringRules::set_max_len(::google::protobuf::uint64 value) {
  set_has_max_len();
  max_len_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.max_len)
}

// optional uint64 len_bytes = 20;
bool StringRules::has_len_bytes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StringRules::set_has_len_bytes() {
  _has_bits_[0] |= 0x00000400u;
}
void StringRules::clear_has_len_bytes() {
  _has_bits_[0] &= ~0x00000400u;
}
void StringRules::clear_len_bytes() {
  len_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_len_bytes();
}
::google::protobuf::uint64 StringRules::len_bytes() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.len_bytes)
  return len_bytes_;
}
void StringRules::set_len_bytes(::google::protobuf::uint64 value) {
  set_has_len_bytes();
  len_bytes_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.len_bytes)
}

// optional uint64 min_bytes = 4;
bool StringRules::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StringRules::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
void StringRules::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
void StringRules::clear_min_bytes() {
  min_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_min_bytes();
}
::google::protobuf::uint64 StringRules::min_bytes() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.min_bytes)
  return min_bytes_;
}
void StringRules::set_min_bytes(::google::protobuf::uint64 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.min_bytes)
}

// optional uint64 max_bytes = 5;
bool StringRules::has_max_bytes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StringRules::set_has_max_bytes() {
  _has_bits_[0] |= 0x00000100u;
}
void StringRules::clear_has_max_bytes() {
  _has_bits_[0] &= ~0x00000100u;
}
void StringRules::clear_max_bytes() {
  max_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_max_bytes();
}
::google::protobuf::uint64 StringRules::max_bytes() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.max_bytes)
  return max_bytes_;
}
void StringRules::set_max_bytes(::google::protobuf::uint64 value) {
  set_has_max_bytes();
  max_bytes_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.max_bytes)
}

// optional string pattern = 6;
bool StringRules::has_pattern() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StringRules::set_has_pattern() {
  _has_bits_[0] |= 0x00000002u;
}
void StringRules::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000002u;
}
void StringRules::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pattern();
}
const ::std::string& StringRules::pattern() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.pattern)
  return pattern_.GetNoArena();
}
void StringRules::set_pattern(const ::std::string& value) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.StringRules.pattern)
}
#if LANG_CXX11
void StringRules::set_pattern(::std::string&& value) {
  set_has_pattern();
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.StringRules.pattern)
}
#endif
void StringRules::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.StringRules.pattern)
}
void StringRules::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.pattern)
}
::std::string* StringRules::mutable_pattern() {
  set_has_pattern();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringRules::release_pattern() {
  // @@protoc_insertion_point(field_release:validate.StringRules.pattern)
  clear_has_pattern();
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringRules::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.pattern)
}

// optional string prefix = 7;
bool StringRules::has_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StringRules::set_has_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void StringRules::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void StringRules::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
const ::std::string& StringRules::prefix() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.prefix)
  return prefix_.GetNoArena();
}
void StringRules::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.StringRules.prefix)
}
#if LANG_CXX11
void StringRules::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.StringRules.prefix)
}
#endif
void StringRules::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.StringRules.prefix)
}
void StringRules::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.prefix)
}
::std::string* StringRules::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringRules::release_prefix() {
  // @@protoc_insertion_point(field_release:validate.StringRules.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringRules::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.prefix)
}

// optional string suffix = 8;
bool StringRules::has_suffix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StringRules::set_has_suffix() {
  _has_bits_[0] |= 0x00000008u;
}
void StringRules::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000008u;
}
void StringRules::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suffix();
}
const ::std::string& StringRules::suffix() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.suffix)
  return suffix_.GetNoArena();
}
void StringRules::set_suffix(const ::std::string& value) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.StringRules.suffix)
}
#if LANG_CXX11
void StringRules::set_suffix(::std::string&& value) {
  set_has_suffix();
  suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.StringRules.suffix)
}
#endif
void StringRules::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.StringRules.suffix)
}
void StringRules::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.suffix)
}
::std::string* StringRules::mutable_suffix() {
  set_has_suffix();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.suffix)
  return suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringRules::release_suffix() {
  // @@protoc_insertion_point(field_release:validate.StringRules.suffix)
  clear_has_suffix();
  return suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringRules::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    set_has_suffix();
  } else {
    clear_has_suffix();
  }
  suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.suffix)
}

// optional string contains = 9;
bool StringRules::has_contains() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StringRules::set_has_contains() {
  _has_bits_[0] |= 0x00000010u;
}
void StringRules::clear_has_contains() {
  _has_bits_[0] &= ~0x00000010u;
}
void StringRules::clear_contains() {
  contains_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contains();
}
const ::std::string& StringRules::contains() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.contains)
  return contains_.GetNoArena();
}
void StringRules::set_contains(const ::std::string& value) {
  set_has_contains();
  contains_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.StringRules.contains)
}
#if LANG_CXX11
void StringRules::set_contains(::std::string&& value) {
  set_has_contains();
  contains_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.StringRules.contains)
}
#endif
void StringRules::set_contains(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contains();
  contains_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.StringRules.contains)
}
void StringRules::set_contains(const char* value, size_t size) {
  set_has_contains();
  contains_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.contains)
}
::std::string* StringRules::mutable_contains() {
  set_has_contains();
  // @@protoc_insertion_point(field_mutable:validate.StringRules.contains)
  return contains_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringRules::release_contains() {
  // @@protoc_insertion_point(field_release:validate.StringRules.contains)
  clear_has_contains();
  return contains_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringRules::set_allocated_contains(::std::string* contains) {
  if (contains != NULL) {
    set_has_contains();
  } else {
    clear_has_contains();
  }
  contains_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contains);
  // @@protoc_insertion_point(field_set_allocated:validate.StringRules.contains)
}

// repeated string in = 10;
int StringRules::in_size() const {
  return in_.size();
}
void StringRules::clear_in() {
  in_.Clear();
}
const ::std::string& StringRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.StringRules.in)
  return in_.Get(index);
}
::std::string* StringRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.StringRules.in)
  return in_.Mutable(index);
}
void StringRules::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:validate.StringRules.in)
  in_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringRules::set_in(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:validate.StringRules.in)
  in_.Mutable(index)->assign(std::move(value));
}
#endif
void StringRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.StringRules.in)
}
void StringRules::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.in)
}
::std::string* StringRules::add_in() {
  // @@protoc_insertion_point(field_add_mutable:validate.StringRules.in)
  return in_.Add();
}
void StringRules::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.StringRules.in)
}
#if LANG_CXX11
void StringRules::add_in(::std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.StringRules.in)
}
#endif
void StringRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.StringRules.in)
}
void StringRules::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.StringRules.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringRules::in() const {
  // @@protoc_insertion_point(field_list:validate.StringRules.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.StringRules.in)
  return &in_;
}

// repeated string not_in = 11;
int StringRules::not_in_size() const {
  return not_in_.size();
}
void StringRules::clear_not_in() {
  not_in_.Clear();
}
const ::std::string& StringRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.StringRules.not_in)
  return not_in_.Get(index);
}
::std::string* StringRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.StringRules.not_in)
  return not_in_.Mutable(index);
}
void StringRules::set_not_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:validate.StringRules.not_in)
  not_in_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringRules::set_not_in(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:validate.StringRules.not_in)
  not_in_.Mutable(index)->assign(std::move(value));
}
#endif
void StringRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.StringRules.not_in)
}
void StringRules::set_not_in(int index, const char* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.StringRules.not_in)
}
::std::string* StringRules::add_not_in() {
  // @@protoc_insertion_point(field_add_mutable:validate.StringRules.not_in)
  return not_in_.Add();
}
void StringRules::add_not_in(const ::std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.StringRules.not_in)
}
#if LANG_CXX11
void StringRules::add_not_in(::std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.StringRules.not_in)
}
#endif
void StringRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.StringRules.not_in)
}
void StringRules::add_not_in(const char* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.StringRules.not_in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.StringRules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.StringRules.not_in)
  return &not_in_;
}

// optional bool email = 12;
bool StringRules::has_email() const {
  return well_known_case() == kEmail;
}
void StringRules::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void StringRules::clear_email() {
  if (has_email()) {
    well_known_.email_ = false;
    clear_has_well_known();
  }
}
bool StringRules::email() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.email)
  if (has_email()) {
    return well_known_.email_;
  }
  return false;
}
void StringRules::set_email(bool value) {
  if (!has_email()) {
    clear_well_known();
    set_has_email();
  }
  well_known_.email_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.email)
}

// optional bool hostname = 13;
bool StringRules::has_hostname() const {
  return well_known_case() == kHostname;
}
void StringRules::set_has_hostname() {
  _oneof_case_[0] = kHostname;
}
void StringRules::clear_hostname() {
  if (has_hostname()) {
    well_known_.hostname_ = false;
    clear_has_well_known();
  }
}
bool StringRules::hostname() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.hostname)
  if (has_hostname()) {
    return well_known_.hostname_;
  }
  return false;
}
void StringRules::set_hostname(bool value) {
  if (!has_hostname()) {
    clear_well_known();
    set_has_hostname();
  }
  well_known_.hostname_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.hostname)
}

// optional bool ip = 14;
bool StringRules::has_ip() const {
  return well_known_case() == kIp;
}
void StringRules::set_has_ip() {
  _oneof_case_[0] = kIp;
}
void StringRules::clear_ip() {
  if (has_ip()) {
    well_known_.ip_ = false;
    clear_has_well_known();
  }
}
bool StringRules::ip() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.ip)
  if (has_ip()) {
    return well_known_.ip_;
  }
  return false;
}
void StringRules::set_ip(bool value) {
  if (!has_ip()) {
    clear_well_known();
    set_has_ip();
  }
  well_known_.ip_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.ip)
}

// optional bool ipv4 = 15;
bool StringRules::has_ipv4() const {
  return well_known_case() == kIpv4;
}
void StringRules::set_has_ipv4() {
  _oneof_case_[0] = kIpv4;
}
void StringRules::clear_ipv4() {
  if (has_ipv4()) {
    well_known_.ipv4_ = false;
    clear_has_well_known();
  }
}
bool StringRules::ipv4() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.ipv4)
  if (has_ipv4()) {
    return well_known_.ipv4_;
  }
  return false;
}
void StringRules::set_ipv4(bool value) {
  if (!has_ipv4()) {
    clear_well_known();
    set_has_ipv4();
  }
  well_known_.ipv4_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.ipv4)
}

// optional bool ipv6 = 16;
bool StringRules::has_ipv6() const {
  return well_known_case() == kIpv6;
}
void StringRules::set_has_ipv6() {
  _oneof_case_[0] = kIpv6;
}
void StringRules::clear_ipv6() {
  if (has_ipv6()) {
    well_known_.ipv6_ = false;
    clear_has_well_known();
  }
}
bool StringRules::ipv6() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.ipv6)
  if (has_ipv6()) {
    return well_known_.ipv6_;
  }
  return false;
}
void StringRules::set_ipv6(bool value) {
  if (!has_ipv6()) {
    clear_well_known();
    set_has_ipv6();
  }
  well_known_.ipv6_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.ipv6)
}

// optional bool uri = 17;
bool StringRules::has_uri() const {
  return well_known_case() == kUri;
}
void StringRules::set_has_uri() {
  _oneof_case_[0] = kUri;
}
void StringRules::clear_uri() {
  if (has_uri()) {
    well_known_.uri_ = false;
    clear_has_well_known();
  }
}
bool StringRules::uri() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.uri)
  if (has_uri()) {
    return well_known_.uri_;
  }
  return false;
}
void StringRules::set_uri(bool value) {
  if (!has_uri()) {
    clear_well_known();
    set_has_uri();
  }
  well_known_.uri_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.uri)
}

// optional bool uri_ref = 18;
bool StringRules::has_uri_ref() const {
  return well_known_case() == kUriRef;
}
void StringRules::set_has_uri_ref() {
  _oneof_case_[0] = kUriRef;
}
void StringRules::clear_uri_ref() {
  if (has_uri_ref()) {
    well_known_.uri_ref_ = false;
    clear_has_well_known();
  }
}
bool StringRules::uri_ref() const {
  // @@protoc_insertion_point(field_get:validate.StringRules.uri_ref)
  if (has_uri_ref()) {
    return well_known_.uri_ref_;
  }
  return false;
}
void StringRules::set_uri_ref(bool value) {
  if (!has_uri_ref()) {
    clear_well_known();
    set_has_uri_ref();
  }
  well_known_.uri_ref_ = value;
  // @@protoc_insertion_point(field_set:validate.StringRules.uri_ref)
}

bool StringRules::has_well_known() const {
  return well_known_case() != WELL_KNOWN_NOT_SET;
}
void StringRules::clear_has_well_known() {
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}
StringRules::WellKnownCase StringRules::well_known_case() const {
  return StringRules::WellKnownCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BytesRules::kConstFieldNumber;
const int BytesRules::kLenFieldNumber;
const int BytesRules::kMinLenFieldNumber;
const int BytesRules::kMaxLenFieldNumber;
const int BytesRules::kPatternFieldNumber;
const int BytesRules::kPrefixFieldNumber;
const int BytesRules::kSuffixFieldNumber;
const int BytesRules::kContainsFieldNumber;
const int BytesRules::kInFieldNumber;
const int BytesRules::kNotInFieldNumber;
const int BytesRules::kIpFieldNumber;
const int BytesRules::kIpv4FieldNumber;
const int BytesRules::kIpv6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BytesRules::BytesRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.BytesRules)
}
BytesRules::BytesRules(const BytesRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_const_()) {
    const__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.const__);
  }
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suffix()) {
    suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  contains_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contains()) {
    contains_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contains_);
  }
  ::memcpy(&min_len_, &from.min_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&min_len_)) + sizeof(len_));
  clear_has_well_known();
  switch (from.well_known_case()) {
    case kIp: {
      set_ip(from.ip());
      break;
    }
    case kIpv4: {
      set_ipv4(from.ipv4());
      break;
    }
    case kIpv6: {
      set_ipv6(from.ipv6());
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:validate.BytesRules)
}

void BytesRules::SharedCtor() {
  _cached_size_ = 0;
  const__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contains_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&min_len_)) + sizeof(len_));
  clear_has_well_known();
}

BytesRules::~BytesRules() {
  // @@protoc_insertion_point(destructor:validate.BytesRules)
  SharedDtor();
}

void BytesRules::SharedDtor() {
  const__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contains_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_well_known()) {
    clear_well_known();
  }
}

void BytesRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BytesRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BytesRules& BytesRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

BytesRules* BytesRules::New(::google::protobuf::Arena* arena) const {
  BytesRules* n = new BytesRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BytesRules::clear_well_known() {
// @@protoc_insertion_point(one_of_clear_start:validate.BytesRules)
  switch (well_known_case()) {
    case kIp: {
      // No need to clear
      break;
    }
    case kIpv4: {
      // No need to clear
      break;
    }
    case kIpv6: {
      // No need to clear
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}


void BytesRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.BytesRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!const__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*const__.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pattern_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prefix_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!suffix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*suffix_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!contains_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contains_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&min_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&len_) -
        reinterpret_cast<char*>(&min_len_)) + sizeof(len_));
  }
  clear_well_known();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BytesRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.BytesRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_const_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pattern = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.BytesRules.pattern");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes prefix = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes suffix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_suffix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes contains = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes in = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes not_in = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_not_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ipv4 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.ipv4_)));
          set_has_ipv4();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ipv6 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          clear_well_known();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &well_known_.ipv6_)));
          set_has_ipv6();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 len = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.BytesRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.BytesRules)
  return false;
#undef DO_
}

void BytesRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.BytesRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->const_(), output);
  }

  // optional uint64 min_len = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_len(), output);
  }

  // optional uint64 max_len = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_len(), output);
  }

  // optional string pattern = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.BytesRules.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pattern(), output);
  }

  // optional bytes prefix = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->prefix(), output);
  }

  // optional bytes suffix = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->suffix(), output);
  }

  // optional bytes contains = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->contains(), output);
  }

  // repeated bytes in = 8;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->in(i), output);
  }

  // repeated bytes not_in = 9;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->not_in(i), output);
  }

  switch (well_known_case()) {
    case kIp:
      ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ip(), output);
      break;
    case kIpv4:
      ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ipv4(), output);
      break;
    case kIpv6:
      ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ipv6(), output);
      break;
    default: ;
  }
  // optional uint64 len = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.BytesRules)
}

::google::protobuf::uint8* BytesRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.BytesRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes const = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->const_(), target);
  }

  // optional uint64 min_len = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_len(), target);
  }

  // optional uint64 max_len = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_len(), target);
  }

  // optional string pattern = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.BytesRules.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pattern(), target);
  }

  // optional bytes prefix = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->prefix(), target);
  }

  // optional bytes suffix = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->suffix(), target);
  }

  // optional bytes contains = 7;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->contains(), target);
  }

  // repeated bytes in = 8;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->in(i), target);
  }

  // repeated bytes not_in = 9;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->not_in(i), target);
  }

  switch (well_known_case()) {
    case kIp:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ip(), target);
      break;
    case kIpv4:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ipv4(), target);
      break;
    case kIpv6:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ipv6(), target);
      break;
    default: ;
  }
  // optional uint64 len = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.BytesRules)
  return target;
}

size_t BytesRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.BytesRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes in = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0, n = this->in_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->in(i));
  }

  // repeated bytes not_in = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_in_size());
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->not_in(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->const_());
    }

    // optional string pattern = 4;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional bytes prefix = 5;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prefix());
    }

    // optional bytes suffix = 6;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->suffix());
    }

    // optional bytes contains = 7;
    if (has_contains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contains());
    }

    // optional uint64 min_len = 2;
    if (has_min_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_len());
    }

    // optional uint64 max_len = 3;
    if (has_max_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_len());
    }

    // optional uint64 len = 13;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->len());
    }

  }
  switch (well_known_case()) {
    // optional bool ip = 10;
    case kIp: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ipv4 = 11;
    case kIpv4: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ipv6 = 12;
    case kIpv6: {
      total_size += 1 + 1;
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BytesRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.BytesRules)
  GOOGLE_DCHECK_NE(&from, this);
  const BytesRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BytesRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.BytesRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.BytesRules)
    MergeFrom(*source);
  }
}

void BytesRules::MergeFrom(const BytesRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.BytesRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_const_();
      const__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.const__);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pattern();
      pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_contains();
      contains_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contains_);
    }
    if (cached_has_bits & 0x00000020u) {
      min_len_ = from.min_len_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_len_ = from.max_len_;
    }
    if (cached_has_bits & 0x00000080u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.well_known_case()) {
    case kIp: {
      set_ip(from.ip());
      break;
    }
    case kIpv4: {
      set_ipv4(from.ipv4());
      break;
    }
    case kIpv6: {
      set_ipv6(from.ipv6());
      break;
    }
    case WELL_KNOWN_NOT_SET: {
      break;
    }
  }
}

void BytesRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.BytesRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesRules::CopyFrom(const BytesRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.BytesRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesRules::IsInitialized() const {
  return true;
}

void BytesRules::Swap(BytesRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BytesRules::InternalSwap(BytesRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  const__.Swap(&other->const__);
  pattern_.Swap(&other->pattern_);
  prefix_.Swap(&other->prefix_);
  suffix_.Swap(&other->suffix_);
  contains_.Swap(&other->contains_);
  swap(min_len_, other->min_len_);
  swap(max_len_, other->max_len_);
  swap(len_, other->len_);
  swap(well_known_, other->well_known_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BytesRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BytesRules

// optional bytes const = 1;
bool BytesRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BytesRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void BytesRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void BytesRules::clear_const_() {
  const__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_const_();
}
const ::std::string& BytesRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.const)
  return const__.GetNoArena();
}
void BytesRules::set_const_(const ::std::string& value) {
  set_has_const_();
  const__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.const)
}
#if LANG_CXX11
void BytesRules::set_const_(::std::string&& value) {
  set_has_const_();
  const__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.BytesRules.const)
}
#endif
void BytesRules::set_const_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_const_();
  const__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.const)
}
void BytesRules::set_const_(const void* value, size_t size) {
  set_has_const_();
  const__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.const)
}
::std::string* BytesRules::mutable_const_() {
  set_has_const_();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.const)
  return const__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BytesRules::release_const_() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.const)
  clear_has_const_();
  return const__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BytesRules::set_allocated_const_(::std::string* const_) {
  if (const_ != NULL) {
    set_has_const_();
  } else {
    clear_has_const_();
  }
  const__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), const_);
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.const)
}

// optional uint64 len = 13;
bool BytesRules::has_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BytesRules::set_has_len() {
  _has_bits_[0] |= 0x00000080u;
}
void BytesRules::clear_has_len() {
  _has_bits_[0] &= ~0x00000080u;
}
void BytesRules::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
  clear_has_len();
}
::google::protobuf::uint64 BytesRules::len() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.len)
  return len_;
}
void BytesRules::set_len(::google::protobuf::uint64 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:validate.BytesRules.len)
}

// optional uint64 min_len = 2;
bool BytesRules::has_min_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BytesRules::set_has_min_len() {
  _has_bits_[0] |= 0x00000020u;
}
void BytesRules::clear_has_min_len() {
  _has_bits_[0] &= ~0x00000020u;
}
void BytesRules::clear_min_len() {
  min_len_ = GOOGLE_ULONGLONG(0);
  clear_has_min_len();
}
::google::protobuf::uint64 BytesRules::min_len() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.min_len)
  return min_len_;
}
void BytesRules::set_min_len(::google::protobuf::uint64 value) {
  set_has_min_len();
  min_len_ = value;
  // @@protoc_insertion_point(field_set:validate.BytesRules.min_len)
}

// optional uint64 max_len = 3;
bool BytesRules::has_max_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BytesRules::set_has_max_len() {
  _has_bits_[0] |= 0x00000040u;
}
void BytesRules::clear_has_max_len() {
  _has_bits_[0] &= ~0x00000040u;
}
void BytesRules::clear_max_len() {
  max_len_ = GOOGLE_ULONGLONG(0);
  clear_has_max_len();
}
::google::protobuf::uint64 BytesRules::max_len() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.max_len)
  return max_len_;
}
void BytesRules::set_max_len(::google::protobuf::uint64 value) {
  set_has_max_len();
  max_len_ = value;
  // @@protoc_insertion_point(field_set:validate.BytesRules.max_len)
}

// optional string pattern = 4;
bool BytesRules::has_pattern() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BytesRules::set_has_pattern() {
  _has_bits_[0] |= 0x00000002u;
}
void BytesRules::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000002u;
}
void BytesRules::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pattern();
}
const ::std::string& BytesRules::pattern() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.pattern)
  return pattern_.GetNoArena();
}
void BytesRules::set_pattern(const ::std::string& value) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.pattern)
}
#if LANG_CXX11
void BytesRules::set_pattern(::std::string&& value) {
  set_has_pattern();
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.BytesRules.pattern)
}
#endif
void BytesRules::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.pattern)
}
void BytesRules::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.pattern)
}
::std::string* BytesRules::mutable_pattern() {
  set_has_pattern();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BytesRules::release_pattern() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.pattern)
  clear_has_pattern();
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BytesRules::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.pattern)
}

// optional bytes prefix = 5;
bool BytesRules::has_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BytesRules::set_has_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void BytesRules::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void BytesRules::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
const ::std::string& BytesRules::prefix() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.prefix)
  return prefix_.GetNoArena();
}
void BytesRules::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.prefix)
}
#if LANG_CXX11
void BytesRules::set_prefix(::std::string&& value) {
  set_has_prefix();
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.BytesRules.prefix)
}
#endif
void BytesRules::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.prefix)
}
void BytesRules::set_prefix(const void* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.prefix)
}
::std::string* BytesRules::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BytesRules::release_prefix() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BytesRules::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.prefix)
}

// optional bytes suffix = 6;
bool BytesRules::has_suffix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BytesRules::set_has_suffix() {
  _has_bits_[0] |= 0x00000008u;
}
void BytesRules::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000008u;
}
void BytesRules::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suffix();
}
const ::std::string& BytesRules::suffix() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.suffix)
  return suffix_.GetNoArena();
}
void BytesRules::set_suffix(const ::std::string& value) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.suffix)
}
#if LANG_CXX11
void BytesRules::set_suffix(::std::string&& value) {
  set_has_suffix();
  suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.BytesRules.suffix)
}
#endif
void BytesRules::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.suffix)
}
void BytesRules::set_suffix(const void* value, size_t size) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.suffix)
}
::std::string* BytesRules::mutable_suffix() {
  set_has_suffix();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.suffix)
  return suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BytesRules::release_suffix() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.suffix)
  clear_has_suffix();
  return suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BytesRules::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    set_has_suffix();
  } else {
    clear_has_suffix();
  }
  suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.suffix)
}

// optional bytes contains = 7;
bool BytesRules::has_contains() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BytesRules::set_has_contains() {
  _has_bits_[0] |= 0x00000010u;
}
void BytesRules::clear_has_contains() {
  _has_bits_[0] &= ~0x00000010u;
}
void BytesRules::clear_contains() {
  contains_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contains();
}
const ::std::string& BytesRules::contains() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.contains)
  return contains_.GetNoArena();
}
void BytesRules::set_contains(const ::std::string& value) {
  set_has_contains();
  contains_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:validate.BytesRules.contains)
}
#if LANG_CXX11
void BytesRules::set_contains(::std::string&& value) {
  set_has_contains();
  contains_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:validate.BytesRules.contains)
}
#endif
void BytesRules::set_contains(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contains();
  contains_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.contains)
}
void BytesRules::set_contains(const void* value, size_t size) {
  set_has_contains();
  contains_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.contains)
}
::std::string* BytesRules::mutable_contains() {
  set_has_contains();
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.contains)
  return contains_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BytesRules::release_contains() {
  // @@protoc_insertion_point(field_release:validate.BytesRules.contains)
  clear_has_contains();
  return contains_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BytesRules::set_allocated_contains(::std::string* contains) {
  if (contains != NULL) {
    set_has_contains();
  } else {
    clear_has_contains();
  }
  contains_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contains);
  // @@protoc_insertion_point(field_set_allocated:validate.BytesRules.contains)
}

// repeated bytes in = 8;
int BytesRules::in_size() const {
  return in_.size();
}
void BytesRules::clear_in() {
  in_.Clear();
}
const ::std::string& BytesRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.in)
  return in_.Get(index);
}
::std::string* BytesRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.in)
  return in_.Mutable(index);
}
void BytesRules::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:validate.BytesRules.in)
  in_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BytesRules::set_in(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:validate.BytesRules.in)
  in_.Mutable(index)->assign(std::move(value));
}
#endif
void BytesRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.in)
}
void BytesRules::set_in(int index, const void* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.in)
}
::std::string* BytesRules::add_in() {
  // @@protoc_insertion_point(field_add_mutable:validate.BytesRules.in)
  return in_.Add();
}
void BytesRules::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.BytesRules.in)
}
#if LANG_CXX11
void BytesRules::add_in(::std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.BytesRules.in)
}
#endif
void BytesRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.BytesRules.in)
}
void BytesRules::add_in(const void* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.BytesRules.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BytesRules::in() const {
  // @@protoc_insertion_point(field_list:validate.BytesRules.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BytesRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.BytesRules.in)
  return &in_;
}

// repeated bytes not_in = 9;
int BytesRules::not_in_size() const {
  return not_in_.size();
}
void BytesRules::clear_not_in() {
  not_in_.Clear();
}
const ::std::string& BytesRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.not_in)
  return not_in_.Get(index);
}
::std::string* BytesRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.BytesRules.not_in)
  return not_in_.Mutable(index);
}
void BytesRules::set_not_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:validate.BytesRules.not_in)
  not_in_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BytesRules::set_not_in(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:validate.BytesRules.not_in)
  not_in_.Mutable(index)->assign(std::move(value));
}
#endif
void BytesRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.BytesRules.not_in)
}
void BytesRules::set_not_in(int index, const void* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.BytesRules.not_in)
}
::std::string* BytesRules::add_not_in() {
  // @@protoc_insertion_point(field_add_mutable:validate.BytesRules.not_in)
  return not_in_.Add();
}
void BytesRules::add_not_in(const ::std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.BytesRules.not_in)
}
#if LANG_CXX11
void BytesRules::add_not_in(::std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.BytesRules.not_in)
}
#endif
void BytesRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.BytesRules.not_in)
}
void BytesRules::add_not_in(const void* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.BytesRules.not_in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BytesRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.BytesRules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BytesRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.BytesRules.not_in)
  return &not_in_;
}

// optional bool ip = 10;
bool BytesRules::has_ip() const {
  return well_known_case() == kIp;
}
void BytesRules::set_has_ip() {
  _oneof_case_[0] = kIp;
}
void BytesRules::clear_ip() {
  if (has_ip()) {
    well_known_.ip_ = false;
    clear_has_well_known();
  }
}
bool BytesRules::ip() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.ip)
  if (has_ip()) {
    return well_known_.ip_;
  }
  return false;
}
void BytesRules::set_ip(bool value) {
  if (!has_ip()) {
    clear_well_known();
    set_has_ip();
  }
  well_known_.ip_ = value;
  // @@protoc_insertion_point(field_set:validate.BytesRules.ip)
}

// optional bool ipv4 = 11;
bool BytesRules::has_ipv4() const {
  return well_known_case() == kIpv4;
}
void BytesRules::set_has_ipv4() {
  _oneof_case_[0] = kIpv4;
}
void BytesRules::clear_ipv4() {
  if (has_ipv4()) {
    well_known_.ipv4_ = false;
    clear_has_well_known();
  }
}
bool BytesRules::ipv4() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.ipv4)
  if (has_ipv4()) {
    return well_known_.ipv4_;
  }
  return false;
}
void BytesRules::set_ipv4(bool value) {
  if (!has_ipv4()) {
    clear_well_known();
    set_has_ipv4();
  }
  well_known_.ipv4_ = value;
  // @@protoc_insertion_point(field_set:validate.BytesRules.ipv4)
}

// optional bool ipv6 = 12;
bool BytesRules::has_ipv6() const {
  return well_known_case() == kIpv6;
}
void BytesRules::set_has_ipv6() {
  _oneof_case_[0] = kIpv6;
}
void BytesRules::clear_ipv6() {
  if (has_ipv6()) {
    well_known_.ipv6_ = false;
    clear_has_well_known();
  }
}
bool BytesRules::ipv6() const {
  // @@protoc_insertion_point(field_get:validate.BytesRules.ipv6)
  if (has_ipv6()) {
    return well_known_.ipv6_;
  }
  return false;
}
void BytesRules::set_ipv6(bool value) {
  if (!has_ipv6()) {
    clear_well_known();
    set_has_ipv6();
  }
  well_known_.ipv6_ = value;
  // @@protoc_insertion_point(field_set:validate.BytesRules.ipv6)
}

bool BytesRules::has_well_known() const {
  return well_known_case() != WELL_KNOWN_NOT_SET;
}
void BytesRules::clear_has_well_known() {
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}
BytesRules::WellKnownCase BytesRules::well_known_case() const {
  return BytesRules::WellKnownCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumRules::kConstFieldNumber;
const int EnumRules::kDefinedOnlyFieldNumber;
const int EnumRules::kInFieldNumber;
const int EnumRules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumRules::EnumRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.EnumRules)
}
EnumRules::EnumRules(const EnumRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&const__, &from.const__,
    static_cast<size_t>(reinterpret_cast<char*>(&defined_only_) -
    reinterpret_cast<char*>(&const__)) + sizeof(defined_only_));
  // @@protoc_insertion_point(copy_constructor:validate.EnumRules)
}

void EnumRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defined_only_) -
      reinterpret_cast<char*>(&const__)) + sizeof(defined_only_));
}

EnumRules::~EnumRules() {
  // @@protoc_insertion_point(destructor:validate.EnumRules)
  SharedDtor();
}

void EnumRules::SharedDtor() {
}

void EnumRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnumRules& EnumRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnumRules* EnumRules::New(::google::protobuf::Arena* arena) const {
  EnumRules* n = new EnumRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnumRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.EnumRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&const__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&defined_only_) -
        reinterpret_cast<char*>(&const__)) + sizeof(defined_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnumRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.EnumRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 const = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_const_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &const__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool defined_only = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_defined_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defined_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 in = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 not_in = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_not_in())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_not_in())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.EnumRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.EnumRules)
  return false;
#undef DO_
}

void EnumRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.EnumRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->const_(), output);
  }

  // optional bool defined_only = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->defined_only(), output);
  }

  // repeated int32 in = 3;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->in(i), output);
  }

  // repeated int32 not_in = 4;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.EnumRules)
}

::google::protobuf::uint8* EnumRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.EnumRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 const = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->const_(), target);
  }

  // optional bool defined_only = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->defined_only(), target);
  }

  // repeated int32 in = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->in_, target);

  // repeated int32 not_in = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->not_in_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.EnumRules)
  return target;
}

size_t EnumRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.EnumRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 in = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->in_size());
    total_size += data_size;
  }

  // repeated int32 not_in = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->not_in_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->not_in_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 const = 1;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->const_());
    }

    // optional bool defined_only = 2;
    if (has_defined_only()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.EnumRules)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.EnumRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.EnumRules)
    MergeFrom(*source);
  }
}

void EnumRules::MergeFrom(const EnumRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.EnumRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      const__ = from.const__;
    }
    if (cached_has_bits & 0x00000002u) {
      defined_only_ = from.defined_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnumRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.EnumRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumRules::CopyFrom(const EnumRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.EnumRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumRules::IsInitialized() const {
  return true;
}

void EnumRules::Swap(EnumRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumRules::InternalSwap(EnumRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(defined_only_, other->defined_only_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnumRules

// optional int32 const = 1;
bool EnumRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnumRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void EnumRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnumRules::clear_const_() {
  const__ = 0;
  clear_has_const_();
}
::google::protobuf::int32 EnumRules::const_() const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.const)
  return const__;
}
void EnumRules::set_const_(::google::protobuf::int32 value) {
  set_has_const_();
  const__ = value;
  // @@protoc_insertion_point(field_set:validate.EnumRules.const)
}

// optional bool defined_only = 2;
bool EnumRules::has_defined_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnumRules::set_has_defined_only() {
  _has_bits_[0] |= 0x00000002u;
}
void EnumRules::clear_has_defined_only() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnumRules::clear_defined_only() {
  defined_only_ = false;
  clear_has_defined_only();
}
bool EnumRules::defined_only() const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.defined_only)
  return defined_only_;
}
void EnumRules::set_defined_only(bool value) {
  set_has_defined_only();
  defined_only_ = value;
  // @@protoc_insertion_point(field_set:validate.EnumRules.defined_only)
}

// repeated int32 in = 3;
int EnumRules::in_size() const {
  return in_.size();
}
void EnumRules::clear_in() {
  in_.Clear();
}
::google::protobuf::int32 EnumRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.in)
  return in_.Get(index);
}
void EnumRules::set_in(int index, ::google::protobuf::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.EnumRules.in)
}
void EnumRules::add_in(::google::protobuf::int32 value) {
  in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.EnumRules.in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnumRules::in() const {
  // @@protoc_insertion_point(field_list:validate.EnumRules.in)
  return in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnumRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.EnumRules.in)
  return &in_;
}

// repeated int32 not_in = 4;
int EnumRules::not_in_size() const {
  return not_in_.size();
}
void EnumRules::clear_not_in() {
  not_in_.Clear();
}
::google::protobuf::int32 EnumRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.EnumRules.not_in)
  return not_in_.Get(index);
}
void EnumRules::set_not_in(int index, ::google::protobuf::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:validate.EnumRules.not_in)
}
void EnumRules::add_not_in(::google::protobuf::int32 value) {
  not_in_.Add(value);
  // @@protoc_insertion_point(field_add:validate.EnumRules.not_in)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnumRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.EnumRules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnumRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.EnumRules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageRules::kSkipFieldNumber;
const int MessageRules::kRequiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRules::MessageRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.MessageRules)
}
MessageRules::MessageRules(const MessageRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skip_, &from.skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_) -
    reinterpret_cast<char*>(&skip_)) + sizeof(required_));
  // @@protoc_insertion_point(copy_constructor:validate.MessageRules)
}

void MessageRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(required_));
}

MessageRules::~MessageRules() {
  // @@protoc_insertion_point(destructor:validate.MessageRules)
  SharedDtor();
}

void MessageRules::SharedDtor() {
}

void MessageRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageRules& MessageRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageRules* MessageRules::New(::google::protobuf::Arena* arena) const {
  MessageRules* n = new MessageRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.MessageRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&skip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_) -
        reinterpret_cast<char*>(&skip_)) + sizeof(required_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.MessageRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool skip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool required = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.MessageRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.MessageRules)
  return false;
#undef DO_
}

void MessageRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.MessageRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool skip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->skip(), output);
  }

  // optional bool required = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->required(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.MessageRules)
}

::google::protobuf::uint8* MessageRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.MessageRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool skip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->skip(), target);
  }

  // optional bool required = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->required(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.MessageRules)
  return target;
}

size_t MessageRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.MessageRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool skip = 1;
    if (has_skip()) {
      total_size += 1 + 1;
    }

    // optional bool required = 2;
    if (has_required()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.MessageRules)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.MessageRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.MessageRules)
    MergeFrom(*source);
  }
}

void MessageRules::MergeFrom(const MessageRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.MessageRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      skip_ = from.skip_;
    }
    if (cached_has_bits & 0x00000002u) {
      required_ = from.required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.MessageRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRules::CopyFrom(const MessageRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.MessageRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRules::IsInitialized() const {
  return true;
}

void MessageRules::Swap(MessageRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRules::InternalSwap(MessageRules* other) {
  using std::swap;
  swap(skip_, other->skip_);
  swap(required_, other->required_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRules

// optional bool skip = 1;
bool MessageRules::has_skip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageRules::set_has_skip() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageRules::clear_has_skip() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageRules::clear_skip() {
  skip_ = false;
  clear_has_skip();
}
bool MessageRules::skip() const {
  // @@protoc_insertion_point(field_get:validate.MessageRules.skip)
  return skip_;
}
void MessageRules::set_skip(bool value) {
  set_has_skip();
  skip_ = value;
  // @@protoc_insertion_point(field_set:validate.MessageRules.skip)
}

// optional bool required = 2;
bool MessageRules::has_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageRules::set_has_required() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageRules::clear_has_required() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageRules::clear_required() {
  required_ = false;
  clear_has_required();
}
bool MessageRules::required() const {
  // @@protoc_insertion_point(field_get:validate.MessageRules.required)
  return required_;
}
void MessageRules::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:validate.MessageRules.required)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RepeatedRules::kMinItemsFieldNumber;
const int RepeatedRules::kMaxItemsFieldNumber;
const int RepeatedRules::kUniqueFieldNumber;
const int RepeatedRules::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RepeatedRules::RepeatedRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.RepeatedRules)
}
RepeatedRules::RepeatedRules(const RepeatedRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_items()) {
    items_ = new ::validate::FieldRules(*from.items_);
  } else {
    items_ = NULL;
  }
  ::memcpy(&min_items_, &from.min_items_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_) -
    reinterpret_cast<char*>(&min_items_)) + sizeof(unique_));
  // @@protoc_insertion_point(copy_constructor:validate.RepeatedRules)
}

void RepeatedRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_) -
      reinterpret_cast<char*>(&items_)) + sizeof(unique_));
}

RepeatedRules::~RepeatedRules() {
  // @@protoc_insertion_point(destructor:validate.RepeatedRules)
  SharedDtor();
}

void RepeatedRules::SharedDtor() {
  if (this != internal_default_instance()) delete items_;
}

void RepeatedRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatedRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RepeatedRules& RepeatedRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

RepeatedRules* RepeatedRules::New(::google::protobuf::Arena* arena) const {
  RepeatedRules* n = new RepeatedRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RepeatedRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.RepeatedRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_items()) {
    GOOGLE_DCHECK(items_ != NULL);
    items_->::validate::FieldRules::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&min_items_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unique_) -
        reinterpret_cast<char*>(&min_items_)) + sizeof(unique_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RepeatedRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.RepeatedRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_items();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_items();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unique = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_unique();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.FieldRules items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.RepeatedRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.RepeatedRules)
  return false;
#undef DO_
}

void RepeatedRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.RepeatedRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_items = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_items(), output);
  }

  // optional uint64 max_items = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_items(), output);
  }

  // optional bool unique = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unique(), output);
  }

  // optional .validate.FieldRules items = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->items_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.RepeatedRules)
}

::google::protobuf::uint8* RepeatedRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.RepeatedRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_items = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_items(), target);
  }

  // optional uint64 max_items = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_items(), target);
  }

  // optional bool unique = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unique(), target);
  }

  // optional .validate.FieldRules items = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->items_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.RepeatedRules)
  return target;
}

size_t RepeatedRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.RepeatedRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .validate.FieldRules items = 4;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->items_);
    }

    // optional uint64 min_items = 1;
    if (has_min_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_items());
    }

    // optional uint64 max_items = 2;
    if (has_max_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_items());
    }

    // optional bool unique = 3;
    if (has_unique()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.RepeatedRules)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RepeatedRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.RepeatedRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.RepeatedRules)
    MergeFrom(*source);
  }
}

void RepeatedRules::MergeFrom(const RepeatedRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.RepeatedRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_items()->::validate::FieldRules::MergeFrom(from.items());
    }
    if (cached_has_bits & 0x00000002u) {
      min_items_ = from.min_items_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_items_ = from.max_items_;
    }
    if (cached_has_bits & 0x00000008u) {
      unique_ = from.unique_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RepeatedRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.RepeatedRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedRules::CopyFrom(const RepeatedRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.RepeatedRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedRules::IsInitialized() const {
  return true;
}

void RepeatedRules::Swap(RepeatedRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RepeatedRules::InternalSwap(RepeatedRules* other) {
  using std::swap;
  swap(items_, other->items_);
  swap(min_items_, other->min_items_);
  swap(max_items_, other->max_items_);
  swap(unique_, other->unique_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RepeatedRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RepeatedRules

// optional uint64 min_items = 1;
bool RepeatedRules::has_min_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RepeatedRules::set_has_min_items() {
  _has_bits_[0] |= 0x00000002u;
}
void RepeatedRules::clear_has_min_items() {
  _has_bits_[0] &= ~0x00000002u;
}
void RepeatedRules::clear_min_items() {
  min_items_ = GOOGLE_ULONGLONG(0);
  clear_has_min_items();
}
::google::protobuf::uint64 RepeatedRules::min_items() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.min_items)
  return min_items_;
}
void RepeatedRules::set_min_items(::google::protobuf::uint64 value) {
  set_has_min_items();
  min_items_ = value;
  // @@protoc_insertion_point(field_set:validate.RepeatedRules.min_items)
}

// optional uint64 max_items = 2;
bool RepeatedRules::has_max_items() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RepeatedRules::set_has_max_items() {
  _has_bits_[0] |= 0x00000004u;
}
void RepeatedRules::clear_has_max_items() {
  _has_bits_[0] &= ~0x00000004u;
}
void RepeatedRules::clear_max_items() {
  max_items_ = GOOGLE_ULONGLONG(0);
  clear_has_max_items();
}
::google::protobuf::uint64 RepeatedRules::max_items() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.max_items)
  return max_items_;
}
void RepeatedRules::set_max_items(::google::protobuf::uint64 value) {
  set_has_max_items();
  max_items_ = value;
  // @@protoc_insertion_point(field_set:validate.RepeatedRules.max_items)
}

// optional bool unique = 3;
bool RepeatedRules::has_unique() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RepeatedRules::set_has_unique() {
  _has_bits_[0] |= 0x00000008u;
}
void RepeatedRules::clear_has_unique() {
  _has_bits_[0] &= ~0x00000008u;
}
void RepeatedRules::clear_unique() {
  unique_ = false;
  clear_has_unique();
}
bool RepeatedRules::unique() const {
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.unique)
  return unique_;
}
void RepeatedRules::set_unique(bool value) {
  set_has_unique();
  unique_ = value;
  // @@protoc_insertion_point(field_set:validate.RepeatedRules.unique)
}

// optional .validate.FieldRules items = 4;
bool RepeatedRules::has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RepeatedRules::set_has_items() {
  _has_bits_[0] |= 0x00000001u;
}
void RepeatedRules::clear_has_items() {
  _has_bits_[0] &= ~0x00000001u;
}
void RepeatedRules::clear_items() {
  if (items_ != NULL) items_->::validate::FieldRules::Clear();
  clear_has_items();
}
const ::validate::FieldRules& RepeatedRules::items() const {
  const ::validate::FieldRules* p = items_;
  // @@protoc_insertion_point(field_get:validate.RepeatedRules.items)
  return p != NULL ? *p : *reinterpret_cast<const ::validate::FieldRules*>(
      &::validate::_FieldRules_default_instance_);
}
::validate::FieldRules* RepeatedRules::mutable_items() {
  set_has_items();
  if (items_ == NULL) {
    items_ = new ::validate::FieldRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.RepeatedRules.items)
  return items_;
}
::validate::FieldRules* RepeatedRules::release_items() {
  // @@protoc_insertion_point(field_release:validate.RepeatedRules.items)
  clear_has_items();
  ::validate::FieldRules* temp = items_;
  items_ = NULL;
  return temp;
}
void RepeatedRules::set_allocated_items(::validate::FieldRules* items) {
  delete items_;
  items_ = items;
  if (items) {
    set_has_items();
  } else {
    clear_has_items();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.RepeatedRules.items)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapRules::kMinPairsFieldNumber;
const int MapRules::kMaxPairsFieldNumber;
const int MapRules::kNoSparseFieldNumber;
const int MapRules::kKeysFieldNumber;
const int MapRules::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapRules::MapRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.MapRules)
}
MapRules::MapRules(const MapRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keys()) {
    keys_ = new ::validate::FieldRules(*from.keys_);
  } else {
    keys_ = NULL;
  }
  if (from.has_values()) {
    values_ = new ::validate::FieldRules(*from.values_);
  } else {
    values_ = NULL;
  }
  ::memcpy(&min_pairs_, &from.min_pairs_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_sparse_) -
    reinterpret_cast<char*>(&min_pairs_)) + sizeof(no_sparse_));
  // @@protoc_insertion_point(copy_constructor:validate.MapRules)
}

void MapRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_sparse_) -
      reinterpret_cast<char*>(&keys_)) + sizeof(no_sparse_));
}

MapRules::~MapRules() {
  // @@protoc_insertion_point(destructor:validate.MapRules)
  SharedDtor();
}

void MapRules::SharedDtor() {
  if (this != internal_default_instance()) delete keys_;
  if (this != internal_default_instance()) delete values_;
}

void MapRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapRules& MapRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapRules* MapRules::New(::google::protobuf::Arena* arena) const {
  MapRules* n = new MapRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.MapRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(keys_ != NULL);
      keys_->::validate::FieldRules::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(values_ != NULL);
      values_->::validate::FieldRules::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&min_pairs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_sparse_) -
        reinterpret_cast<char*>(&min_pairs_)) + sizeof(no_sparse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.MapRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_pairs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_pairs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_pairs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_pairs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_pairs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_pairs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_sparse = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_no_sparse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_sparse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.FieldRules keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .validate.FieldRules values = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.MapRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.MapRules)
  return false;
#undef DO_
}

void MapRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.MapRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_pairs = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_pairs(), output);
  }

  // optional uint64 max_pairs = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_pairs(), output);
  }

  // optional bool no_sparse = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->no_sparse(), output);
  }

  // optional .validate.FieldRules keys = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->keys_, output);
  }

  // optional .validate.FieldRules values = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->values_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.MapRules)
}

::google::protobuf::uint8* MapRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.MapRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 min_pairs = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_pairs(), target);
  }

  // optional uint64 max_pairs = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_pairs(), target);
  }

  // optional bool no_sparse = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->no_sparse(), target);
  }

  // optional .validate.FieldRules keys = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->keys_, deterministic, target);
  }

  // optional .validate.FieldRules values = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->values_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.MapRules)
  return target;
}

size_t MapRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.MapRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .validate.FieldRules keys = 4;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keys_);
    }

    // optional .validate.FieldRules values = 5;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->values_);
    }

    // optional uint64 min_pairs = 1;
    if (has_min_pairs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_pairs());
    }

    // optional uint64 max_pairs = 2;
    if (has_max_pairs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_pairs());
    }

    // optional bool no_sparse = 3;
    if (has_no_sparse()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.MapRules)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.MapRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.MapRules)
    MergeFrom(*source);
  }
}

void MapRules::MergeFrom(const MapRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.MapRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keys()->::validate::FieldRules::MergeFrom(from.keys());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_values()->::validate::FieldRules::MergeFrom(from.values());
    }
    if (cached_has_bits & 0x00000004u) {
      min_pairs_ = from.min_pairs_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_pairs_ = from.max_pairs_;
    }
    if (cached_has_bits & 0x00000010u) {
      no_sparse_ = from.no_sparse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.MapRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRules::CopyFrom(const MapRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.MapRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRules::IsInitialized() const {
  return true;
}

void MapRules::Swap(MapRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapRules::InternalSwap(MapRules* other) {
  using std::swap;
  swap(keys_, other->keys_);
  swap(values_, other->values_);
  swap(min_pairs_, other->min_pairs_);
  swap(max_pairs_, other->max_pairs_);
  swap(no_sparse_, other->no_sparse_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapRules

// optional uint64 min_pairs = 1;
bool MapRules::has_min_pairs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapRules::set_has_min_pairs() {
  _has_bits_[0] |= 0x00000004u;
}
void MapRules::clear_has_min_pairs() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapRules::clear_min_pairs() {
  min_pairs_ = GOOGLE_ULONGLONG(0);
  clear_has_min_pairs();
}
::google::protobuf::uint64 MapRules::min_pairs() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.min_pairs)
  return min_pairs_;
}
void MapRules::set_min_pairs(::google::protobuf::uint64 value) {
  set_has_min_pairs();
  min_pairs_ = value;
  // @@protoc_insertion_point(field_set:validate.MapRules.min_pairs)
}

// optional uint64 max_pairs = 2;
bool MapRules::has_max_pairs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MapRules::set_has_max_pairs() {
  _has_bits_[0] |= 0x00000008u;
}
void MapRules::clear_has_max_pairs() {
  _has_bits_[0] &= ~0x00000008u;
}
void MapRules::clear_max_pairs() {
  max_pairs_ = GOOGLE_ULONGLONG(0);
  clear_has_max_pairs();
}
::google::protobuf::uint64 MapRules::max_pairs() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.max_pairs)
  return max_pairs_;
}
void MapRules::set_max_pairs(::google::protobuf::uint64 value) {
  set_has_max_pairs();
  max_pairs_ = value;
  // @@protoc_insertion_point(field_set:validate.MapRules.max_pairs)
}

// optional bool no_sparse = 3;
bool MapRules::has_no_sparse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MapRules::set_has_no_sparse() {
  _has_bits_[0] |= 0x00000010u;
}
void MapRules::clear_has_no_sparse() {
  _has_bits_[0] &= ~0x00000010u;
}
void MapRules::clear_no_sparse() {
  no_sparse_ = false;
  clear_has_no_sparse();
}
bool MapRules::no_sparse() const {
  // @@protoc_insertion_point(field_get:validate.MapRules.no_sparse)
  return no_sparse_;
}
void MapRules::set_no_sparse(bool value) {
  set_has_no_sparse();
  no_sparse_ = value;
  // @@protoc_insertion_point(field_set:validate.MapRules.no_sparse)
}

// optional .validate.FieldRules keys = 4;
bool MapRules::has_keys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapRules::set_has_keys() {
  _has_bits_[0] |= 0x00000001u;
}
void MapRules::clear_has_keys() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapRules::clear_keys() {
  if (keys_ != NULL) keys_->::validate::FieldRules::Clear();
  clear_has_keys();
}
const ::validate::FieldRules& MapRules::keys() const {
  const ::validate::FieldRules* p = keys_;
  // @@protoc_insertion_point(field_get:validate.MapRules.keys)
  return p != NULL ? *p : *reinterpret_cast<const ::validate::FieldRules*>(
      &::validate::_FieldRules_default_instance_);
}
::validate::FieldRules* MapRules::mutable_keys() {
  set_has_keys();
  if (keys_ == NULL) {
    keys_ = new ::validate::FieldRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.MapRules.keys)
  return keys_;
}
::validate::FieldRules* MapRules::release_keys() {
  // @@protoc_insertion_point(field_release:validate.MapRules.keys)
  clear_has_keys();
  ::validate::FieldRules* temp = keys_;
  keys_ = NULL;
  return temp;
}
void MapRules::set_allocated_keys(::validate::FieldRules* keys) {
  delete keys_;
  keys_ = keys;
  if (keys) {
    set_has_keys();
  } else {
    clear_has_keys();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.MapRules.keys)
}

// optional .validate.FieldRules values = 5;
bool MapRules::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapRules::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
void MapRules::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapRules::clear_values() {
  if (values_ != NULL) values_->::validate::FieldRules::Clear();
  clear_has_values();
}
const ::validate::FieldRules& MapRules::values() const {
  const ::validate::FieldRules* p = values_;
  // @@protoc_insertion_point(field_get:validate.MapRules.values)
  return p != NULL ? *p : *reinterpret_cast<const ::validate::FieldRules*>(
      &::validate::_FieldRules_default_instance_);
}
::validate::FieldRules* MapRules::mutable_values() {
  set_has_values();
  if (values_ == NULL) {
    values_ = new ::validate::FieldRules;
  }
  // @@protoc_insertion_point(field_mutable:validate.MapRules.values)
  return values_;
}
::validate::FieldRules* MapRules::release_values() {
  // @@protoc_insertion_point(field_release:validate.MapRules.values)
  clear_has_values();
  ::validate::FieldRules* temp = values_;
  values_ = NULL;
  return temp;
}
void MapRules::set_allocated_values(::validate::FieldRules* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.MapRules.values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnyRules::kRequiredFieldNumber;
const int AnyRules::kInFieldNumber;
const int AnyRules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnyRules::AnyRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.AnyRules)
}
AnyRules::AnyRules(const AnyRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  required_ = from.required_;
  // @@protoc_insertion_point(copy_constructor:validate.AnyRules)
}

void AnyRules::SharedCtor() {
  _cached_size_ = 0;
  required_ = false;
}

AnyRules::~AnyRules() {
  // @@protoc_insertion_point(destructor:validate.AnyRules)
  SharedDtor();
}

void AnyRules::SharedDtor() {
}

void AnyRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnyRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnyRules& AnyRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnyRules* AnyRules::New(::google::protobuf::Arena* arena) const {
  AnyRules* n = new AnyRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnyRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.AnyRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnyRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.AnyRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string in = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in(this->in_size() - 1).data(),
            static_cast<int>(this->in(this->in_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.AnyRules.in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string not_in = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_in(this->not_in_size() - 1).data(),
            static_cast<int>(this->not_in(this->not_in_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "validate.AnyRules.not_in");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.AnyRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.AnyRules)
  return false;
#undef DO_
}

void AnyRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.AnyRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // repeated string in = 2;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), static_cast<int>(this->in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.AnyRules.in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->in(i), output);
  }

  // repeated string not_in = 3;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_in(i).data(), static_cast<int>(this->not_in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.AnyRules.not_in");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->not_in(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.AnyRules)
}

::google::protobuf::uint8* AnyRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.AnyRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // repeated string in = 2;
  for (int i = 0, n = this->in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in(i).data(), static_cast<int>(this->in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.AnyRules.in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->in(i), target);
  }

  // repeated string not_in = 3;
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_in(i).data(), static_cast<int>(this->not_in(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "validate.AnyRules.not_in");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->not_in(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.AnyRules)
  return target;
}

size_t AnyRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.AnyRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string in = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->in_size());
  for (int i = 0, n = this->in_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->in(i));
  }

  // repeated string not_in = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_in_size());
  for (int i = 0, n = this->not_in_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_in(i));
  }

  // optional bool required = 1;
  if (has_required()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnyRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.AnyRules)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnyRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.AnyRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.AnyRules)
    MergeFrom(*source);
  }
}

void AnyRules::MergeFrom(const AnyRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.AnyRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  if (from.has_required()) {
    set_required(from.required());
  }
}

void AnyRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.AnyRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyRules::CopyFrom(const AnyRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.AnyRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyRules::IsInitialized() const {
  return true;
}

void AnyRules::Swap(AnyRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnyRules::InternalSwap(AnyRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(required_, other->required_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnyRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnyRules

// optional bool required = 1;
bool AnyRules::has_required() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnyRules::set_has_required() {
  _has_bits_[0] |= 0x00000001u;
}
void AnyRules::clear_has_required() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnyRules::clear_required() {
  required_ = false;
  clear_has_required();
}
bool AnyRules::required() const {
  // @@protoc_insertion_point(field_get:validate.AnyRules.required)
  return required_;
}
void AnyRules::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:validate.AnyRules.required)
}

// repeated string in = 2;
int AnyRules::in_size() const {
  return in_.size();
}
void AnyRules::clear_in() {
  in_.Clear();
}
const ::std::string& AnyRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.AnyRules.in)
  return in_.Get(index);
}
::std::string* AnyRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.AnyRules.in)
  return in_.Mutable(index);
}
void AnyRules::set_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:validate.AnyRules.in)
  in_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void AnyRules::set_in(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:validate.AnyRules.in)
  in_.Mutable(index)->assign(std::move(value));
}
#endif
void AnyRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.AnyRules.in)
}
void AnyRules::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.AnyRules.in)
}
::std::string* AnyRules::add_in() {
  // @@protoc_insertion_point(field_add_mutable:validate.AnyRules.in)
  return in_.Add();
}
void AnyRules::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.AnyRules.in)
}
#if LANG_CXX11
void AnyRules::add_in(::std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.AnyRules.in)
}
#endif
void AnyRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.AnyRules.in)
}
void AnyRules::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.AnyRules.in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AnyRules::in() const {
  // @@protoc_insertion_point(field_list:validate.AnyRules.in)
  return in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AnyRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.AnyRules.in)
  return &in_;
}

// repeated string not_in = 3;
int AnyRules::not_in_size() const {
  return not_in_.size();
}
void AnyRules::clear_not_in() {
  not_in_.Clear();
}
const ::std::string& AnyRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.AnyRules.not_in)
  return not_in_.Get(index);
}
::std::string* AnyRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.AnyRules.not_in)
  return not_in_.Mutable(index);
}
void AnyRules::set_not_in(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:validate.AnyRules.not_in)
  not_in_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void AnyRules::set_not_in(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:validate.AnyRules.not_in)
  not_in_.Mutable(index)->assign(std::move(value));
}
#endif
void AnyRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:validate.AnyRules.not_in)
}
void AnyRules::set_not_in(int index, const char* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:validate.AnyRules.not_in)
}
::std::string* AnyRules::add_not_in() {
  // @@protoc_insertion_point(field_add_mutable:validate.AnyRules.not_in)
  return not_in_.Add();
}
void AnyRules::add_not_in(const ::std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:validate.AnyRules.not_in)
}
#if LANG_CXX11
void AnyRules::add_not_in(::std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:validate.AnyRules.not_in)
}
#endif
void AnyRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:validate.AnyRules.not_in)
}
void AnyRules::add_not_in(const char* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:validate.AnyRules.not_in)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AnyRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.AnyRules.not_in)
  return not_in_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AnyRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.AnyRules.not_in)
  return &not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DurationRules::kRequiredFieldNumber;
const int DurationRules::kConstFieldNumber;
const int DurationRules::kLtFieldNumber;
const int DurationRules::kLteFieldNumber;
const int DurationRules::kGtFieldNumber;
const int DurationRules::kGteFieldNumber;
const int DurationRules::kInFieldNumber;
const int DurationRules::kNotInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DurationRules::DurationRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.DurationRules)
}
DurationRules::DurationRules(const DurationRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      in_(from.in_),
      not_in_(from.not_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_const_()) {
    const__ = new ::google::protobuf::Duration(*from.const__);
  } else {
    const__ = NULL;
  }
  if (from.has_lt()) {
    lt_ = new ::google::protobuf::Duration(*from.lt_);
  } else {
    lt_ = NULL;
  }
  if (from.has_lte()) {
    lte_ = new ::google::protobuf::Duration(*from.lte_);
  } else {
    lte_ = NULL;
  }
  if (from.has_gt()) {
    gt_ = new ::google::protobuf::Duration(*from.gt_);
  } else {
    gt_ = NULL;
  }
  if (from.has_gte()) {
    gte_ = new ::google::protobuf::Duration(*from.gte_);
  } else {
    gte_ = NULL;
  }
  required_ = from.required_;
  // @@protoc_insertion_point(copy_constructor:validate.DurationRules)
}

void DurationRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_) -
      reinterpret_cast<char*>(&const__)) + sizeof(required_));
}

DurationRules::~DurationRules() {
  // @@protoc_insertion_point(destructor:validate.DurationRules)
  SharedDtor();
}

void DurationRules::SharedDtor() {
  if (this != internal_default_instance()) delete const__;
  if (this != internal_default_instance()) delete lt_;
  if (this != internal_default_instance()) delete lte_;
  if (this != internal_default_instance()) delete gt_;
  if (this != internal_default_instance()) delete gte_;
}

void DurationRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DurationRules& DurationRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

DurationRules* DurationRules::New(::google::protobuf::Arena* arena) const {
  DurationRules* n = new DurationRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DurationRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.DurationRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  not_in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(const__ != NULL);
      const__->::google::protobuf::Duration::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lt_ != NULL);
      lt_->::google::protobuf::Duration::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lte_ != NULL);
      lte_->::google::protobuf::Duration::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gt_ != NULL);
      gt_->::google::protobuf::Duration::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(gte_ != NULL);
      gte_->::google::protobuf::Duration::Clear();
    }
  }
  required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DurationRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.DurationRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration const = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_const_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration lt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration lte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration gt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration gte = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Duration in = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Duration not_in = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_not_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.DurationRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.DurationRules)
  return false;
#undef DO_
}

void DurationRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.DurationRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // optional .google.protobuf.Duration const = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->const__, output);
  }

  // optional .google.protobuf.Duration lt = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lt_, output);
  }

  // optional .google.protobuf.Duration lte = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lte_, output);
  }

  // optional .google.protobuf.Duration gt = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gt_, output);
  }

  // optional .google.protobuf.Duration gte = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->gte_, output);
  }

  // repeated .google.protobuf.Duration in = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->in(static_cast<int>(i)), output);
  }

  // repeated .google.protobuf.Duration not_in = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->not_in_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->not_in(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.DurationRules)
}

::google::protobuf::uint8* DurationRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.DurationRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // optional .google.protobuf.Duration const = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->const__, deterministic, target);
  }

  // optional .google.protobuf.Duration lt = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lt_, deterministic, target);
  }

  // optional .google.protobuf.Duration lte = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lte_, deterministic, target);
  }

  // optional .google.protobuf.Duration gt = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gt_, deterministic, target);
  }

  // optional .google.protobuf.Duration gte = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->gte_, deterministic, target);
  }

  // repeated .google.protobuf.Duration in = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->in(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.protobuf.Duration not_in = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->not_in_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->not_in(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.DurationRules)
  return target;
}

size_t DurationRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.DurationRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .google.protobuf.Duration in = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->in(static_cast<int>(i)));
    }
  }

  // repeated .google.protobuf.Duration not_in = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->not_in_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->not_in(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .google.protobuf.Duration const = 2;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->const__);
    }

    // optional .google.protobuf.Duration lt = 3;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lt_);
    }

    // optional .google.protobuf.Duration lte = 4;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lte_);
    }

    // optional .google.protobuf.Duration gt = 5;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gt_);
    }

    // optional .google.protobuf.Duration gte = 6;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gte_);
    }

    // optional bool required = 1;
    if (has_required()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.DurationRules)
  GOOGLE_DCHECK_NE(&from, this);
  const DurationRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DurationRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.DurationRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.DurationRules)
    MergeFrom(*source);
  }
}

void DurationRules::MergeFrom(const DurationRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.DurationRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  not_in_.MergeFrom(from.not_in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_const_()->::google::protobuf::Duration::MergeFrom(from.const_());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lt()->::google::protobuf::Duration::MergeFrom(from.lt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lte()->::google::protobuf::Duration::MergeFrom(from.lte());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gt()->::google::protobuf::Duration::MergeFrom(from.gt());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_gte()->::google::protobuf::Duration::MergeFrom(from.gte());
    }
    if (cached_has_bits & 0x00000020u) {
      required_ = from.required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DurationRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.DurationRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationRules::CopyFrom(const DurationRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.DurationRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationRules::IsInitialized() const {
  return true;
}

void DurationRules::Swap(DurationRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DurationRules::InternalSwap(DurationRules* other) {
  using std::swap;
  in_.InternalSwap(&other->in_);
  not_in_.InternalSwap(&other->not_in_);
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(required_, other->required_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DurationRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DurationRules

// optional bool required = 1;
bool DurationRules::has_required() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DurationRules::set_has_required() {
  _has_bits_[0] |= 0x00000020u;
}
void DurationRules::clear_has_required() {
  _has_bits_[0] &= ~0x00000020u;
}
void DurationRules::clear_required() {
  required_ = false;
  clear_has_required();
}
bool DurationRules::required() const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.required)
  return required_;
}
void DurationRules::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:validate.DurationRules.required)
}

// optional .google.protobuf.Duration const = 2;
bool DurationRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DurationRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void DurationRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void DurationRules::clear_const_() {
  if (const__ != NULL) const__->::google::protobuf::Duration::Clear();
  clear_has_const_();
}
const ::google::protobuf::Duration& DurationRules::const_() const {
  const ::google::protobuf::Duration* p = const__;
  // @@protoc_insertion_point(field_get:validate.DurationRules.const)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* DurationRules::mutable_const_() {
  set_has_const_();
  if (const__ == NULL) {
    const__ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.const)
  return const__;
}
::google::protobuf::Duration* DurationRules::release_const_() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.const)
  clear_has_const_();
  ::google::protobuf::Duration* temp = const__;
  const__ = NULL;
  return temp;
}
void DurationRules::set_allocated_const_(::google::protobuf::Duration* const_) {
  delete const__;
  if (const_ != NULL && const_->GetArena() != NULL) {
    ::google::protobuf::Duration* new_const_ = new ::google::protobuf::Duration;
    new_const_->CopyFrom(*const_);
    const_ = new_const_;
  }
  const__ = const_;
  if (const_) {
    set_has_const_();
  } else {
    clear_has_const_();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.const)
}

// optional .google.protobuf.Duration lt = 3;
bool DurationRules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DurationRules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void DurationRules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void DurationRules::clear_lt() {
  if (lt_ != NULL) lt_->::google::protobuf::Duration::Clear();
  clear_has_lt();
}
const ::google::protobuf::Duration& DurationRules::lt() const {
  const ::google::protobuf::Duration* p = lt_;
  // @@protoc_insertion_point(field_get:validate.DurationRules.lt)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* DurationRules::mutable_lt() {
  set_has_lt();
  if (lt_ == NULL) {
    lt_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.lt)
  return lt_;
}
::google::protobuf::Duration* DurationRules::release_lt() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.lt)
  clear_has_lt();
  ::google::protobuf::Duration* temp = lt_;
  lt_ = NULL;
  return temp;
}
void DurationRules::set_allocated_lt(::google::protobuf::Duration* lt) {
  delete lt_;
  if (lt != NULL && lt->GetArena() != NULL) {
    ::google::protobuf::Duration* new_lt = new ::google::protobuf::Duration;
    new_lt->CopyFrom(*lt);
    lt = new_lt;
  }
  lt_ = lt;
  if (lt) {
    set_has_lt();
  } else {
    clear_has_lt();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.lt)
}

// optional .google.protobuf.Duration lte = 4;
bool DurationRules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DurationRules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void DurationRules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void DurationRules::clear_lte() {
  if (lte_ != NULL) lte_->::google::protobuf::Duration::Clear();
  clear_has_lte();
}
const ::google::protobuf::Duration& DurationRules::lte() const {
  const ::google::protobuf::Duration* p = lte_;
  // @@protoc_insertion_point(field_get:validate.DurationRules.lte)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* DurationRules::mutable_lte() {
  set_has_lte();
  if (lte_ == NULL) {
    lte_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.lte)
  return lte_;
}
::google::protobuf::Duration* DurationRules::release_lte() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.lte)
  clear_has_lte();
  ::google::protobuf::Duration* temp = lte_;
  lte_ = NULL;
  return temp;
}
void DurationRules::set_allocated_lte(::google::protobuf::Duration* lte) {
  delete lte_;
  if (lte != NULL && lte->GetArena() != NULL) {
    ::google::protobuf::Duration* new_lte = new ::google::protobuf::Duration;
    new_lte->CopyFrom(*lte);
    lte = new_lte;
  }
  lte_ = lte;
  if (lte) {
    set_has_lte();
  } else {
    clear_has_lte();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.lte)
}

// optional .google.protobuf.Duration gt = 5;
bool DurationRules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DurationRules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void DurationRules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void DurationRules::clear_gt() {
  if (gt_ != NULL) gt_->::google::protobuf::Duration::Clear();
  clear_has_gt();
}
const ::google::protobuf::Duration& DurationRules::gt() const {
  const ::google::protobuf::Duration* p = gt_;
  // @@protoc_insertion_point(field_get:validate.DurationRules.gt)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* DurationRules::mutable_gt() {
  set_has_gt();
  if (gt_ == NULL) {
    gt_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.gt)
  return gt_;
}
::google::protobuf::Duration* DurationRules::release_gt() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.gt)
  clear_has_gt();
  ::google::protobuf::Duration* temp = gt_;
  gt_ = NULL;
  return temp;
}
void DurationRules::set_allocated_gt(::google::protobuf::Duration* gt) {
  delete gt_;
  if (gt != NULL && gt->GetArena() != NULL) {
    ::google::protobuf::Duration* new_gt = new ::google::protobuf::Duration;
    new_gt->CopyFrom(*gt);
    gt = new_gt;
  }
  gt_ = gt;
  if (gt) {
    set_has_gt();
  } else {
    clear_has_gt();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.gt)
}

// optional .google.protobuf.Duration gte = 6;
bool DurationRules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DurationRules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void DurationRules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void DurationRules::clear_gte() {
  if (gte_ != NULL) gte_->::google::protobuf::Duration::Clear();
  clear_has_gte();
}
const ::google::protobuf::Duration& DurationRules::gte() const {
  const ::google::protobuf::Duration* p = gte_;
  // @@protoc_insertion_point(field_get:validate.DurationRules.gte)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* DurationRules::mutable_gte() {
  set_has_gte();
  if (gte_ == NULL) {
    gte_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.gte)
  return gte_;
}
::google::protobuf::Duration* DurationRules::release_gte() {
  // @@protoc_insertion_point(field_release:validate.DurationRules.gte)
  clear_has_gte();
  ::google::protobuf::Duration* temp = gte_;
  gte_ = NULL;
  return temp;
}
void DurationRules::set_allocated_gte(::google::protobuf::Duration* gte) {
  delete gte_;
  if (gte != NULL && gte->GetArena() != NULL) {
    ::google::protobuf::Duration* new_gte = new ::google::protobuf::Duration;
    new_gte->CopyFrom(*gte);
    gte = new_gte;
  }
  gte_ = gte;
  if (gte) {
    set_has_gte();
  } else {
    clear_has_gte();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.DurationRules.gte)
}

// repeated .google.protobuf.Duration in = 7;
int DurationRules::in_size() const {
  return in_.size();
}
void DurationRules::clear_in() {
  in_.Clear();
}
const ::google::protobuf::Duration& DurationRules::in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.in)
  return in_.Get(index);
}
::google::protobuf::Duration* DurationRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.in)
  return in_.Mutable(index);
}
::google::protobuf::Duration* DurationRules::add_in() {
  // @@protoc_insertion_point(field_add:validate.DurationRules.in)
  return in_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Duration >*
DurationRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DurationRules.in)
  return &in_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Duration >&
DurationRules::in() const {
  // @@protoc_insertion_point(field_list:validate.DurationRules.in)
  return in_;
}

// repeated .google.protobuf.Duration not_in = 8;
int DurationRules::not_in_size() const {
  return not_in_.size();
}
void DurationRules::clear_not_in() {
  not_in_.Clear();
}
const ::google::protobuf::Duration& DurationRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:validate.DurationRules.not_in)
  return not_in_.Get(index);
}
::google::protobuf::Duration* DurationRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:validate.DurationRules.not_in)
  return not_in_.Mutable(index);
}
::google::protobuf::Duration* DurationRules::add_not_in() {
  // @@protoc_insertion_point(field_add:validate.DurationRules.not_in)
  return not_in_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Duration >*
DurationRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:validate.DurationRules.not_in)
  return &not_in_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Duration >&
DurationRules::not_in() const {
  // @@protoc_insertion_point(field_list:validate.DurationRules.not_in)
  return not_in_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimestampRules::kRequiredFieldNumber;
const int TimestampRules::kConstFieldNumber;
const int TimestampRules::kLtFieldNumber;
const int TimestampRules::kLteFieldNumber;
const int TimestampRules::kGtFieldNumber;
const int TimestampRules::kGteFieldNumber;
const int TimestampRules::kLtNowFieldNumber;
const int TimestampRules::kGtNowFieldNumber;
const int TimestampRules::kWithinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimestampRules::TimestampRules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_validate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:validate.TimestampRules)
}
TimestampRules::TimestampRules(const TimestampRules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_const_()) {
    const__ = new ::google::protobuf::Timestamp(*from.const__);
  } else {
    const__ = NULL;
  }
  if (from.has_lt()) {
    lt_ = new ::google::protobuf::Timestamp(*from.lt_);
  } else {
    lt_ = NULL;
  }
  if (from.has_lte()) {
    lte_ = new ::google::protobuf::Timestamp(*from.lte_);
  } else {
    lte_ = NULL;
  }
  if (from.has_gt()) {
    gt_ = new ::google::protobuf::Timestamp(*from.gt_);
  } else {
    gt_ = NULL;
  }
  if (from.has_gte()) {
    gte_ = new ::google::protobuf::Timestamp(*from.gte_);
  } else {
    gte_ = NULL;
  }
  if (from.has_within()) {
    within_ = new ::google::protobuf::Duration(*from.within_);
  } else {
    within_ = NULL;
  }
  ::memcpy(&required_, &from.required_,
    static_cast<size_t>(reinterpret_cast<char*>(&gt_now_) -
    reinterpret_cast<char*>(&required_)) + sizeof(gt_now_));
  // @@protoc_insertion_point(copy_constructor:validate.TimestampRules)
}

void TimestampRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&const__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gt_now_) -
      reinterpret_cast<char*>(&const__)) + sizeof(gt_now_));
}

TimestampRules::~TimestampRules() {
  // @@protoc_insertion_point(destructor:validate.TimestampRules)
  SharedDtor();
}

void TimestampRules::SharedDtor() {
  if (this != internal_default_instance()) delete const__;
  if (this != internal_default_instance()) delete lt_;
  if (this != internal_default_instance()) delete lte_;
  if (this != internal_default_instance()) delete gt_;
  if (this != internal_default_instance()) delete gte_;
  if (this != internal_default_instance()) delete within_;
}

void TimestampRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimestampRules::descriptor() {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimestampRules& TimestampRules::default_instance() {
  protobuf_validate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimestampRules* TimestampRules::New(::google::protobuf::Arena* arena) const {
  TimestampRules* n = new TimestampRules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimestampRules::Clear() {
// @@protoc_insertion_point(message_clear_start:validate.TimestampRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(const__ != NULL);
      const__->::google::protobuf::Timestamp::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lt_ != NULL);
      lt_->::google::protobuf::Timestamp::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lte_ != NULL);
      lte_->::google::protobuf::Timestamp::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gt_ != NULL);
      gt_->::google::protobuf::Timestamp::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(gte_ != NULL);
      gte_->::google::protobuf::Timestamp::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(within_ != NULL);
      within_->::google::protobuf::Duration::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&required_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lt_now_) -
        reinterpret_cast<char*>(&required_)) + sizeof(lt_now_));
  }
  gt_now_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimestampRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:validate.TimestampRules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool required = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp const = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_const_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp lt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp lte = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp gt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp gte = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gte()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lt_now = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_lt_now();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lt_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gt_now = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_gt_now();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gt_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration within = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_within()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:validate.TimestampRules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:validate.TimestampRules)
  return false;
#undef DO_
}

void TimestampRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:validate.TimestampRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required(), output);
  }

  // optional .google.protobuf.Timestamp const = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->const__, output);
  }

  // optional .google.protobuf.Timestamp lt = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lt_, output);
  }

  // optional .google.protobuf.Timestamp lte = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lte_, output);
  }

  // optional .google.protobuf.Timestamp gt = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gt_, output);
  }

  // optional .google.protobuf.Timestamp gte = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->gte_, output);
  }

  // optional bool lt_now = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->lt_now(), output);
  }

  // optional bool gt_now = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gt_now(), output);
  }

  // optional .google.protobuf.Duration within = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->within_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:validate.TimestampRules)
}

::google::protobuf::uint8* TimestampRules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:validate.TimestampRules)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required(), target);
  }

  // optional .google.protobuf.Timestamp const = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->const__, deterministic, target);
  }

  // optional .google.protobuf.Timestamp lt = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lt_, deterministic, target);
  }

  // optional .google.protobuf.Timestamp lte = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lte_, deterministic, target);
  }

  // optional .google.protobuf.Timestamp gt = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gt_, deterministic, target);
  }

  // optional .google.protobuf.Timestamp gte = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->gte_, deterministic, target);
  }

  // optional bool lt_now = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->lt_now(), target);
  }

  // optional bool gt_now = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gt_now(), target);
  }

  // optional .google.protobuf.Duration within = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->within_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validate.TimestampRules)
  return target;
}

size_t TimestampRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validate.TimestampRules)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .google.protobuf.Timestamp const = 2;
    if (has_const_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->const__);
    }

    // optional .google.protobuf.Timestamp lt = 3;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lt_);
    }

    // optional .google.protobuf.Timestamp lte = 4;
    if (has_lte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lte_);
    }

    // optional .google.protobuf.Timestamp gt = 5;
    if (has_gt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gt_);
    }

    // optional .google.protobuf.Timestamp gte = 6;
    if (has_gte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gte_);
    }

    // optional .google.protobuf.Duration within = 9;
    if (has_within()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->within_);
    }

    // optional bool required = 1;
    if (has_required()) {
      total_size += 1 + 1;
    }

    // optional bool lt_now = 7;
    if (has_lt_now()) {
      total_size += 1 + 1;
    }

  }
  // optional bool gt_now = 8;
  if (has_gt_now()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimestampRules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validate.TimestampRules)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampRules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimestampRules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validate.TimestampRules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validate.TimestampRules)
    MergeFrom(*source);
  }
}

void TimestampRules::MergeFrom(const TimestampRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validate.TimestampRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_const_()->::google::protobuf::Timestamp::MergeFrom(from.const_());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lt()->::google::protobuf::Timestamp::MergeFrom(from.lt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lte()->::google::protobuf::Timestamp::MergeFrom(from.lte());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gt()->::google::protobuf::Timestamp::MergeFrom(from.gt());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_gte()->::google::protobuf::Timestamp::MergeFrom(from.gte());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_within()->::google::protobuf::Duration::MergeFrom(from.within());
    }
    if (cached_has_bits & 0x00000040u) {
      required_ = from.required_;
    }
    if (cached_has_bits & 0x00000080u) {
      lt_now_ = from.lt_now_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_gt_now(from.gt_now());
  }
}

void TimestampRules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validate.TimestampRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampRules::CopyFrom(const TimestampRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validate.TimestampRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampRules::IsInitialized() const {
  return true;
}

void TimestampRules::Swap(TimestampRules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimestampRules::InternalSwap(TimestampRules* other) {
  using std::swap;
  swap(const__, other->const__);
  swap(lt_, other->lt_);
  swap(lte_, other->lte_);
  swap(gt_, other->gt_);
  swap(gte_, other->gte_);
  swap(within_, other->within_);
  swap(required_, other->required_);
  swap(lt_now_, other->lt_now_);
  swap(gt_now_, other->gt_now_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimestampRules::GetMetadata() const {
  protobuf_validate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_validate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimestampRules

// optional bool required = 1;
bool TimestampRules::has_required() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TimestampRules::set_has_required() {
  _has_bits_[0] |= 0x00000040u;
}
void TimestampRules::clear_has_required() {
  _has_bits_[0] &= ~0x00000040u;
}
void TimestampRules::clear_required() {
  required_ = false;
  clear_has_required();
}
bool TimestampRules::required() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.required)
  return required_;
}
void TimestampRules::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:validate.TimestampRules.required)
}

// optional .google.protobuf.Timestamp const = 2;
bool TimestampRules::has_const_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimestampRules::set_has_const_() {
  _has_bits_[0] |= 0x00000001u;
}
void TimestampRules::clear_has_const_() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimestampRules::clear_const_() {
  if (const__ != NULL) const__->::google::protobuf::Timestamp::Clear();
  clear_has_const_();
}
const ::google::protobuf::Timestamp& TimestampRules::const_() const {
  const ::google::protobuf::Timestamp* p = const__;
  // @@protoc_insertion_point(field_get:validate.TimestampRules.const)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* TimestampRules::mutable_const_() {
  set_has_const_();
  if (const__ == NULL) {
    const__ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.const)
  return const__;
}
::google::protobuf::Timestamp* TimestampRules::release_const_() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.const)
  clear_has_const_();
  ::google::protobuf::Timestamp* temp = const__;
  const__ = NULL;
  return temp;
}
void TimestampRules::set_allocated_const_(::google::protobuf::Timestamp* const_) {
  delete const__;
  if (const_ != NULL && const_->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_const_ = new ::google::protobuf::Timestamp;
    new_const_->CopyFrom(*const_);
    const_ = new_const_;
  }
  const__ = const_;
  if (const_) {
    set_has_const_();
  } else {
    clear_has_const_();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.const)
}

// optional .google.protobuf.Timestamp lt = 3;
bool TimestampRules::has_lt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimestampRules::set_has_lt() {
  _has_bits_[0] |= 0x00000002u;
}
void TimestampRules::clear_has_lt() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimestampRules::clear_lt() {
  if (lt_ != NULL) lt_->::google::protobuf::Timestamp::Clear();
  clear_has_lt();
}
const ::google::protobuf::Timestamp& TimestampRules::lt() const {
  const ::google::protobuf::Timestamp* p = lt_;
  // @@protoc_insertion_point(field_get:validate.TimestampRules.lt)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* TimestampRules::mutable_lt() {
  set_has_lt();
  if (lt_ == NULL) {
    lt_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.lt)
  return lt_;
}
::google::protobuf::Timestamp* TimestampRules::release_lt() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.lt)
  clear_has_lt();
  ::google::protobuf::Timestamp* temp = lt_;
  lt_ = NULL;
  return temp;
}
void TimestampRules::set_allocated_lt(::google::protobuf::Timestamp* lt) {
  delete lt_;
  if (lt != NULL && lt->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_lt = new ::google::protobuf::Timestamp;
    new_lt->CopyFrom(*lt);
    lt = new_lt;
  }
  lt_ = lt;
  if (lt) {
    set_has_lt();
  } else {
    clear_has_lt();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.lt)
}

// optional .google.protobuf.Timestamp lte = 4;
bool TimestampRules::has_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimestampRules::set_has_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void TimestampRules::clear_has_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimestampRules::clear_lte() {
  if (lte_ != NULL) lte_->::google::protobuf::Timestamp::Clear();
  clear_has_lte();
}
const ::google::protobuf::Timestamp& TimestampRules::lte() const {
  const ::google::protobuf::Timestamp* p = lte_;
  // @@protoc_insertion_point(field_get:validate.TimestampRules.lte)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* TimestampRules::mutable_lte() {
  set_has_lte();
  if (lte_ == NULL) {
    lte_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.lte)
  return lte_;
}
::google::protobuf::Timestamp* TimestampRules::release_lte() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.lte)
  clear_has_lte();
  ::google::protobuf::Timestamp* temp = lte_;
  lte_ = NULL;
  return temp;
}
void TimestampRules::set_allocated_lte(::google::protobuf::Timestamp* lte) {
  delete lte_;
  if (lte != NULL && lte->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_lte = new ::google::protobuf::Timestamp;
    new_lte->CopyFrom(*lte);
    lte = new_lte;
  }
  lte_ = lte;
  if (lte) {
    set_has_lte();
  } else {
    clear_has_lte();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.lte)
}

// optional .google.protobuf.Timestamp gt = 5;
bool TimestampRules::has_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimestampRules::set_has_gt() {
  _has_bits_[0] |= 0x00000008u;
}
void TimestampRules::clear_has_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimestampRules::clear_gt() {
  if (gt_ != NULL) gt_->::google::protobuf::Timestamp::Clear();
  clear_has_gt();
}
const ::google::protobuf::Timestamp& TimestampRules::gt() const {
  const ::google::protobuf::Timestamp* p = gt_;
  // @@protoc_insertion_point(field_get:validate.TimestampRules.gt)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* TimestampRules::mutable_gt() {
  set_has_gt();
  if (gt_ == NULL) {
    gt_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.gt)
  return gt_;
}
::google::protobuf::Timestamp* TimestampRules::release_gt() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.gt)
  clear_has_gt();
  ::google::protobuf::Timestamp* temp = gt_;
  gt_ = NULL;
  return temp;
}
void TimestampRules::set_allocated_gt(::google::protobuf::Timestamp* gt) {
  delete gt_;
  if (gt != NULL && gt->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_gt = new ::google::protobuf::Timestamp;
    new_gt->CopyFrom(*gt);
    gt = new_gt;
  }
  gt_ = gt;
  if (gt) {
    set_has_gt();
  } else {
    clear_has_gt();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.gt)
}

// optional .google.protobuf.Timestamp gte = 6;
bool TimestampRules::has_gte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimestampRules::set_has_gte() {
  _has_bits_[0] |= 0x00000010u;
}
void TimestampRules::clear_has_gte() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimestampRules::clear_gte() {
  if (gte_ != NULL) gte_->::google::protobuf::Timestamp::Clear();
  clear_has_gte();
}
const ::google::protobuf::Timestamp& TimestampRules::gte() const {
  const ::google::protobuf::Timestamp* p = gte_;
  // @@protoc_insertion_point(field_get:validate.TimestampRules.gte)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* TimestampRules::mutable_gte() {
  set_has_gte();
  if (gte_ == NULL) {
    gte_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.gte)
  return gte_;
}
::google::protobuf::Timestamp* TimestampRules::release_gte() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.gte)
  clear_has_gte();
  ::google::protobuf::Timestamp* temp = gte_;
  gte_ = NULL;
  return temp;
}
void TimestampRules::set_allocated_gte(::google::protobuf::Timestamp* gte) {
  delete gte_;
  if (gte != NULL && gte->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_gte = new ::google::protobuf::Timestamp;
    new_gte->CopyFrom(*gte);
    gte = new_gte;
  }
  gte_ = gte;
  if (gte) {
    set_has_gte();
  } else {
    clear_has_gte();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.gte)
}

// optional bool lt_now = 7;
bool TimestampRules::has_lt_now() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TimestampRules::set_has_lt_now() {
  _has_bits_[0] |= 0x00000080u;
}
void TimestampRules::clear_has_lt_now() {
  _has_bits_[0] &= ~0x00000080u;
}
void TimestampRules::clear_lt_now() {
  lt_now_ = false;
  clear_has_lt_now();
}
bool TimestampRules::lt_now() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.lt_now)
  return lt_now_;
}
void TimestampRules::set_lt_now(bool value) {
  set_has_lt_now();
  lt_now_ = value;
  // @@protoc_insertion_point(field_set:validate.TimestampRules.lt_now)
}

// optional bool gt_now = 8;
bool TimestampRules::has_gt_now() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TimestampRules::set_has_gt_now() {
  _has_bits_[0] |= 0x00000100u;
}
void TimestampRules::clear_has_gt_now() {
  _has_bits_[0] &= ~0x00000100u;
}
void TimestampRules::clear_gt_now() {
  gt_now_ = false;
  clear_has_gt_now();
}
bool TimestampRules::gt_now() const {
  // @@protoc_insertion_point(field_get:validate.TimestampRules.gt_now)
  return gt_now_;
}
void TimestampRules::set_gt_now(bool value) {
  set_has_gt_now();
  gt_now_ = value;
  // @@protoc_insertion_point(field_set:validate.TimestampRules.gt_now)
}

// optional .google.protobuf.Duration within = 9;
bool TimestampRules::has_within() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TimestampRules::set_has_within() {
  _has_bits_[0] |= 0x00000020u;
}
void TimestampRules::clear_has_within() {
  _has_bits_[0] &= ~0x00000020u;
}
void TimestampRules::clear_within() {
  if (within_ != NULL) within_->::google::protobuf::Duration::Clear();
  clear_has_within();
}
const ::google::protobuf::Duration& TimestampRules::within() const {
  const ::google::protobuf::Duration* p = within_;
  // @@protoc_insertion_point(field_get:validate.TimestampRules.within)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* TimestampRules::mutable_within() {
  set_has_within();
  if (within_ == NULL) {
    within_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:validate.TimestampRules.within)
  return within_;
}
::google::protobuf::Duration* TimestampRules::release_within() {
  // @@protoc_insertion_point(field_release:validate.TimestampRules.within)
  clear_has_within();
  ::google::protobuf::Duration* temp = within_;
  within_ = NULL;
  return temp;
}
void TimestampRules::set_allocated_within(::google::protobuf::Duration* within) {
  delete within_;
  if (within != NULL && within->GetArena() != NULL) {
    ::google::protobuf::Duration* new_within = new ::google::protobuf::Duration;
    new_within->CopyFrom(*within);
    within = new_within;
  }
  within_ = within;
  if (within) {
    set_has_within();
  } else {
    clear_has_within();
  }
  // @@protoc_insertion_point(field_set_allocated:validate.TimestampRules.within)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  disabled(kDisabledFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::OneofOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  required(kRequiredFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::validate::FieldRules >, 11, false >
  rules(kRulesFieldNumber, *::validate::FieldRules::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace validate

// @@protoc_insertion_point(global_scope)
