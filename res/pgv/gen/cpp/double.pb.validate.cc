// Code generated by protoc-gen-validate
// source: double.proto
// DO NOT EDIT!!!

#include "double.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::pgv::DoubleRangeGreaterThan> validator___pgv__DoubleRangeGreaterThan(static_cast<bool(*)(const ::pgv::DoubleRangeGreaterThan&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::DoubleRangeConst> validator___pgv__DoubleRangeConst(static_cast<bool(*)(const ::pgv::DoubleRangeConst&, pgv::ValidationMsg*)>(::pgv::Validate));




} // namespace validate
} // namespace pgv


namespace pgv {


// Validate checks the field values on ::pgv::DoubleRangeGreaterThan with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::DoubleRangeGreaterThan& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	

	
	
		if (item <= 100) {
			{
std::ostringstream msg("invalid ");
msg << "DoubleRangeGreaterThanValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must be greater than \" %!q(float64=100)]";
*err = msg.str();
return false;
}
		}
	

	


		}
	

	return true;
}





// Validate checks the field values on ::pgv::DoubleRangeConst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::DoubleRangeConst& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	
		if (item != 100) {
			{
std::ostringstream msg("invalid ");
msg << "DoubleRangeConstValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must equal \" %!q(float64=100)]";
*err = msg.str();
return false;
}
		}
	

	
	

	


		}
	

	return true;
}






} // namespace

