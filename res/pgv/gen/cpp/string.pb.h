// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: string.proto

#ifndef PROTOBUF_INCLUDED_string_2eproto
#define PROTOBUF_INCLUDED_string_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_string_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_string_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_string_2eproto();
namespace pgv {
class StringRangeContains;
class StringRangeContainsDefaultTypeInternal;
extern StringRangeContainsDefaultTypeInternal _StringRangeContains_default_instance_;
class StringRangePrefix;
class StringRangePrefixDefaultTypeInternal;
extern StringRangePrefixDefaultTypeInternal _StringRangePrefix_default_instance_;
class StringRangeSuffix;
class StringRangeSuffixDefaultTypeInternal;
extern StringRangeSuffixDefaultTypeInternal _StringRangeSuffix_default_instance_;
}  // namespace pgv
namespace google {
namespace protobuf {
template<> ::pgv::StringRangeContains* Arena::CreateMaybeMessage<::pgv::StringRangeContains>(Arena*);
template<> ::pgv::StringRangePrefix* Arena::CreateMaybeMessage<::pgv::StringRangePrefix>(Arena*);
template<> ::pgv::StringRangeSuffix* Arena::CreateMaybeMessage<::pgv::StringRangeSuffix>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pgv {

// ===================================================================

class StringRangePrefix final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pgv.StringRangePrefix) */ {
 public:
  StringRangePrefix();
  virtual ~StringRangePrefix();

  StringRangePrefix(const StringRangePrefix& from);

  inline StringRangePrefix& operator=(const StringRangePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringRangePrefix(StringRangePrefix&& from) noexcept
    : StringRangePrefix() {
    *this = ::std::move(from);
  }

  inline StringRangePrefix& operator=(StringRangePrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StringRangePrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringRangePrefix* internal_default_instance() {
    return reinterpret_cast<const StringRangePrefix*>(
               &_StringRangePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StringRangePrefix* other);
  friend void swap(StringRangePrefix& a, StringRangePrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringRangePrefix* New() const final {
    return CreateMaybeMessage<StringRangePrefix>(nullptr);
  }

  StringRangePrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringRangePrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringRangePrefix& from);
  void MergeFrom(const StringRangePrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRangePrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string content = 1 [(.validate.rules) = {
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content(int index, ::std::string&& value);
  #endif
  void set_content(int index, const char* value);
  void set_content(int index, const char* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  #if LANG_CXX11
  void add_content(::std::string&& value);
  #endif
  void add_content(const char* value);
  void add_content(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_content();

  // @@protoc_insertion_point(class_scope:pgv.StringRangePrefix)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_string_2eproto;
};
// -------------------------------------------------------------------

class StringRangeSuffix final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pgv.StringRangeSuffix) */ {
 public:
  StringRangeSuffix();
  virtual ~StringRangeSuffix();

  StringRangeSuffix(const StringRangeSuffix& from);

  inline StringRangeSuffix& operator=(const StringRangeSuffix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringRangeSuffix(StringRangeSuffix&& from) noexcept
    : StringRangeSuffix() {
    *this = ::std::move(from);
  }

  inline StringRangeSuffix& operator=(StringRangeSuffix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StringRangeSuffix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringRangeSuffix* internal_default_instance() {
    return reinterpret_cast<const StringRangeSuffix*>(
               &_StringRangeSuffix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StringRangeSuffix* other);
  friend void swap(StringRangeSuffix& a, StringRangeSuffix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringRangeSuffix* New() const final {
    return CreateMaybeMessage<StringRangeSuffix>(nullptr);
  }

  StringRangeSuffix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringRangeSuffix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringRangeSuffix& from);
  void MergeFrom(const StringRangeSuffix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRangeSuffix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string content = 1 [(.validate.rules) = {
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content(int index, ::std::string&& value);
  #endif
  void set_content(int index, const char* value);
  void set_content(int index, const char* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  #if LANG_CXX11
  void add_content(::std::string&& value);
  #endif
  void add_content(const char* value);
  void add_content(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_content();

  // @@protoc_insertion_point(class_scope:pgv.StringRangeSuffix)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_string_2eproto;
};
// -------------------------------------------------------------------

class StringRangeContains final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pgv.StringRangeContains) */ {
 public:
  StringRangeContains();
  virtual ~StringRangeContains();

  StringRangeContains(const StringRangeContains& from);

  inline StringRangeContains& operator=(const StringRangeContains& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringRangeContains(StringRangeContains&& from) noexcept
    : StringRangeContains() {
    *this = ::std::move(from);
  }

  inline StringRangeContains& operator=(StringRangeContains&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StringRangeContains& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringRangeContains* internal_default_instance() {
    return reinterpret_cast<const StringRangeContains*>(
               &_StringRangeContains_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StringRangeContains* other);
  friend void swap(StringRangeContains& a, StringRangeContains& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringRangeContains* New() const final {
    return CreateMaybeMessage<StringRangeContains>(nullptr);
  }

  StringRangeContains* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringRangeContains>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringRangeContains& from);
  void MergeFrom(const StringRangeContains& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRangeContains* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string content = 1 [(.validate.rules) = {
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content(int index, ::std::string&& value);
  #endif
  void set_content(int index, const char* value);
  void set_content(int index, const char* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  #if LANG_CXX11
  void add_content(::std::string&& value);
  #endif
  void add_content(const char* value);
  void add_content(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_content();

  // @@protoc_insertion_point(class_scope:pgv.StringRangeContains)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_string_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringRangePrefix

// repeated string content = 1 [(.validate.rules) = {
inline int StringRangePrefix::content_size() const {
  return content_.size();
}
inline void StringRangePrefix::clear_content() {
  content_.Clear();
}
inline const ::std::string& StringRangePrefix::content(int index) const {
  // @@protoc_insertion_point(field_get:pgv.StringRangePrefix.content)
  return content_.Get(index);
}
inline ::std::string* StringRangePrefix::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:pgv.StringRangePrefix.content)
  return content_.Mutable(index);
}
inline void StringRangePrefix::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pgv.StringRangePrefix.content)
  content_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringRangePrefix::set_content(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pgv.StringRangePrefix.content)
  content_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringRangePrefix::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pgv.StringRangePrefix.content)
}
inline void StringRangePrefix::set_content(int index, const char* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pgv.StringRangePrefix.content)
}
inline ::std::string* StringRangePrefix::add_content() {
  // @@protoc_insertion_point(field_add_mutable:pgv.StringRangePrefix.content)
  return content_.Add();
}
inline void StringRangePrefix::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pgv.StringRangePrefix.content)
}
#if LANG_CXX11
inline void StringRangePrefix::add_content(::std::string&& value) {
  content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pgv.StringRangePrefix.content)
}
#endif
inline void StringRangePrefix::add_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pgv.StringRangePrefix.content)
}
inline void StringRangePrefix::add_content(const char* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pgv.StringRangePrefix.content)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StringRangePrefix::content() const {
  // @@protoc_insertion_point(field_list:pgv.StringRangePrefix.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StringRangePrefix::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:pgv.StringRangePrefix.content)
  return &content_;
}

// -------------------------------------------------------------------

// StringRangeSuffix

// repeated string content = 1 [(.validate.rules) = {
inline int StringRangeSuffix::content_size() const {
  return content_.size();
}
inline void StringRangeSuffix::clear_content() {
  content_.Clear();
}
inline const ::std::string& StringRangeSuffix::content(int index) const {
  // @@protoc_insertion_point(field_get:pgv.StringRangeSuffix.content)
  return content_.Get(index);
}
inline ::std::string* StringRangeSuffix::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:pgv.StringRangeSuffix.content)
  return content_.Mutable(index);
}
inline void StringRangeSuffix::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pgv.StringRangeSuffix.content)
  content_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringRangeSuffix::set_content(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pgv.StringRangeSuffix.content)
  content_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringRangeSuffix::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pgv.StringRangeSuffix.content)
}
inline void StringRangeSuffix::set_content(int index, const char* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pgv.StringRangeSuffix.content)
}
inline ::std::string* StringRangeSuffix::add_content() {
  // @@protoc_insertion_point(field_add_mutable:pgv.StringRangeSuffix.content)
  return content_.Add();
}
inline void StringRangeSuffix::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pgv.StringRangeSuffix.content)
}
#if LANG_CXX11
inline void StringRangeSuffix::add_content(::std::string&& value) {
  content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pgv.StringRangeSuffix.content)
}
#endif
inline void StringRangeSuffix::add_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pgv.StringRangeSuffix.content)
}
inline void StringRangeSuffix::add_content(const char* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pgv.StringRangeSuffix.content)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StringRangeSuffix::content() const {
  // @@protoc_insertion_point(field_list:pgv.StringRangeSuffix.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StringRangeSuffix::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:pgv.StringRangeSuffix.content)
  return &content_;
}

// -------------------------------------------------------------------

// StringRangeContains

// repeated string content = 1 [(.validate.rules) = {
inline int StringRangeContains::content_size() const {
  return content_.size();
}
inline void StringRangeContains::clear_content() {
  content_.Clear();
}
inline const ::std::string& StringRangeContains::content(int index) const {
  // @@protoc_insertion_point(field_get:pgv.StringRangeContains.content)
  return content_.Get(index);
}
inline ::std::string* StringRangeContains::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:pgv.StringRangeContains.content)
  return content_.Mutable(index);
}
inline void StringRangeContains::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pgv.StringRangeContains.content)
  content_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringRangeContains::set_content(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pgv.StringRangeContains.content)
  content_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringRangeContains::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pgv.StringRangeContains.content)
}
inline void StringRangeContains::set_content(int index, const char* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pgv.StringRangeContains.content)
}
inline ::std::string* StringRangeContains::add_content() {
  // @@protoc_insertion_point(field_add_mutable:pgv.StringRangeContains.content)
  return content_.Add();
}
inline void StringRangeContains::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pgv.StringRangeContains.content)
}
#if LANG_CXX11
inline void StringRangeContains::add_content(::std::string&& value) {
  content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pgv.StringRangeContains.content)
}
#endif
inline void StringRangeContains::add_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pgv.StringRangeContains.content)
}
inline void StringRangeContains::add_content(const char* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pgv.StringRangeContains.content)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StringRangeContains::content() const {
  // @@protoc_insertion_point(field_list:pgv.StringRangeContains.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StringRangeContains::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:pgv.StringRangeContains.content)
  return &content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pgv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_string_2eproto
