// Code generated by protoc-gen-validate
// source: small.proto
// DO NOT EDIT!!!

#include "small.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::pgv::Small> validator___pgv__Small(static_cast<bool(*)(const ::pgv::Small&, pgv::ValidationMsg*)>(::pgv::Validate));




} // namespace validate
} // namespace pgv


namespace pgv {


// Validate checks the field values on ::pgv::Small with the rules defined in
// the proto definition for this message. If any rules are violated, the
// return value is false and an error message is written to the input string argument.

	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	


	

	

	

	

	



bool Validate(const ::pgv::Small& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	

	
	
		
			
				if (m.field1() <= 0 || m.field1() > 10) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field1";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '\\n' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field2() <= 0 || m.field2() > 10) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field2";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '\\n' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field3() <= 0 || m.field3() > 10) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field3";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '\\n' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field4() <= 0 || m.field4() > 10) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field4";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '\\n' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field5() <= 0 || m.field5() > 10) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field5";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '\\n' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field6() <= 0 || m.field6() > 50) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field6";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '2' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field7() <= 0 || m.field7() > 50) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field7";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '2' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field8() <= 0 || m.field8() > 50) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field8";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '2' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field9() <= 0 || m.field9() > 50) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field9";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '2' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field10() <= 0 || m.field10() > 50) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field10";
msg << ": " << "[\"value must be inside range (\" '\\x00' \", \" '2' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field31() <= 20 || m.field31() > 2500000000) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field31";
msg << ": " << "[\"value must be inside range (\" '\\x14' \", \" %!q(uint64=2500000000) \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	

	
	
		
			
				if (m.field32() <= 20 || m.field32() > 2500000000) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field32";
msg << ": " << "[\"value must be inside range (\" '\\x14' \", \" %!q(uint64=2500000000) \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_field41() && !pgv::Validator<::pgv::MessageB>::CheckMessage(m.field41(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field41";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_field42() && !pgv::Validator<::pgv::MessageC>::CheckMessage(m.field42(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field42";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_field43() && !pgv::Validator<::pgv::MessageD>::CheckMessage(m.field43(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field43";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_field44() && !pgv::Validator<::pgv::MessageE>::CheckMessage(m.field44(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field44";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_field45() && !pgv::Validator<::pgv::MessageF>::CheckMessage(m.field45(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field45";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	


	
		if (m.field51().size() > 10) {
			{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field51";
msg << ": " << "[\"value length must be at most \" '\\n' \" bytes\"]";
*err = msg.str();
return false;
}
		}
	

	

	

	

	

	

	
	

	
	
		
			
				if (m.field101() <= -100 || m.field101() > 100) {
					{
std::ostringstream msg("invalid ");
msg << "SmallValidationError" << "." << "Field101";
msg << ": " << "[\"value must be inside range (\" %!q(int32=-100) \", \" 'd' \"]\"]";
*err = msg.str();
return false;
}
				}
			
		
	

	


	return true;
}






} // namespace

