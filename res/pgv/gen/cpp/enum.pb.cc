// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#include "enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace pgv {
class EnumRangeConstDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnumRangeConst> _instance;
} _EnumRangeConst_default_instance_;
class EnumRangeDefinedOnlyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnumRangeDefinedOnly> _instance;
} _EnumRangeDefinedOnly_default_instance_;
}  // namespace pgv
static void InitDefaultsEnumRangeConst_enum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pgv::_EnumRangeConst_default_instance_;
    new (ptr) ::pgv::EnumRangeConst();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pgv::EnumRangeConst::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnumRangeConst_enum_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnumRangeConst_enum_2eproto}, {}};

static void InitDefaultsEnumRangeDefinedOnly_enum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pgv::_EnumRangeDefinedOnly_default_instance_;
    new (ptr) ::pgv::EnumRangeDefinedOnly();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pgv::EnumRangeDefinedOnly::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnumRangeDefinedOnly_enum_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnumRangeDefinedOnly_enum_2eproto}, {}};

void InitDefaults_enum_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EnumRangeConst_enum_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnumRangeDefinedOnly_enum_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_enum_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_enum_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_enum_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_enum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pgv::EnumRangeConst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pgv::EnumRangeConst, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pgv::EnumRangeDefinedOnly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pgv::EnumRangeDefinedOnly, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pgv::EnumRangeConst)},
  { 6, -1, sizeof(::pgv::EnumRangeDefinedOnly)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pgv::_EnumRangeConst_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pgv::_EnumRangeDefinedOnly_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_enum_2eproto = {
  {}, AddDescriptors_enum_2eproto, "enum.proto", schemas,
  file_default_instances, TableStruct_enum_2eproto::offsets,
  file_level_metadata_enum_2eproto, 2, file_level_enum_descriptors_enum_2eproto, file_level_service_descriptors_enum_2eproto,
};

const char descriptor_table_protodef_enum_2eproto[] =
  "\n\nenum.proto\022\003pgv\032\027validate/validate.pro"
  "to\"h\n\016EnumRangeConst\0229\n\007content\030\001 \003(\0162\027."
  "pgv.EnumRangeConst.SexB\017\272\351\300\003\n\222\001\007\"\005\202\001\002\010\000\""
  "\033\n\003Sex\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001\"t\n\024EnumRang"
  "eDefinedOnly\022\?\n\007content\030\001 \003(\0162\035.pgv.Enum"
  "RangeDefinedOnly.SexB\017\272\351\300\003\n\222\001\007\"\005\202\001\002\020\001\"\033\n"
  "\003Sex\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_enum_2eproto = {
  false, InitDefaults_enum_2eproto, 
  descriptor_table_protodef_enum_2eproto,
  "enum.proto", &assign_descriptors_table_enum_2eproto, 274,
};

void AddDescriptors_enum_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_validate_2fvalidate_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_enum_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_enum_2eproto = []() { AddDescriptors_enum_2eproto(); return true; }();
namespace pgv {
const ::google::protobuf::EnumDescriptor* EnumRangeConst_Sex_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_enum_2eproto);
  return file_level_enum_descriptors_enum_2eproto[0];
}
bool EnumRangeConst_Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnumRangeConst_Sex EnumRangeConst::MALE;
const EnumRangeConst_Sex EnumRangeConst::FEMALE;
const EnumRangeConst_Sex EnumRangeConst::Sex_MIN;
const EnumRangeConst_Sex EnumRangeConst::Sex_MAX;
const int EnumRangeConst::Sex_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnumRangeDefinedOnly_Sex_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_enum_2eproto);
  return file_level_enum_descriptors_enum_2eproto[1];
}
bool EnumRangeDefinedOnly_Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnumRangeDefinedOnly_Sex EnumRangeDefinedOnly::MALE;
const EnumRangeDefinedOnly_Sex EnumRangeDefinedOnly::FEMALE;
const EnumRangeDefinedOnly_Sex EnumRangeDefinedOnly::Sex_MIN;
const EnumRangeDefinedOnly_Sex EnumRangeDefinedOnly::Sex_MAX;
const int EnumRangeDefinedOnly::Sex_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EnumRangeConst::InitAsDefaultInstance() {
}
class EnumRangeConst::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumRangeConst::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumRangeConst::EnumRangeConst()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pgv.EnumRangeConst)
}
EnumRangeConst::EnumRangeConst(const EnumRangeConst& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pgv.EnumRangeConst)
}

void EnumRangeConst::SharedCtor() {
}

EnumRangeConst::~EnumRangeConst() {
  // @@protoc_insertion_point(destructor:pgv.EnumRangeConst)
  SharedDtor();
}

void EnumRangeConst::SharedDtor() {
}

void EnumRangeConst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnumRangeConst& EnumRangeConst::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EnumRangeConst_enum_2eproto.base);
  return *internal_default_instance();
}


void EnumRangeConst::Clear() {
// @@protoc_insertion_point(message_clear_start:pgv.EnumRangeConst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnumRangeConst::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EnumRangeConst*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pgv.EnumRangeConst.Sex content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_content();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_content(static_cast<::pgv::EnumRangeConst_Sex>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnumRangeConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pgv.EnumRangeConst)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pgv.EnumRangeConst.Sex content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_content(static_cast< ::pgv::EnumRangeConst_Sex >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_content(static_cast< ::pgv::EnumRangeConst_Sex >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pgv.EnumRangeConst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pgv.EnumRangeConst)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnumRangeConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pgv.EnumRangeConst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pgv.EnumRangeConst.Sex content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_content_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->content(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pgv.EnumRangeConst)
}

::google::protobuf::uint8* EnumRangeConst::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pgv.EnumRangeConst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pgv.EnumRangeConst.Sex content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _content_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pgv.EnumRangeConst)
  return target;
}

size_t EnumRangeConst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pgv.EnumRangeConst)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pgv.EnumRangeConst.Sex content = 1 [(.validate.rules) = {
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->content_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->content(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumRangeConst::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pgv.EnumRangeConst)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumRangeConst* source =
      ::google::protobuf::DynamicCastToGenerated<EnumRangeConst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pgv.EnumRangeConst)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pgv.EnumRangeConst)
    MergeFrom(*source);
  }
}

void EnumRangeConst::MergeFrom(const EnumRangeConst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pgv.EnumRangeConst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void EnumRangeConst::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pgv.EnumRangeConst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumRangeConst::CopyFrom(const EnumRangeConst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pgv.EnumRangeConst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumRangeConst::IsInitialized() const {
  return true;
}

void EnumRangeConst::Swap(EnumRangeConst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumRangeConst::InternalSwap(EnumRangeConst* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::google::protobuf::Metadata EnumRangeConst::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_enum_2eproto);
  return ::file_level_metadata_enum_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EnumRangeDefinedOnly::InitAsDefaultInstance() {
}
class EnumRangeDefinedOnly::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumRangeDefinedOnly::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumRangeDefinedOnly::EnumRangeDefinedOnly()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pgv.EnumRangeDefinedOnly)
}
EnumRangeDefinedOnly::EnumRangeDefinedOnly(const EnumRangeDefinedOnly& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pgv.EnumRangeDefinedOnly)
}

void EnumRangeDefinedOnly::SharedCtor() {
}

EnumRangeDefinedOnly::~EnumRangeDefinedOnly() {
  // @@protoc_insertion_point(destructor:pgv.EnumRangeDefinedOnly)
  SharedDtor();
}

void EnumRangeDefinedOnly::SharedDtor() {
}

void EnumRangeDefinedOnly::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnumRangeDefinedOnly& EnumRangeDefinedOnly::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EnumRangeDefinedOnly_enum_2eproto.base);
  return *internal_default_instance();
}


void EnumRangeDefinedOnly::Clear() {
// @@protoc_insertion_point(message_clear_start:pgv.EnumRangeDefinedOnly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnumRangeDefinedOnly::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EnumRangeDefinedOnly*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pgv.EnumRangeDefinedOnly.Sex content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_content();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_content(static_cast<::pgv::EnumRangeDefinedOnly_Sex>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnumRangeDefinedOnly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pgv.EnumRangeDefinedOnly)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pgv.EnumRangeDefinedOnly.Sex content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_content(static_cast< ::pgv::EnumRangeDefinedOnly_Sex >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_content(static_cast< ::pgv::EnumRangeDefinedOnly_Sex >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pgv.EnumRangeDefinedOnly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pgv.EnumRangeDefinedOnly)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnumRangeDefinedOnly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pgv.EnumRangeDefinedOnly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pgv.EnumRangeDefinedOnly.Sex content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_content_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->content(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pgv.EnumRangeDefinedOnly)
}

::google::protobuf::uint8* EnumRangeDefinedOnly::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pgv.EnumRangeDefinedOnly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pgv.EnumRangeDefinedOnly.Sex content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _content_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pgv.EnumRangeDefinedOnly)
  return target;
}

size_t EnumRangeDefinedOnly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pgv.EnumRangeDefinedOnly)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pgv.EnumRangeDefinedOnly.Sex content = 1 [(.validate.rules) = {
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->content_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->content(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnumRangeDefinedOnly::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pgv.EnumRangeDefinedOnly)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumRangeDefinedOnly* source =
      ::google::protobuf::DynamicCastToGenerated<EnumRangeDefinedOnly>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pgv.EnumRangeDefinedOnly)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pgv.EnumRangeDefinedOnly)
    MergeFrom(*source);
  }
}

void EnumRangeDefinedOnly::MergeFrom(const EnumRangeDefinedOnly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pgv.EnumRangeDefinedOnly)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void EnumRangeDefinedOnly::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pgv.EnumRangeDefinedOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumRangeDefinedOnly::CopyFrom(const EnumRangeDefinedOnly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pgv.EnumRangeDefinedOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumRangeDefinedOnly::IsInitialized() const {
  return true;
}

void EnumRangeDefinedOnly::Swap(EnumRangeDefinedOnly* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumRangeDefinedOnly::InternalSwap(EnumRangeDefinedOnly* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::google::protobuf::Metadata EnumRangeDefinedOnly::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_enum_2eproto);
  return ::file_level_metadata_enum_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pgv
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pgv::EnumRangeConst* Arena::CreateMaybeMessage< ::pgv::EnumRangeConst >(Arena* arena) {
  return Arena::CreateInternal< ::pgv::EnumRangeConst >(arena);
}
template<> PROTOBUF_NOINLINE ::pgv::EnumRangeDefinedOnly* Arena::CreateMaybeMessage< ::pgv::EnumRangeDefinedOnly >(Arena* arena) {
  return Arena::CreateInternal< ::pgv::EnumRangeDefinedOnly >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
