// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: int64.proto

#include "int64.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace pgv {
class Int64RangeGreaterThanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Int64RangeGreaterThan> _instance;
} _Int64RangeGreaterThan_default_instance_;
class Int64RangeLessThanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Int64RangeLessThan> _instance;
} _Int64RangeLessThan_default_instance_;
class Int64RangeConstDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Int64RangeConst> _instance;
} _Int64RangeConst_default_instance_;
}  // namespace pgv
static void InitDefaultsInt64RangeGreaterThan_int64_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pgv::_Int64RangeGreaterThan_default_instance_;
    new (ptr) ::pgv::Int64RangeGreaterThan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pgv::Int64RangeGreaterThan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Int64RangeGreaterThan_int64_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInt64RangeGreaterThan_int64_2eproto}, {}};

static void InitDefaultsInt64RangeLessThan_int64_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pgv::_Int64RangeLessThan_default_instance_;
    new (ptr) ::pgv::Int64RangeLessThan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pgv::Int64RangeLessThan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Int64RangeLessThan_int64_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInt64RangeLessThan_int64_2eproto}, {}};

static void InitDefaultsInt64RangeConst_int64_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pgv::_Int64RangeConst_default_instance_;
    new (ptr) ::pgv::Int64RangeConst();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pgv::Int64RangeConst::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Int64RangeConst_int64_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInt64RangeConst_int64_2eproto}, {}};

void InitDefaults_int64_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Int64RangeGreaterThan_int64_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Int64RangeLessThan_int64_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Int64RangeConst_int64_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_int64_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_int64_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_int64_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_int64_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pgv::Int64RangeGreaterThan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pgv::Int64RangeGreaterThan, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pgv::Int64RangeLessThan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pgv::Int64RangeLessThan, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pgv::Int64RangeConst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pgv::Int64RangeConst, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pgv::Int64RangeGreaterThan)},
  { 6, -1, sizeof(::pgv::Int64RangeLessThan)},
  { 12, -1, sizeof(::pgv::Int64RangeConst)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pgv::_Int64RangeGreaterThan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pgv::_Int64RangeLessThan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pgv::_Int64RangeConst_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_int64_2eproto = {
  {}, AddDescriptors_int64_2eproto, "int64.proto", schemas,
  file_default_instances, TableStruct_int64_2eproto::offsets,
  file_level_metadata_int64_2eproto, 3, file_level_enum_descriptors_int64_2eproto, file_level_service_descriptors_int64_2eproto,
};

const char descriptor_table_protodef_int64_2eproto[] =
  "\n\013int64.proto\022\003pgv\032\027validate/validate.pr"
  "oto\"8\n\025Int64RangeGreaterThan\022\037\n\007content\030"
  "\001 \003(\003B\016\272\351\300\003\t\222\001\006\"\004\"\002 d\"5\n\022Int64RangeLessT"
  "han\022\037\n\007content\030\001 \003(\003B\016\272\351\300\003\t\222\001\006\"\004\"\002\020d\"2\n\017"
  "Int64RangeConst\022\037\n\007content\030\001 \003(\003B\016\272\351\300\003\t\222"
  "\001\006\"\004\"\002\010db\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_int64_2eproto = {
  false, InitDefaults_int64_2eproto, 
  descriptor_table_protodef_int64_2eproto,
  "int64.proto", &assign_descriptors_table_int64_2eproto, 216,
};

void AddDescriptors_int64_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_validate_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_int64_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_int64_2eproto = []() { AddDescriptors_int64_2eproto(); return true; }();
namespace pgv {

// ===================================================================

void Int64RangeGreaterThan::InitAsDefaultInstance() {
}
class Int64RangeGreaterThan::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64RangeGreaterThan::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64RangeGreaterThan::Int64RangeGreaterThan()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pgv.Int64RangeGreaterThan)
}
Int64RangeGreaterThan::Int64RangeGreaterThan(const Int64RangeGreaterThan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pgv.Int64RangeGreaterThan)
}

void Int64RangeGreaterThan::SharedCtor() {
}

Int64RangeGreaterThan::~Int64RangeGreaterThan() {
  // @@protoc_insertion_point(destructor:pgv.Int64RangeGreaterThan)
  SharedDtor();
}

void Int64RangeGreaterThan::SharedDtor() {
}

void Int64RangeGreaterThan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int64RangeGreaterThan& Int64RangeGreaterThan::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Int64RangeGreaterThan_int64_2eproto.base);
  return *internal_default_instance();
}


void Int64RangeGreaterThan::Clear() {
// @@protoc_insertion_point(message_clear_start:pgv.Int64RangeGreaterThan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Int64RangeGreaterThan::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Int64RangeGreaterThan*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_content();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_content(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Int64RangeGreaterThan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pgv.Int64RangeGreaterThan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_content())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_content())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pgv.Int64RangeGreaterThan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pgv.Int64RangeGreaterThan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Int64RangeGreaterThan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pgv.Int64RangeGreaterThan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_content_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->content(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pgv.Int64RangeGreaterThan)
}

::google::protobuf::uint8* Int64RangeGreaterThan::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pgv.Int64RangeGreaterThan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _content_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pgv.Int64RangeGreaterThan)
  return target;
}

size_t Int64RangeGreaterThan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pgv.Int64RangeGreaterThan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->content_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64RangeGreaterThan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pgv.Int64RangeGreaterThan)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64RangeGreaterThan* source =
      ::google::protobuf::DynamicCastToGenerated<Int64RangeGreaterThan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pgv.Int64RangeGreaterThan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pgv.Int64RangeGreaterThan)
    MergeFrom(*source);
  }
}

void Int64RangeGreaterThan::MergeFrom(const Int64RangeGreaterThan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pgv.Int64RangeGreaterThan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void Int64RangeGreaterThan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pgv.Int64RangeGreaterThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64RangeGreaterThan::CopyFrom(const Int64RangeGreaterThan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pgv.Int64RangeGreaterThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64RangeGreaterThan::IsInitialized() const {
  return true;
}

void Int64RangeGreaterThan::Swap(Int64RangeGreaterThan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64RangeGreaterThan::InternalSwap(Int64RangeGreaterThan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::google::protobuf::Metadata Int64RangeGreaterThan::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_int64_2eproto);
  return ::file_level_metadata_int64_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Int64RangeLessThan::InitAsDefaultInstance() {
}
class Int64RangeLessThan::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64RangeLessThan::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64RangeLessThan::Int64RangeLessThan()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pgv.Int64RangeLessThan)
}
Int64RangeLessThan::Int64RangeLessThan(const Int64RangeLessThan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pgv.Int64RangeLessThan)
}

void Int64RangeLessThan::SharedCtor() {
}

Int64RangeLessThan::~Int64RangeLessThan() {
  // @@protoc_insertion_point(destructor:pgv.Int64RangeLessThan)
  SharedDtor();
}

void Int64RangeLessThan::SharedDtor() {
}

void Int64RangeLessThan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int64RangeLessThan& Int64RangeLessThan::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Int64RangeLessThan_int64_2eproto.base);
  return *internal_default_instance();
}


void Int64RangeLessThan::Clear() {
// @@protoc_insertion_point(message_clear_start:pgv.Int64RangeLessThan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Int64RangeLessThan::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Int64RangeLessThan*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_content();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_content(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Int64RangeLessThan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pgv.Int64RangeLessThan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_content())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_content())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pgv.Int64RangeLessThan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pgv.Int64RangeLessThan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Int64RangeLessThan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pgv.Int64RangeLessThan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_content_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->content(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pgv.Int64RangeLessThan)
}

::google::protobuf::uint8* Int64RangeLessThan::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pgv.Int64RangeLessThan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _content_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pgv.Int64RangeLessThan)
  return target;
}

size_t Int64RangeLessThan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pgv.Int64RangeLessThan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->content_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64RangeLessThan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pgv.Int64RangeLessThan)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64RangeLessThan* source =
      ::google::protobuf::DynamicCastToGenerated<Int64RangeLessThan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pgv.Int64RangeLessThan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pgv.Int64RangeLessThan)
    MergeFrom(*source);
  }
}

void Int64RangeLessThan::MergeFrom(const Int64RangeLessThan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pgv.Int64RangeLessThan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void Int64RangeLessThan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pgv.Int64RangeLessThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64RangeLessThan::CopyFrom(const Int64RangeLessThan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pgv.Int64RangeLessThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64RangeLessThan::IsInitialized() const {
  return true;
}

void Int64RangeLessThan::Swap(Int64RangeLessThan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64RangeLessThan::InternalSwap(Int64RangeLessThan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::google::protobuf::Metadata Int64RangeLessThan::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_int64_2eproto);
  return ::file_level_metadata_int64_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Int64RangeConst::InitAsDefaultInstance() {
}
class Int64RangeConst::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64RangeConst::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64RangeConst::Int64RangeConst()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pgv.Int64RangeConst)
}
Int64RangeConst::Int64RangeConst(const Int64RangeConst& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      content_(from.content_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pgv.Int64RangeConst)
}

void Int64RangeConst::SharedCtor() {
}

Int64RangeConst::~Int64RangeConst() {
  // @@protoc_insertion_point(destructor:pgv.Int64RangeConst)
  SharedDtor();
}

void Int64RangeConst::SharedDtor() {
}

void Int64RangeConst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int64RangeConst& Int64RangeConst::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Int64RangeConst_int64_2eproto.base);
  return *internal_default_instance();
}


void Int64RangeConst::Clear() {
// @@protoc_insertion_point(message_clear_start:pgv.Int64RangeConst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Int64RangeConst::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Int64RangeConst*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_content();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_content(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Int64RangeConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pgv.Int64RangeConst)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 content = 1 [(.validate.rules) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_content())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_content())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pgv.Int64RangeConst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pgv.Int64RangeConst)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Int64RangeConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pgv.Int64RangeConst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_content_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->content_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->content(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pgv.Int64RangeConst)
}

::google::protobuf::uint8* Int64RangeConst::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pgv.Int64RangeConst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  if (this->content_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _content_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pgv.Int64RangeConst)
  return target;
}

size_t Int64RangeConst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pgv.Int64RangeConst)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 content = 1 [(.validate.rules) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->content_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64RangeConst::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pgv.Int64RangeConst)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64RangeConst* source =
      ::google::protobuf::DynamicCastToGenerated<Int64RangeConst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pgv.Int64RangeConst)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pgv.Int64RangeConst)
    MergeFrom(*source);
  }
}

void Int64RangeConst::MergeFrom(const Int64RangeConst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pgv.Int64RangeConst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void Int64RangeConst::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pgv.Int64RangeConst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64RangeConst::CopyFrom(const Int64RangeConst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pgv.Int64RangeConst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64RangeConst::IsInitialized() const {
  return true;
}

void Int64RangeConst::Swap(Int64RangeConst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64RangeConst::InternalSwap(Int64RangeConst* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::google::protobuf::Metadata Int64RangeConst::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_int64_2eproto);
  return ::file_level_metadata_int64_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pgv
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pgv::Int64RangeGreaterThan* Arena::CreateMaybeMessage< ::pgv::Int64RangeGreaterThan >(Arena* arena) {
  return Arena::CreateInternal< ::pgv::Int64RangeGreaterThan >(arena);
}
template<> PROTOBUF_NOINLINE ::pgv::Int64RangeLessThan* Arena::CreateMaybeMessage< ::pgv::Int64RangeLessThan >(Arena* arena) {
  return Arena::CreateInternal< ::pgv::Int64RangeLessThan >(arena);
}
template<> PROTOBUF_NOINLINE ::pgv::Int64RangeConst* Arena::CreateMaybeMessage< ::pgv::Int64RangeConst >(Arena* arena) {
  return Arena::CreateInternal< ::pgv::Int64RangeConst >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
