// Code generated by protoc-gen-validate
// source: bytes.proto
// DO NOT EDIT!!!

#include "bytes.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::pgv::BytesRangeMaxLen> validator___pgv__BytesRangeMaxLen(static_cast<bool(*)(const ::pgv::BytesRangeMaxLen&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::BytesRangePrefix> validator___pgv__BytesRangePrefix(static_cast<bool(*)(const ::pgv::BytesRangePrefix&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::BytesRangeContains> validator___pgv__BytesRangeContains(static_cast<bool(*)(const ::pgv::BytesRangeContains&, pgv::ValidationMsg*)>(::pgv::Validate));


pgv::Validator<::pgv::BytesRangeConst> validator___pgv__BytesRangeConst(static_cast<bool(*)(const ::pgv::BytesRangeConst&, pgv::ValidationMsg*)>(::pgv::Validate));




} // namespace validate
} // namespace pgv


namespace pgv {


// Validate checks the field values on ::pgv::BytesRangeMaxLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::BytesRangeMaxLen& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	
	

	


	
		if (item.size() > 10) {
			{
std::ostringstream msg("invalid ");
msg << "BytesRangeMaxLenValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value length must be at most \" '\\n' \" bytes\"]";
*err = msg.str();
return false;
}
		}
	

	

	

	

	

	

		}
	

	return true;
}





// Validate checks the field values on ::pgv::BytesRangePrefix with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::BytesRangePrefix& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	
	

	


	

	
	{
		const std::string prefix = "\x99";
		if (!pgv::IsPrefix(prefix, item)) {
			{
std::ostringstream msg("invalid ");
msg << "BytesRangePrefixValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value does not have prefix \" \"\\\"\\\\x99\\\"\"]";
*err = msg.str();
return false;
}
		}
	}
	

	

	

	

	

		}
	

	return true;
}





// Validate checks the field values on ::pgv::BytesRangeContains with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::BytesRangeContains& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	
	

	


	

	

	

	
	{
		if (!pgv::Contains(item, "\x99")) {
			{
std::ostringstream msg("invalid ");
msg << "BytesRangeContainsValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value does not contain substring \" \"\\\"\\\\x99\\\"\"]";
*err = msg.str();
return false;
}
		}
	}
	

	

	

		}
	

	return true;
}





// Validate checks the field values on ::pgv::BytesRangeConst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	
	
	

	
	
	

	



bool Validate(const ::pgv::BytesRangeConst& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	

	

	

	
		for (int i = 0; i < m.content().size(); i++) {
			const auto& item = m.content().Get(i);
			(void)item;

			

			
	
	
	
		if (item != "\x99") {
			{
std::ostringstream msg("invalid ");
msg << "BytesRangeConstValidationError" << "." << "Content";
msg << "[" << "i" << "]";
msg << ": " << "[\"value must equal \" \"\\x99\"]";
*err = msg.str();
return false;
}
		}
	

	


	

	

	

	

	

	

		}
	

	return true;
}






} // namespace

