// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bytes.proto

package pgv

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on BytesRangeMaxLen with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BytesRangeMaxLen) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if len(item) > 10 {
			return BytesRangeMaxLenValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value length must be at most 10 bytes",
			}
		}

	}

	return nil
}

// BytesRangeMaxLenValidationError is the validation error returned by
// BytesRangeMaxLen.Validate if the designated constraints aren't met.
type BytesRangeMaxLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesRangeMaxLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesRangeMaxLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesRangeMaxLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesRangeMaxLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesRangeMaxLenValidationError) ErrorName() string { return "BytesRangeMaxLenValidationError" }

// Error satisfies the builtin error interface
func (e BytesRangeMaxLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesRangeMaxLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesRangeMaxLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesRangeMaxLenValidationError{}

// Validate checks the field values on BytesRangePrefix with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BytesRangePrefix) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if !bytes.HasPrefix(item, []uint8{0x99}) {
			return BytesRangePrefixValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value does not have prefix \"\\x99\"",
			}
		}

	}

	return nil
}

// BytesRangePrefixValidationError is the validation error returned by
// BytesRangePrefix.Validate if the designated constraints aren't met.
type BytesRangePrefixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesRangePrefixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesRangePrefixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesRangePrefixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesRangePrefixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesRangePrefixValidationError) ErrorName() string { return "BytesRangePrefixValidationError" }

// Error satisfies the builtin error interface
func (e BytesRangePrefixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesRangePrefix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesRangePrefixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesRangePrefixValidationError{}

// Validate checks the field values on BytesRangeContains with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BytesRangeContains) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if !bytes.Contains(item, []uint8{0x99}) {
			return BytesRangeContainsValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value does not contain \"\\x99\"",
			}
		}

	}

	return nil
}

// BytesRangeContainsValidationError is the validation error returned by
// BytesRangeContains.Validate if the designated constraints aren't met.
type BytesRangeContainsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesRangeContainsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesRangeContainsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesRangeContainsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesRangeContainsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesRangeContainsValidationError) ErrorName() string {
	return "BytesRangeContainsValidationError"
}

// Error satisfies the builtin error interface
func (e BytesRangeContainsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesRangeContains.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesRangeContainsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesRangeContainsValidationError{}

// Validate checks the field values on BytesRangeConst with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BytesRangeConst) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if !bytes.Equal(item, []uint8{0x99}) {
			return BytesRangeConstValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must equal [153]",
			}
		}

	}

	return nil
}

// BytesRangeConstValidationError is the validation error returned by
// BytesRangeConst.Validate if the designated constraints aren't met.
type BytesRangeConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesRangeConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesRangeConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesRangeConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesRangeConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesRangeConstValidationError) ErrorName() string { return "BytesRangeConstValidationError" }

// Error satisfies the builtin error interface
func (e BytesRangeConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesRangeConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesRangeConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesRangeConstValidationError{}
