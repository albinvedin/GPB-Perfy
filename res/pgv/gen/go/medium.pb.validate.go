// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: medium.proto

package pgv

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Medium with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Medium) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetField1(); val <= 0 || val > 10 {
		return MediumValidationError{
			field:  "Field1",
			reason: "value must be inside range (0, 10]",
		}
	}

	if val := m.GetField2(); val <= 0 || val > 10 {
		return MediumValidationError{
			field:  "Field2",
			reason: "value must be inside range (0, 10]",
		}
	}

	if val := m.GetField3(); val <= 0 || val > 10 {
		return MediumValidationError{
			field:  "Field3",
			reason: "value must be inside range (0, 10]",
		}
	}

	if val := m.GetField4(); val <= 0 || val > 10 {
		return MediumValidationError{
			field:  "Field4",
			reason: "value must be inside range (0, 10]",
		}
	}

	if val := m.GetField5(); val <= 0 || val > 10 {
		return MediumValidationError{
			field:  "Field5",
			reason: "value must be inside range (0, 10]",
		}
	}

	if val := m.GetField6(); val <= 10 || val > 50 {
		return MediumValidationError{
			field:  "Field6",
			reason: "value must be inside range (10, 50]",
		}
	}

	if val := m.GetField7(); val <= 10 || val > 50 {
		return MediumValidationError{
			field:  "Field7",
			reason: "value must be inside range (10, 50]",
		}
	}

	if val := m.GetField8(); val <= 10 || val > 50 {
		return MediumValidationError{
			field:  "Field8",
			reason: "value must be inside range (10, 50]",
		}
	}

	if val := m.GetField9(); val <= 10 || val > 50 {
		return MediumValidationError{
			field:  "Field9",
			reason: "value must be inside range (10, 50]",
		}
	}

	if val := m.GetField10(); val <= 10 || val > 50 {
		return MediumValidationError{
			field:  "Field10",
			reason: "value must be inside range (10, 50]",
		}
	}

	if val := m.GetField11(); val <= 5 || val > 15 {
		return MediumValidationError{
			field:  "Field11",
			reason: "value must be inside range (5, 15]",
		}
	}

	if val := m.GetField12(); val <= 5 || val > 15 {
		return MediumValidationError{
			field:  "Field12",
			reason: "value must be inside range (5, 15]",
		}
	}

	if val := m.GetField13(); val <= 5 || val > 15 {
		return MediumValidationError{
			field:  "Field13",
			reason: "value must be inside range (5, 15]",
		}
	}

	if val := m.GetField14(); val <= 5 || val > 15 {
		return MediumValidationError{
			field:  "Field14",
			reason: "value must be inside range (5, 15]",
		}
	}

	if val := m.GetField15(); val <= 5 || val > 15 {
		return MediumValidationError{
			field:  "Field15",
			reason: "value must be inside range (5, 15]",
		}
	}

	if val := m.GetField16(); val <= 5 || val > 100 {
		return MediumValidationError{
			field:  "Field16",
			reason: "value must be inside range (5, 100]",
		}
	}

	if val := m.GetField17(); val <= 5 || val > 100 {
		return MediumValidationError{
			field:  "Field17",
			reason: "value must be inside range (5, 100]",
		}
	}

	if val := m.GetField18(); val <= 5 || val > 100 {
		return MediumValidationError{
			field:  "Field18",
			reason: "value must be inside range (5, 100]",
		}
	}

	if val := m.GetField19(); val <= 5 || val > 100 {
		return MediumValidationError{
			field:  "Field19",
			reason: "value must be inside range (5, 100]",
		}
	}

	if val := m.GetField20(); val <= 5 || val > 100 {
		return MediumValidationError{
			field:  "Field20",
			reason: "value must be inside range (5, 100]",
		}
	}

	if val := m.GetField31(); val <= 20 || val > 2500000000 {
		return MediumValidationError{
			field:  "Field31",
			reason: "value must be inside range (20, 2500000000]",
		}
	}

	if val := m.GetField32(); val <= 20 || val > 2500000000 {
		return MediumValidationError{
			field:  "Field32",
			reason: "value must be inside range (20, 2500000000]",
		}
	}

	if val := m.GetField33(); val <= 20 || val > 2500000000 {
		return MediumValidationError{
			field:  "Field33",
			reason: "value must be inside range (20, 2500000000]",
		}
	}

	if v, ok := interface{}(m.GetField41()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field41",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField42()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field42",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField43()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field43",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField44()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field44",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField45()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field45",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField46()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field46",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField47()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field47",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField48()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field48",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField49()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field49",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetField50()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediumValidationError{
				field:  "Field50",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetField51()) > 10 {
		return MediumValidationError{
			field:  "Field51",
			reason: "value length must be at most 10 bytes",
		}
	}

	if len(m.GetField52()) > 20 {
		return MediumValidationError{
			field:  "Field52",
			reason: "value length must be at most 20 bytes",
		}
	}

	if len(m.GetField53()) > 30 {
		return MediumValidationError{
			field:  "Field53",
			reason: "value length must be at most 30 bytes",
		}
	}

	if val := m.GetField101(); val <= -100 || val > 100 {
		return MediumValidationError{
			field:  "Field101",
			reason: "value must be inside range (-100, 100]",
		}
	}

	if val := m.GetField102(); val <= -100 || val > 100 {
		return MediumValidationError{
			field:  "Field102",
			reason: "value must be inside range (-100, 100]",
		}
	}

	if val := m.GetField103(); val <= -100 || val > 100 {
		return MediumValidationError{
			field:  "Field103",
			reason: "value must be inside range (-100, 100]",
		}
	}

	return nil
}

// MediumValidationError is the validation error returned by Medium.Validate if
// the designated constraints aren't met.
type MediumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediumValidationError) ErrorName() string { return "MediumValidationError" }

// Error satisfies the builtin error interface
func (e MediumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedium.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediumValidationError{}
