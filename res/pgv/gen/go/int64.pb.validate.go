// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: int64.proto

package pgv

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Int64RangeGreaterThan with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Int64RangeGreaterThan) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if item <= 100 {
			return Int64RangeGreaterThanValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must be greater than 100",
			}
		}

	}

	return nil
}

// Int64RangeGreaterThanValidationError is the validation error returned by
// Int64RangeGreaterThan.Validate if the designated constraints aren't met.
type Int64RangeGreaterThanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64RangeGreaterThanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64RangeGreaterThanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64RangeGreaterThanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64RangeGreaterThanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64RangeGreaterThanValidationError) ErrorName() string {
	return "Int64RangeGreaterThanValidationError"
}

// Error satisfies the builtin error interface
func (e Int64RangeGreaterThanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64RangeGreaterThan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64RangeGreaterThanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64RangeGreaterThanValidationError{}

// Validate checks the field values on Int64RangeLessThan with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Int64RangeLessThan) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if item >= 100 {
			return Int64RangeLessThanValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must be less than 100",
			}
		}

	}

	return nil
}

// Int64RangeLessThanValidationError is the validation error returned by
// Int64RangeLessThan.Validate if the designated constraints aren't met.
type Int64RangeLessThanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64RangeLessThanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64RangeLessThanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64RangeLessThanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64RangeLessThanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64RangeLessThanValidationError) ErrorName() string {
	return "Int64RangeLessThanValidationError"
}

// Error satisfies the builtin error interface
func (e Int64RangeLessThanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64RangeLessThan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64RangeLessThanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64RangeLessThanValidationError{}

// Validate checks the field values on Int64RangeConst with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Int64RangeConst) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if item != 100 {
			return Int64RangeConstValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must equal 100",
			}
		}

	}

	return nil
}

// Int64RangeConstValidationError is the validation error returned by
// Int64RangeConst.Validate if the designated constraints aren't met.
type Int64RangeConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64RangeConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64RangeConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64RangeConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64RangeConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64RangeConstValidationError) ErrorName() string { return "Int64RangeConstValidationError" }

// Error satisfies the builtin error interface
func (e Int64RangeConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64RangeConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64RangeConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64RangeConstValidationError{}
