#!/usr/bin/env python3
import os, re, math, sys
from generator import parser
from generator.go import GoGenerator
from generator.cpp import CppGenerator

def getPath(lang = ""):
    path = os.path.dirname(os.path.realpath(__file__))
    if lang == "":
        return path
    return "/".join(path.split("/")[:-1]) + "/" + lang

def main():
    lang = sys.argv[1]
    ignores = sys.argv[2].split("|")

    path = getPath()
    cppOut = getPath("cpp")
    goOut = getPath("go")

    goRangeTemplate = open("%s/generator/templates/go/%s" % (path, "range_template.go"), "r").read()
    cppRangeTemplate = open("%s/generator/templates/cpp/%s" % (path, "range_template.cc"), "r").read()

    goGenerator = GoGenerator(goOut, goRangeTemplate)
    cppGenerator = CppGenerator(cppOut, cppRangeTemplate)

    generators = []
    if lang == "all":
        generators += [goGenerator, cppGenerator]
    elif lang == "go":
        generators += [goGenerator]
    elif lang == "cpp":
        generators += [cppGenerator]

    for filename in os.listdir(path):
        if filename.endswith(".proto") and filename.split(".")[0] not in ignores:
            p = parser.Parse(open("%s/%s" % (path, filename), "r").read(), filename)
            for generator in generators:
                generator.addMessages(p.messages)
                generator.addEnums(p.enums)

    for generator in generators:
        generator.generate()

main()