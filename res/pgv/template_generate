#!/usr/bin/env python3
import os, re, math
from generator import parser
from generator.go import GoGenerator
from generator.cpp import CppGenerator

def getPath(lang = ""):
    path = os.path.dirname(os.path.realpath(__file__))
    if lang == "":
        return path
    return "/".join(path.split("/")[:-1]) + "/" + lang

def main():
    path = getPath()
    cppOut = getPath("cpp")
    goOut = getPath("go")

    goRangeTemplate = open("%s/generator/templates/go/%s" % (path, "range_template.go"), "r").read()
    cppRangeTemplate = open("%s/generator/templates/cpp/%s" % (path, "range_template.cc"), "r").read()

    goGenerator = GoGenerator(goOut, goRangeTemplate)
    cppGenerator = CppGenerator(cppOut, cppRangeTemplate)

    for filename in os.listdir(path):
        if filename.endswith(".proto"):
            p = parser.Parse(open("%s/%s" % (path, filename), "r").read(), filename)

            goGenerator.addMessages(p.messages)
            goGenerator.addEnums(p.enums)

            cppGenerator.addMessages(p.messages)
            cppGenerator.addEnums(p.enums)

    goGenerator.generate()
    cppGenerator.generate()

main()