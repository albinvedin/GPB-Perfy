// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: int64range.proto

package pgv

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on RepeatedInt64Range with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedInt64Range) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if val := item; val <= -100 || val >= 100 {
			return RepeatedInt64RangeValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must be inside range (-100, 100)",
			}
		}

	}

	return nil
}

// RepeatedInt64RangeValidationError is the validation error returned by
// RepeatedInt64Range.Validate if the designated constraints aren't met.
type RepeatedInt64RangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedInt64RangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedInt64RangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedInt64RangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedInt64RangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedInt64RangeValidationError) ErrorName() string {
	return "RepeatedInt64RangeValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedInt64RangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedInt64Range.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedInt64RangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedInt64RangeValidationError{}

// Validate checks the field values on RepeatedFloatRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedFloatRange) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if val := item; val <= -100 || val >= 100 {
			return RepeatedFloatRangeValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must be inside range (-100, 100)",
			}
		}

	}

	return nil
}

// RepeatedFloatRangeValidationError is the validation error returned by
// RepeatedFloatRange.Validate if the designated constraints aren't met.
type RepeatedFloatRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedFloatRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedFloatRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedFloatRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedFloatRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedFloatRangeValidationError) ErrorName() string {
	return "RepeatedFloatRangeValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedFloatRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedFloatRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedFloatRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedFloatRangeValidationError{}

// Validate checks the field values on RepeatedDoubleRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedDoubleRange) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if val := item; val <= -100 || val >= 100 {
			return RepeatedDoubleRangeValidationError{
				field:  fmt.Sprintf("Content[%v]", idx),
				reason: "value must be inside range (-100, 100)",
			}
		}

	}

	return nil
}

// RepeatedDoubleRangeValidationError is the validation error returned by
// RepeatedDoubleRange.Validate if the designated constraints aren't met.
type RepeatedDoubleRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedDoubleRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedDoubleRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedDoubleRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedDoubleRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedDoubleRangeValidationError) ErrorName() string {
	return "RepeatedDoubleRangeValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedDoubleRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedDoubleRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedDoubleRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedDoubleRangeValidationError{}
